{"version":3,"file":"index.mjs","sources":["../src/patches.ts","../src/Utils.ts","../src/PrimaryPools.ts","../src/CLPool.ts","../src/StableSwapPool.ts","../src/Graph.ts","../src/MultiRouter.ts","../src/deprecated/MultiRouterTypes.ts","../src/deprecated/MultiRouterMath.ts"],"sourcesContent":["import { Observable } from 'rxjs';\n//const debug = require(\"debug\")(\"tines\")\n\nexport let patches = {\n  subscriptions: 0\n};\n\nlet APPLIED = false;\n\nexport const applyPatches = () => {\n  if (APPLIED) {\n    // Only monkeypatch once to avoid incorrect counts\n    return;\n  }\n  const sub = Observable.prototype.subscribe;\n\n  // Monkeypatch Observable.subscribe globally so we can track how many exist\n  Observable.prototype.subscribe = function(...args) {\n    patches.subscriptions++;\n    const sink = sub.call(this, ...args);\n    const unsub = sink.unsubscribe;\n    sink.unsubscribe = (...unsubArcs) => {\n      patches.subscriptions--;\n      unsub.call(sink, ...unsubArcs);\n      sink.unsubscribe = unsub.bind(sink);\n    };\n    return sink;\n  };\n  APPLIED = true ;\n};\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { applyPatches } from './patches';\n\nconst debug = require(\"debug\")(\"tines\")\n\nexport function ASSERT(f: () => boolean, t?: string) {\n    if (process.env.NODE_ENV !== 'production' && (!f() && t)) console.error(t);\n  }\n\nlet DEBUG_MODE = false\nexport function DEBUG(f: () => any) {\n  if (DEBUG_MODE) f()\n}\nexport function DEBUG_MODE_ON(on: boolean) {\n  DEBUG_MODE = on\n}\n\nlet TINES_TRACE_MODE = false;\nexport function isTraceMode(): boolean {\n  return TINES_TRACE_MODE;\n}\n\nexport function _disableDTraceMode() {\n  TINES_TRACE_MODE = false;\n}\n\nexport function enableTraceMode() {\n  TINES_TRACE_MODE = true;\n  applyPatches();\n}\n  \n  export function closeValues(a: number, b: number, accuracy: number): boolean {\n    if (accuracy === 0) return a === b;\n    if (a < 1 / accuracy) return Math.abs(a - b) <= 10;\n    return Math.abs(a / b - 1) < accuracy;\n  }\n\n  /**\n   * @export calcSquareEquation\n   * @param {number} a\n   * @param {number} b\n   * @param {number} c\n   * @return {*}  {[number, number]}\n   */\n  export function calcSquareEquation(\n    a: number,\n    b: number,\n    c: number\n  ): [number, number] {\n    const D = b * b - 4 * a * c;\n    console.assert(D >= 0, `Discriminant is negative! ${a} ${b} ${c}`);\n    const sqrtD = Math.sqrt(D);\n    return [(-b - sqrtD) / 2 / a, (-b + sqrtD) / 2 / a];\n  }\n\n/**\n * @export revertPositive\n * @param {(x: number) => number} f\n * @param {number} out\n * @param {number} [hint=1]\n * @return {*} \n * @summary Returns such x > 0 that f(x) = out or 0 if there is no such x or f defined not everywhere\n * @hint  approximation of x to spead up the algorithm\n * @note f assumed to be continues monotone growth function defined everywhere\n */\nexport function revertPositive(\n    f: (x: number) => number,\n    out: number,\n    hint = 1\n  ) {\n    try {\n      if (out <= f(0)) return 0;\n      let min: number;\n      let max: number;\n      if (f(hint) > out) {\n        min = hint / 2;\n        while (f(min) > out) min /= 2;\n        max = min * 2;\n      } else {\n        max = hint * 2;\n        while (f(max) < out) max *= 2;\n        min = max / 2;\n      }\n  \n      while (max / min - 1 > 1e-4) {\n        const x0: number = (min + max) / 2;\n        const y0 = f(x0);\n        if (out === y0) return x0;\n        if (out < y0) max = x0;\n        else min = x0;\n      }\n      return (min + max) / 2;\n    } catch (e) {\n      return 0;\n    }\n  }\n  \n  export function getBigNumber(\n    value: number\n  ): BigNumber {\n    const v = Math.abs(value)\n    if (v < Number.MAX_SAFE_INTEGER) return BigNumber.from(Math.round(value));\n  \n    const exp = Math.floor(Math.log(v) / Math.LN2);\n    console.assert(exp >= 51, \"Internal Error 314\");\n    const shift = exp - 51;\n    // exponentiation operator **; accepts BigInts as operands.\n    const mant = Math.round(v / 2 ** shift);\n    const res = BigNumber.from(mant).mul(BigNumber.from(2).pow(shift));\n    return value > 0 ? res : res.mul(-1);\n  }\n  ","import { BigNumber } from '@ethersproject/bignumber'\nimport { getBigNumber, revertPositive } from './Utils'\n\nexport const TYPICAL_SWAP_GAS_COST = 60_000;\nexport const TYPICAL_MINIMAL_LIQUIDITY = 1_000;\n\nexport interface RToken {\n  name: string\n  address: string\n}\n\nexport abstract class RPool {\n  readonly address: string\n  readonly token0: RToken\n  readonly token1: RToken\n  readonly fee: number\n  reserve0: BigNumber\n  reserve1: BigNumber\n  readonly minLiquidity: number\n  readonly swapGasCost: number\n\n  constructor(\n    address: string,\n    token0: RToken,\n    token1: RToken,\n    fee: number,\n    reserve0: BigNumber,\n    reserve1: BigNumber,\n    minLiquidity = TYPICAL_MINIMAL_LIQUIDITY,\n    swapGasCost = TYPICAL_SWAP_GAS_COST\n  ) {\n    this.address = address\n    ;(this.token0 = token0), (this.token1 = token1)\n    this.fee = fee\n    this.minLiquidity = minLiquidity\n    this.swapGasCost = swapGasCost\n    this.reserve0 = reserve0\n    this.reserve1 = reserve1\n  }\n\n  updateReserves(res0: BigNumber, res1: BigNumber) {\n    this.reserve0 = res0\n    this.reserve1 = res1\n  }\n\n  // Returns [<output amount>, <gas consumption estimation>]\n  abstract calcOutByIn(amountIn: number, direction: boolean): {out: number, gasSpent: number}\n  abstract calcInByOut(amountOut: number, direction: boolean): {inp: number, gasSpent: number}\n  abstract calcCurrentPriceWithoutFee(direction: boolean): number\n  // abstract calcPrice(amountIn: number, direction: boolean, takeFeeIntoAccount: boolean): number;\n  // abstract calcInputByPrice(price: number, direction: boolean, takeFeeIntoAccount: boolean, hint: number): number;\n}\n\nexport class ConstantProductRPool extends RPool {\n  reserve0Number: number\n  reserve1Number: number\n\n  constructor(address: string, token0: RToken, token1: RToken, fee: number, reserve0: BigNumber, reserve1: BigNumber) {\n    super(address, token0, token1, fee, reserve0, reserve1)\n    this.reserve0Number = parseInt(reserve0.toString())\n    this.reserve1Number = parseInt(reserve1.toString())\n  }\n\n  updateReserves(res0: BigNumber, res1: BigNumber) {\n    this.reserve0 = res0\n    this.reserve0Number = parseInt(res0.toString())\n    this.reserve1 = res1\n    this.reserve1Number = parseInt(res1.toString())\n  }\n\n  calcOutByIn(amountIn: number, direction: boolean): {out: number, gasSpent: number} {\n    const x = direction ? this.reserve0Number : this.reserve1Number\n    const y = direction ? this.reserve1Number : this.reserve0Number\n    return {out: (y * amountIn) / (x / (1 - this.fee) + amountIn), gasSpent: this.swapGasCost}\n  }\n\n  calcInByOut(amountOut: number, direction: boolean): {inp: number, gasSpent: number} {\n    const x = direction ? this.reserve0Number : this.reserve1Number\n    const y = direction ? this.reserve1Number : this.reserve0Number\n    if ((y-amountOut) < this.minLiquidity)  // not possible swap\n      return {inp: Number.POSITIVE_INFINITY, gasSpent: this.swapGasCost}\n\n    let input = (x * amountOut) / (1 - this.fee) / (y - amountOut)\n    return {inp: input, gasSpent: this.swapGasCost}\n  }\n\n  calcCurrentPriceWithoutFee(direction: boolean): number {\n    return this.calcPrice(0, direction, false)\n  }\n\n  calcPrice(amountIn: number, direction: boolean, takeFeeIntoAccount: boolean): number {\n    const x = direction ? this.reserve0Number : this.reserve1Number\n    const y = direction ? this.reserve1Number : this.reserve0Number\n    const oneMinusFee = takeFeeIntoAccount ? 1 - this.fee : 1\n    const xf = x / oneMinusFee\n    return (y * xf) / (xf + amountIn) / (xf + amountIn)\n  }\n\n  calcInputByPrice(price: number, direction: boolean, takeFeeIntoAccount: boolean): number {\n    const x = direction ? this.reserve0Number : this.reserve1Number\n    const y = direction ? this.reserve1Number : this.reserve0Number\n    const oneMinusFee = takeFeeIntoAccount ? 1 - this.fee : 1\n    const xf = x / oneMinusFee\n    return Math.sqrt(y * xf * price) - xf // TODO: or y*xf/price ???\n  }\n\n  getLiquidity() {\n    return Math.sqrt(this.reserve0Number * this.reserve1Number)\n  }\n}\n\nexport class HybridRPool extends RPool {\n  readonly A: number\n  readonly A_PRECISION = 100\n  D: BigNumber // set it to 0 if reserves are changed !!\n\n  constructor(\n    address: string,\n    token0: RToken,\n    token1: RToken,\n    fee: number,\n    A: number,\n    reserve0: BigNumber,\n    reserve1: BigNumber\n  ) {\n    super(address, token0, token1, fee, reserve0, reserve1)\n    this.A = A\n    this.D = BigNumber.from(0)\n  }\n\n  updateReserves(res0: BigNumber, res1: BigNumber) {\n    this.D = BigNumber.from(0)\n    this.reserve0 = res0\n    this.reserve1 = res1\n  }\n\n  computeLiquidity(): BigNumber {\n    if (!this.D.eq(0)) return this.D // already calculated\n\n    const r0 = this.reserve0\n    const r1 = this.reserve1\n\n    if (r0.isZero() && r1.isZero()) return BigNumber.from(0)\n\n    const s = r0.add(r1)\n    const nA = BigNumber.from(this.A * 2)\n    let prevD\n    let D = s\n    for (let i = 0; i < 256; i++) {\n      const dP = D.mul(D).div(r0).mul(D).div(r1).div(4)\n      prevD = D\n      D = nA\n        .mul(s)\n        .div(this.A_PRECISION)\n        .add(dP.mul(2))\n        .mul(D)\n        .div(nA.div(this.A_PRECISION).sub(1).mul(D).add(dP.mul(3)))\n      if (D.sub(prevD).abs().lte(1)) {\n        break\n      }\n    }\n    this.D = D\n    return D\n  }\n\n  computeY(x: BigNumber): BigNumber {\n    const D = this.computeLiquidity()\n\n    const nA = this.A * 2\n\n    let c = D.mul(D)\n      .div(x.mul(2))\n      .mul(D)\n      .div((nA * 2) / this.A_PRECISION)\n    let b = D.mul(this.A_PRECISION).div(nA).add(x)\n\n    let yPrev\n    let y = D\n    for (let i = 0; i < 256; i++) {\n      yPrev = y\n\n      y = y.mul(y).add(c).div(y.mul(2).add(b).sub(D))\n      if (y.sub(yPrev).abs().lte(1)) {\n        break\n      }\n    }\n    return y\n  }\n\n  calcOutByIn(amountIn: number, direction: boolean): {out: number, gasSpent: number} {\n    const xBN = direction ? this.reserve0 : this.reserve1\n    const yBN = direction ? this.reserve1 : this.reserve0\n    const xNewBN = xBN.add(getBigNumber(amountIn * (1 - this.fee)))\n    const yNewBN = this.computeY(xNewBN)\n    const dy = parseInt(yBN.sub(yNewBN).toString())\n\n    return {out: dy, gasSpent: this.swapGasCost}\n  }\n\n  calcInByOut(amountOut: number, direction: boolean): {inp: number, gasSpent: number} {\n    const xBN = direction ? this.reserve0 : this.reserve1\n    const yBN = direction ? this.reserve1 : this.reserve0\n    let yNewBN = yBN.sub(getBigNumber(amountOut))\n    if (yNewBN.lt(1))\n      // lack of precision\n      yNewBN = BigNumber.from(1)\n\n    const xNewBN = this.computeY(yNewBN)\n    let input = Math.round(parseInt(xNewBN.sub(xBN).toString()) / (1 - this.fee))\n\n    //if (input < 1) input = 1\n    return {inp: input, gasSpent: this.swapGasCost}\n  }\n\n  calcCurrentPriceWithoutFee(direction: boolean): number {\n    return this.calcPrice(0, direction, false)\n  }\n\n  calcPrice(amountIn: number, direction: boolean, takeFeeIntoAccount: boolean): number {\n    const xBN = direction ? this.reserve0 : this.reserve1\n    const x = parseInt(xBN.toString())\n    const oneMinusFee = takeFeeIntoAccount ? 1 - this.fee : 1\n    const D = parseInt(this.computeLiquidity().toString())\n    const A = this.A / this.A_PRECISION\n    const xI = x + amountIn\n    const b = 4 * A * xI + D - 4 * A * D\n    const ac4 = (D * D * D) / xI\n    const Ds = Math.sqrt(b * b + 4 * A * ac4)\n    const res = (0.5 - (2 * b - ac4 / xI) / Ds / 4) * oneMinusFee\n    return res\n  }\n\n  calcInputByPrice(price: number, direction: boolean, takeFeeIntoAccount: boolean, hint = 1): number {\n    // TODO:  (x:number) => this.calcPrice(x, !direction, takeFeeIntoAccount)  ???\n    return revertPositive((x: number) => 1 / this.calcPrice(x, direction, takeFeeIntoAccount), price, hint)\n  }\n}\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { RPool, TYPICAL_MINIMAL_LIQUIDITY, TYPICAL_SWAP_GAS_COST } from \"./PrimaryPools\";\nimport type { RToken } from \"./PrimaryPools\";\n\nexport const CL_MIN_TICK = -887_272;\nexport const CL_MAX_TICK = -CL_MIN_TICK - 1\n\nexport interface CLTick {\n  index: number\n  DLiquidity: number\n}\n\nexport class CLRPool extends RPool {\n  tickSpacing: number\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n\n  constructor(      \n    address: string,\n    token0: RToken,\n    token1: RToken,\n    fee: number,\n    tickSpacing: number,\n    reserve0: BigNumber,\n    reserve1: BigNumber,\n    liquidity: number,\n    sqrtPrice: number,\n    nearestTick: number,\n    ticks: CLTick[]\n  ) {\n    super(      \n      address,\n      token0,\n      token1,\n      fee,\n      reserve0,\n      reserve1,\n      TYPICAL_MINIMAL_LIQUIDITY,\n      TYPICAL_SWAP_GAS_COST,\n    )\n    this.tickSpacing = tickSpacing\n    this.liquidity = liquidity\n    this.sqrtPrice = sqrtPrice\n    this.nearestTick = nearestTick\n    this.ticks = ticks\n    if (this.ticks.length === 0) {\n      this.ticks.push({ index: CL_MIN_TICK, DLiquidity: 0 })\n      this.ticks.push({ index: CL_MAX_TICK, DLiquidity: 0 })\n    }\n    if (this.ticks[0].index > CL_MIN_TICK) this.ticks.unshift({ index: CL_MIN_TICK, DLiquidity: 0 })\n    if (this.ticks[this.ticks.length - 1].index < CL_MAX_TICK) this.ticks.push({ index: CL_MAX_TICK, DLiquidity: 0 })\n  }\n\n  calcOutByIn(amountIn: number, direction: boolean): {out: number, gasSpent: number} {\n    let nextTickToCross = direction ? this.nearestTick : this.nearestTick + 1\n    let currentPrice = this.sqrtPrice\n    let currentLiquidity = this.liquidity\n    let outAmount = 0\n    let input = amountIn\n  \n    while (input > 0) {\n      if (nextTickToCross < 0 || nextTickToCross >= this.ticks.length)\n        return {out: outAmount, gasSpent: this.swapGasCost}\n  \n      const nextTickPrice = Math.sqrt(Math.pow(1.0001, this.ticks[nextTickToCross].index))\n      // console.log('L, P, tick, nextP', currentLiquidity,\n      //     currentPrice, this.ticks[nextTickToCross].index, nextTickPrice);\n      let output = 0\n  \n      if (direction) {\n        const maxDx = (currentLiquidity * (currentPrice - nextTickPrice)) / currentPrice / nextTickPrice\n        //console.log('input, maxDx', input, maxDx);\n  \n        if (input <= maxDx) {\n          output = (currentLiquidity * currentPrice * input) / (input + currentLiquidity / currentPrice)\n          input = 0\n        } else {\n          output = currentLiquidity * (currentPrice - nextTickPrice)\n          currentPrice = nextTickPrice\n          input -= maxDx\n          if ( (this.ticks[nextTickToCross].index/this.tickSpacing) % 2 === 0) {\n            currentLiquidity -= this.ticks[nextTickToCross].DLiquidity\n          } else {\n            currentLiquidity += this.ticks[nextTickToCross].DLiquidity\n          }\n          nextTickToCross--\n        }\n      } else {\n        const maxDy = currentLiquidity * (nextTickPrice - currentPrice)\n        //console.log('input, maxDy', input, maxDy);\n        if (input <= maxDy) {\n          output = input / currentPrice / (currentPrice + input / currentLiquidity)\n          input = 0\n        } else {\n          output = (currentLiquidity * (nextTickPrice - currentPrice)) / currentPrice / nextTickPrice\n          currentPrice = nextTickPrice\n          input -= maxDy\n          if ( (this.ticks[nextTickToCross].index/this.tickSpacing) % 2 === 0) {\n            currentLiquidity += this.ticks[nextTickToCross].DLiquidity\n          } else {\n            currentLiquidity -= this.ticks[nextTickToCross].DLiquidity\n          }\n          nextTickToCross++\n        }\n      }\n  \n      outAmount += output * (1 - this.fee)\n      //console.log('out', outAmount);\n    }\n  \n    return {out: outAmount, gasSpent: this.swapGasCost}  // TODO: more accurate gas prediction \n  }\n\n  calcInByOut(amountOut: number, direction: boolean): {inp: number, gasSpent: number} {  \n    let nextTickToCross = direction ? this.nearestTick : this.nearestTick + 1\n    let currentPrice = this.sqrtPrice\n    let currentLiquidity = this.liquidity\n    let input = 0\n    let outBeforeFee = amountOut/(1-this.fee)    \n\n    while (outBeforeFee > 0) {\n      if (nextTickToCross < 0 || nextTickToCross >= this.ticks.length)\n        return {inp: input, gasSpent: this.swapGasCost}\n  \n      const nextTickPrice = Math.sqrt(Math.pow(1.0001, this.ticks[nextTickToCross].index))\n      // console.log('L, P, tick, nextP', currentLiquidity,\n      //     currentPrice, this.ticks[nextTickToCross].index, nextTickPrice);\n  \n      if (direction) {\n        const maxDy = currentLiquidity * (currentPrice - nextTickPrice)\n        //console.log('input, maxDy', input, maxDy);\n        if (outBeforeFee <= maxDy) {\n          input += outBeforeFee / currentPrice / (currentPrice - outBeforeFee / currentLiquidity)\n          outBeforeFee = 0\n        } else {\n          input += (currentLiquidity * (currentPrice - nextTickPrice)) / currentPrice / nextTickPrice\n          currentPrice = nextTickPrice\n          outBeforeFee -= maxDy\n          if ( (this.ticks[nextTickToCross].index/this.tickSpacing) % 2 === 0) {\n            currentLiquidity -= this.ticks[nextTickToCross].DLiquidity\n          } else {\n            currentLiquidity += this.ticks[nextTickToCross].DLiquidity\n          }\n          nextTickToCross--\n        }\n      } else {\n        const maxDx = (currentLiquidity * (nextTickPrice - currentPrice)) / currentPrice / nextTickPrice\n        //console.log('outBeforeFee, maxDx', outBeforeFee, maxDx);\n  \n        if (outBeforeFee <= maxDx) {\n          input += (currentLiquidity * currentPrice * outBeforeFee) / (currentLiquidity / currentPrice - outBeforeFee)\n          outBeforeFee = 0\n        } else {\n          input += currentLiquidity * (nextTickPrice - currentPrice)\n          currentPrice = nextTickPrice\n          outBeforeFee -= maxDx\n          if ( (this.ticks[nextTickToCross].index/this.tickSpacing) % 2 === 0) {\n            currentLiquidity += this.ticks[nextTickToCross].DLiquidity\n          } else {\n            currentLiquidity -= this.ticks[nextTickToCross].DLiquidity\n          }\n          nextTickToCross++\n        }\n      }\n    }\n  \n    return {inp: input, gasSpent: this.swapGasCost}\n  }\n  \n  calcCurrentPriceWithoutFee(direction: boolean): number {\n    const p = this.sqrtPrice*this.sqrtPrice\n    return direction ? p : 1/p\n  }\n}\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { RPool } from \"./PrimaryPools\";\nimport type { RToken } from \"./PrimaryPools\";\nimport { getBigNumber } from './Utils'\n\ninterface Rebase {\n  elastic: BigNumber\n  base: BigNumber\n}\n\nfunction toAmountBN(share: BigNumber, total: Rebase) {\n  if (total.base.isZero() || total.elastic.isZero()) return share\n  return share.mul(total.elastic).div(total.base)\n}\n\nclass RebaseInternal {\n  elastic2Base: number\n  rebaseBN: Rebase\n\n  constructor(rebase: Rebase) {\n    this.rebaseBN = rebase\n    if (rebase.base.isZero() || rebase.elastic.isZero())\n      this.elastic2Base = 1\n    else\n      this.elastic2Base = parseInt(rebase.elastic.toString())/parseInt(rebase.base.toString())\n  }\n\n  toAmount(share: number) {\n    return share*this.elastic2Base\n  }\n\n  toShare(amount: number) {\n    return amount/this.elastic2Base\n  }\n\n  toAmountBN(share: BigNumber) {\n    return toAmountBN(share, this.rebaseBN)\n  }\n}\n\n// xy(xx+yy) = k\nexport class StableSwapRPool extends RPool {\n  k: BigNumber // set it to 0 if reserves are changed !!\n  total0 : RebaseInternal\n  total1: RebaseInternal\n\n  constructor(\n    address: string, \n    token0: RToken, \n    token1: RToken, \n    fee: number, \n    reserve0: BigNumber,\n    reserve1: BigNumber,\n    total0 : Rebase,\n    total1: Rebase,\n  ) {\n    super(address, token0, token1, fee, toAmountBN(reserve0, total0), toAmountBN(reserve1, total1))\n    this.k = BigNumber.from(0)\n    this.total0 = new RebaseInternal(total0)\n    this.total1 = new RebaseInternal(total1)\n  }\n\n  updateReserves(res0: BigNumber, res1: BigNumber) {\n    this.k = BigNumber.from(0)\n    this.reserve0 = this.total0.toAmountBN(res0)\n    this.reserve1 = this.total1.toAmountBN(res1)\n  }\n\n  computeK(): BigNumber {\n    if (this.k.isZero()) {\n      const x = this.reserve0\n      const y = this.reserve1\n      this.k = x.mul(y).mul( x.mul(x).add(y.mul(y)) )\n    }\n    return this.k\n  }\n\n  computeY(x: BigNumber, yHint: BigNumber): BigNumber {\n    const k = this.computeK()\n    const x2 = x.shl(1)\n    const x3 = x.mul(3)\n    const xCube = x.mul(x).mul(x)\n    let yPrev = yHint, y = yHint\n    for (let i = 0; i < 255; ++i) {\n      const ySquare = y.mul(y)\n      const yCube = ySquare.mul(y)\n      y = yCube.mul(x2).add(k).div( ySquare.mul(x3).add(xCube) )\n      if (y.sub(yPrev).abs().lte(1)) break\n      yPrev = y\n    }\n    return y\n  }\n\n  calcOutByIn(amountIn: number, direction: boolean): {out: number, gasSpent: number} {\n    amountIn = direction ? this.total0.toAmount(amountIn) : this.total1.toAmount(amountIn)\n    const x = direction ? this.reserve0 : this.reserve1\n    const y = direction ? this.reserve1 : this.reserve0\n    const xNew = x.add(getBigNumber(Math.floor(amountIn * (1 - this.fee))))\n    const yNew = this.computeY(xNew, y)\n    const outA = parseInt(y.sub(yNew).toString()) - 1    // with precision loss compensation\n    const outB = Math.max(outA, 0)\n    const out = direction ? this.total1.toShare(outB) : this.total0.toShare(outB)\n    return {out, gasSpent: this.swapGasCost}\n  }\n\n  calcInByOut(amountOut: number, direction: boolean): {inp: number, gasSpent: number} {\n    amountOut = direction ? this.total0.toAmount(amountOut) : this.total1.toAmount(amountOut)\n    const x = direction ? this.reserve0 : this.reserve1\n    const y = direction ? this.reserve1 : this.reserve0\n    let yNew = y.sub(getBigNumber(Math.ceil(amountOut)))\n    if (yNew.lt(this.minLiquidity))  // not possible swap\n      return {inp: Number.POSITIVE_INFINITY, gasSpent: this.swapGasCost}\n\n    const xNew = this.computeY(yNew, x)\n    const input = Math.round(parseInt(xNew.sub(x).toString()) / (1 - this.fee)) + 1  // with precision loss compensation\n    const inp = direction ? this.total1.toShare(input) : this.total0.toShare(input)\n    return {inp, gasSpent: this.swapGasCost}\n  }\n\n  calcCurrentPriceWithoutFee(direction: boolean): number {\n    const calcDirection = this.reserve0.gt(this.reserve1)\n    const xBN = calcDirection ? this.reserve0 : this.reserve1\n    // TODO: make x = max(x, y)\n    const x = parseInt(xBN.toString())\n    const k = parseInt(this.computeK().toString())\n    const q = k/x/2\n    const qD = -q/x                           // devivative of q\n    const Q = Math.pow(x, 6)/27 + q*q\n    const QD = 6*Math.pow(x, 5)/27 + 2*q*qD   // derivative of Q\n    const sqrtQ = Math.sqrt(Q)\n    const sqrtQD = 1/2/sqrtQ*QD               // derivative of sqrtQ\n    const a = sqrtQ + q\n    const aD = sqrtQD + qD\n    const b = sqrtQ - q\n    const bD = sqrtQD - qD\n    const a3 = Math.pow(a, 1/3)\n    const a3D = 1/3*a3/a*aD\n    const b3 = Math.pow(b, 1/3)\n    const b3D = 1/3*b3/b*bD\n    const yD = a3D - b3D\n    const yDShares = calcDirection ? \n      this.total1.toShare(this.total0.toAmount(yD)) :\n      this.total0.toShare(this.total1.toAmount(yD))\n    \n    return calcDirection == direction ? -yDShares : -1/yDShares\n  }\n\n}","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { RPool } from \"./PrimaryPools\";\nimport {ASSERT, getBigNumber, closeValues, DEBUG, enableTraceMode } from \"./Utils\";\n\nimport type { RToken } from \"./PrimaryPools\";\n\n/**\n * @export\n * @interface RouteLeg\n * @summary Routing info about each one swap\n */\nexport interface RouteLeg {\n  poolAddress: string       // which pool use for swap\n  poolFee: number\n\n  tokenFrom: RToken         // from what token to swap\n  tokenTo: RToken           // to what token \n\n  assumedAmountIn: number   // assumed number of input token for swapping\n  assumedAmountOut: number  // assumed number of output token after swapping\n\n  swapPortion: number       // for router contract\n  absolutePortion: number   // to depict at webpage for user\n}\n\nexport enum RouteStatus {\n  Success = \"Success\",\n  NoWay = \"NoWay\",\n  Partial = \"Partial\",\n}\n\n/**\n * @export\n * @interface MultiRoute\n */\nexport interface MultiRoute {\n  status: RouteStatus;\n  fromToken: RToken;\n  toToken: RToken;\n  primaryPrice?: number;\n  swapPrice?: number;\n  priceImpact?: number;\n  amountIn: number;\n  amountInBN: BigNumber;\n  amountOut: number;\n  amountOutBN: BigNumber;\n  legs: RouteLeg[];\n  gasSpent: number;\n  totalAmountOut: number;\n  totalAmountOutBN: BigNumber;\n}\n\n/**\n *\n *\n * @export\n * @class Edge\n */\nexport class Edge {\n  pool: RPool;\n  vert0: Vertice;\n  vert1: Vertice;\n\n  canBeUsed: boolean;\n  direction: boolean;\n  amountInPrevious: number;   // How many liquidity were passed from vert0 to vert1\n  amountOutPrevious: number;  // How many liquidity were passed from vert0 to vert1\n  spentGas: number            // How much gas was spent for this edge\n  spentGasNew: number         //  How much gas was will be spent for this edge\n  bestEdgeIncome: number;     // debug data\n\n\n  constructor(p: RPool, v0: Vertice, v1: Vertice) {\n    this.pool = p;\n    this.vert0 = v0;\n    this.vert1 = v1;\n    this.amountInPrevious = 0;\n    this.amountOutPrevious = 0;\n    this.canBeUsed = true;\n    this.direction = true;\n    this.spentGas = 0;\n    this.spentGasNew = 0;\n    this.bestEdgeIncome = 0;\n  }\n\n  cleanTmpData() {\n    this.amountInPrevious = 0;\n    this.amountOutPrevious = 0;\n    this.canBeUsed = true;\n    this.direction = true;\n    this.spentGas = 0;\n    this.spentGasNew = 0;\n    this.bestEdgeIncome = 0;\n  }\n\n  reserve(v: Vertice): BigNumber {\n    return v === this.vert0 ? this.pool.reserve0 : this.pool.reserve1\n  }\n\n  calcOutput(v: Vertice, amountIn: number): {out: number, gasSpent: number} {\n    let res: number;\n    let gas: number;\n    if (v === this.vert1) {\n      if (this.direction) {\n        if (amountIn < this.amountOutPrevious) {\n          const {inp, gasSpent} = this.pool.calcInByOut(this.amountOutPrevious - amountIn, true)\n          res = this.amountInPrevious - inp\n          gas = gasSpent\n        } else {\n          const {out, gasSpent} = this.pool.calcOutByIn(amountIn - this.amountOutPrevious, false)\n          res = out + this.amountInPrevious\n          gas = gasSpent\n        }\n      } else {\n        const {out, gasSpent} = this.pool.calcOutByIn(this.amountOutPrevious + amountIn, false)\n        res = out - this.amountInPrevious;\n        gas = gasSpent\n      }\n    } else {\n      if (this.direction) {\n        const {out, gasSpent} = this.pool.calcOutByIn(this.amountInPrevious + amountIn, true)\n        res = out - this.amountOutPrevious\n        gas = gasSpent\n      } else {\n        if (amountIn < this.amountInPrevious) {\n          const {inp, gasSpent} = this.pool.calcInByOut(this.amountInPrevious - amountIn, false)\n          res = this.amountOutPrevious - inp\n          gas = gasSpent\n        } else {\n          const {out, gasSpent} = this.pool.calcOutByIn(amountIn - this.amountInPrevious, true)\n          res = out + this.amountOutPrevious\n          gas = gasSpent\n        }\n      }\n    }\n\n    // this.testApply(v, amountIn, out);\n\n    return {out: res, gasSpent: gas - this.spentGas};\n  }\n\n  calcInput(v: Vertice, amountOut: number): {inp: number, gasSpent: number}  {\n    let res, gas;\n    if (v === this.vert1) {\n      if (!this.direction) {\n        if (amountOut < this.amountOutPrevious) {\n          const {out, gasSpent}  = this.pool.calcOutByIn(this.amountOutPrevious - amountOut, false)\n          res = this.amountInPrevious - out\n          gas = gasSpent\n        } else {\n          const {inp, gasSpent} = this.pool.calcInByOut(amountOut - this.amountOutPrevious, true)\n          res = inp + this.amountInPrevious\n          gas = gasSpent\n        }\n      } else {\n        const {inp, gasSpent} = this.pool.calcInByOut(this.amountOutPrevious + amountOut, true)\n        res = inp - this.amountInPrevious\n        gas = gasSpent\n      }\n    } else {\n      if (!this.direction) {\n        const {inp, gasSpent} = this.pool.calcInByOut(this.amountInPrevious + amountOut, false)\n        res = inp - this.amountOutPrevious\n        gas = gasSpent\n      } else {\n        if (amountOut < this.amountInPrevious) {\n          const {out, gasSpent} = this.pool.calcOutByIn(this.amountInPrevious - amountOut, true)\n          res = this.amountOutPrevious - out\n          gas = gasSpent\n        } else {\n          const {inp, gasSpent} = this.pool.calcInByOut(amountOut - this.amountInPrevious, false)\n          res = inp + this.amountOutPrevious\n          gas = gasSpent\n        }\n      }\n    }\n\n    // this.testApply(v, amountIn, out);\n\n    return {inp: res, gasSpent: gas - this.spentGas};\n  }\n\n  checkMinimalLiquidityExceededAfterSwap(from: Vertice, amountOut: number): boolean {\n    if (from === this.vert0) {\n      const r1 = parseInt(this.pool.reserve1.toString())\n      if (this.direction) {\n        return r1 - amountOut - this.amountOutPrevious < this.pool.minLiquidity;\n      } else {\n        return r1 - amountOut + this.amountOutPrevious < this.pool.minLiquidity;\n      }\n    } else {\n      const r0 = parseInt(this.pool.reserve0.toString())\n      if (this.direction) {\n        return r0 - amountOut + this.amountInPrevious < this.pool.minLiquidity;\n      } else {\n        return r0 - amountOut - this.amountInPrevious < this.pool.minLiquidity;\n      }\n    }\n  }\n\n  // doesn't used in production - just for testing\n  testApply(from: Vertice, amountIn: number, amountOut: number) {\n    console.assert(this.amountInPrevious * this.amountOutPrevious >= 0)\n    const inPrev = this.direction ? this.amountInPrevious : -this.amountInPrevious\n    const outPrev = this.direction ? this.amountOutPrevious : -this.amountOutPrevious\n    const to = from.getNeibour(this)\n    let directionNew,\n      amountInNew = 0,\n      amountOutNew = 0\n    if (to) {\n      const inInc = from === this.vert0 ? amountIn : -amountOut\n      const outInc = from === this.vert0 ? amountOut : -amountIn\n      const inNew = inPrev + inInc\n      const outNew = outPrev + outInc\n      if (inNew * outNew < 0) console.log('333')\n      console.assert(inNew * outNew >= 0)\n      if (inNew >= 0) {\n        directionNew = true\n        amountInNew = inNew\n        amountOutNew = outNew\n      } else {\n        directionNew = false\n        amountInNew = -inNew\n        amountOutNew = -outNew\n      }\n    } else console.error('Error 221')\n\n    if (directionNew) {\n      const calc = this.pool.calcOutByIn(amountInNew, true).out;\n      const res = closeValues(amountOutNew, calc, 1e-6);\n      if (!res)\n        console.log(\n          \"Err 225-1 !!\",\n          amountOutNew,\n          calc,\n          Math.abs(calc / amountOutNew - 1)\n        );\n      return res;\n    } else {\n      const calc = this.pool.calcOutByIn(amountOutNew, false).out;\n      const res = closeValues(amountInNew, calc, 1e-6);\n      if (!res)\n        console.log(\n          \"Err 225-2!!\",\n          amountInNew,\n          calc,\n          Math.abs(calc / amountInNew - 1)\n        );\n      return res;\n    }\n  }\n\n  applySwap(from: Vertice) {\n    console.assert(this.amountInPrevious * this.amountOutPrevious >= 0)\n    const inPrev = this.direction ? this.amountInPrevious : -this.amountInPrevious\n    const outPrev = this.direction ? this.amountOutPrevious : -this.amountOutPrevious\n    const to = from.getNeibour(this)\n    if (to) {\n      const inInc = from === this.vert0 ? from.bestIncome : -to.bestIncome\n      const outInc = from === this.vert0 ? to.bestIncome : -from.bestIncome\n      const inNew = inPrev + inInc\n      const outNew = outPrev + outInc\n      console.assert(inNew * outNew >= 0)\n      if (inNew >= 0) {\n        this.direction = true\n        this.amountInPrevious = inNew\n        this.amountOutPrevious = outNew\n      } else {\n        this.direction = false\n        this.amountInPrevious = -inNew\n        this.amountOutPrevious = -outNew\n      }\n    } else console.error(\"Error 221\");\n    this.spentGas = this.spentGasNew\n\n    ASSERT(() => {\n      return this.direction ? closeValues(\n        this.amountOutPrevious,\n        this.pool.calcOutByIn(this.amountInPrevious, this.direction).out,\n        1e-6\n      ) : closeValues(\n        this.amountInPrevious,\n        this.pool.calcOutByIn(this.amountOutPrevious, this.direction).out,\n        1e-6\n      );\n    }, `Error 225`)\n  }\n}\n\n\n\nexport class Vertice {\n  token: RToken\n  edges: Edge[]\n\n  price: number\n  gasPrice: number\n\n  bestIncome: number // temp data used for findBestPath algorithm\n  gasSpent: number // temp data used for findBestPath algorithm\n  bestTotal: number // temp data used for findBestPath algorithm\n  bestSource?: Edge // temp data used for findBestPath algorithm\n  checkLine: number // debug data\n\n  constructor(t: RToken) {\n    this.token = t\n    this.edges = []\n    this.price = 0\n    this.gasPrice = 0\n    this.bestIncome = 0\n    this.gasSpent = 0\n    this.bestTotal = 0\n    this.bestSource = undefined\n    this.checkLine = -1\n  }\n\n  cleanTmpData() {\n    this.bestIncome = 0\n    this.gasSpent = 0\n    this.bestTotal = 0\n    this.bestSource = undefined\n    this.checkLine = -1\n  }\n\n  getNeibour(e?: Edge) {\n    if (!e) return\n    return e.vert0 === this ? e.vert1 : e.vert0\n  }\n\n  getOutputEdges(): Edge[] {\n    return this.edges.filter((e) => {\n      if (!e.canBeUsed) return false\n      if (e.amountInPrevious === 0) return false\n      if (e.direction !== (e.vert0 === this)) return false\n      return true\n    })\n  }\n\n  getInputEdges(): Edge[] {\n    return this.edges.filter((e) => {\n      if (!e.canBeUsed) return false\n      if (e.amountInPrevious === 0) return false\n      if (e.direction === (e.vert0 === this)) return false\n      return true\n    })\n  }\n}\n\nexport class Graph {\n  vertices: Vertice[]\n  edges: Edge[]\n  tokens: Map<string, Vertice>\n\n  constructor(pools: RPool[], baseToken: RToken, gasPrice: number) {\n    this.vertices = [];\n    this.edges = [];\n    this.tokens = new Map();\n    pools.forEach((p) => {\n      const v0 = this.getOrCreateVertice(p.token0)\n      const v1 = this.getOrCreateVertice(p.token1)\n      const edge = new Edge(p, v0, v1)\n      v0.edges.push(edge)\n      v1.edges.push(edge)\n      this.edges.push(edge)\n    })\n    const baseVert = this.tokens.get(baseToken.address)\n    if (baseVert) {\n      this.setPricesStable(baseVert, 1, gasPrice)\n    }\n  }\n\n  cleanTmpData() {\n    this.edges.forEach(e => e.cleanTmpData())\n    this.vertices.forEach(v => v.cleanTmpData())\n  }\n\n  // Set prices using greedy algorithm\n  setPricesStable(from: Vertice, price: number, gasPrice: number) {\n    this.vertices.forEach(v => v.price = 0) // initialization\n    from.price = price\n    from.gasPrice = gasPrice\n    \n    const edgeValues = new Map<Edge, number>()\n    const value = (e: Edge): number => edgeValues.get(e) as number\n    \n    function addVertice(v: Vertice) {\n      const newEdges = v.edges.filter(e => v.getNeibour(e)?.price == 0)\n      newEdges.forEach(e => edgeValues.set(e, v.price*parseInt(e.reserve(v).toString())) )\n      newEdges.sort((e1, e2) => value(e1) - value(e2))\n      const res: Edge[] = []\n      while (nextEdges.length && newEdges.length) {\n        if (value(nextEdges[0]) < value(newEdges[0])) res.push(nextEdges.shift() as Edge)  \n        else res.push(newEdges.shift() as Edge)\n      }\n      nextEdges = [...res, ...nextEdges, ...newEdges]\n    }\n    \n    let nextEdges: Edge[] = []\n    addVertice(from)\n    while (nextEdges.length > 0) {\n      const bestEdge = nextEdges.pop() as Edge\n      const [vFrom, vTo] = bestEdge.vert1.price !== 0\n        ? [bestEdge.vert1, bestEdge.vert0] : [bestEdge.vert0, bestEdge.vert1]\n      if (vTo.price !== 0) continue\n      let p = bestEdge.pool.calcCurrentPriceWithoutFee(vFrom === bestEdge.vert1);\n      vTo.price = vFrom.price*p\n      vTo.gasPrice = vFrom.gasPrice/p\n      addVertice(vTo)\n    }\n  }\n\n  // Set prices by search in depth\n  setPrices(from: Vertice, price: number, gasPrice: number) {\n    if (from.price !== 0) return\n    from.price = price\n    from.gasPrice = gasPrice\n    const edges = from.edges\n      .map((e): [Edge, number] => [e, parseInt(e.reserve(from).toString())])\n      .sort(([_1, r1], [_2, r2]) => r2 - r1)\n    edges.forEach(([e, _]) => {\n      const v = e.vert0 === from ? e.vert1 : e.vert0;\n      if (v.price !== 0) return;\n      const p = e.pool.calcCurrentPriceWithoutFee(from === e.vert1);\n      this.setPrices(v, price * p, gasPrice / p);\n    });\n  }\n\n  getOrCreateVertice(token: RToken) {\n    let vert = this.tokens.get(token.address)\n    if (vert) return vert\n    vert = new Vertice(token)\n    this.vertices.push(vert)\n    this.tokens.set(token.address, vert)\n    return vert\n  }\n\n  /*exportPath(from: RToken, to: RToken) {\n\n    const fromVert = this.tokens.get(from) as Vertice\n    const toVert = this.tokens.get(to) as Vertice\n    const initValue = (fromVert.bestIncome * fromVert.price) / toVert.price\n\n    const route = new Set<Edge>()\n    for (let v = toVert; v !== fromVert; v = v.getNeibour(v.bestSource) as Vertice) {\n      if (v.bestSource) route.add(v.bestSource)\n    }\n\n    function edgeStyle(e: Edge) {\n      const finish = e.vert1.bestSource === e\n      const start = e.vert0.bestSource === e\n      let label\n      if (e.bestEdgeIncome === -1) label = 'label: \"low_liq\"'\n      if (e.bestEdgeIncome !== 0) label = `label: \"${print((e.bestEdgeIncome / initValue - 1) * 100, 3)}%\"`\n      const edgeValue = route.has(e) ? 'value: 2' : undefined\n      let arrow\n      if (finish && start) arrow = 'arrows: \"from,to\"'\n      if (finish) arrow = 'arrows: \"to\"'\n      if (start) arrow = 'arrows: \"from\"'\n      return ['', label, edgeValue, arrow].filter((a) => a !== undefined).join(', ')\n    }\n\n    function print(n: number, digits: number) {\n      let out\n      if (n === 0) out = '0'\n      else {\n        const n0 = n > 0 ? n : -n\n        const shift = digits - Math.ceil(Math.log(n0) / Math.LN10)\n        if (shift <= 0) out = `${Math.round(n0)}`\n        else {\n          const mult = Math.pow(10, shift)\n          out = `${Math.round(n0 * mult) / mult}`\n        }\n        if (n < 0) out = -out\n      }\n      return out\n    }\n\n    function nodeLabel(v: Vertice) {\n      const value = (v.bestIncome * v.price) / toVert.price\n      const income = `${print(value, 3)}`\n      const total = `${print(v.bestTotal, 3)}`\n      // const income = `${print((value/initValue-1)*100, 3)}%`\n      // const total = `${print((v.bestTotal/initValue-1)*100, 3)}%`\n      const checkLine = v.checkLine === -1 ? undefined : `${v.checkLine}`\n      return [checkLine, income, total].filter((a) => a !== undefined).join(':')\n    }\n\n    const nodes = `var nodes = new vis.DataSet([\n      ${this.vertices.map((t) => `{ id: ${t.token.name}, label: \"${nodeLabel(t)}\"}`).join(',\\n\\t\\t')}\n    ]);\\n`\n    const edges = `var edges = new vis.DataSet([\n      ${this.edges\n        .map((p) => `{ from: ${p.vert0.token.name}, to: ${p.vert1.token.name}${edgeStyle(p)}}`)\n        .join(',\\n\\t\\t')}\n    ]);\\n`\n    const data = `var data = {\n        nodes: nodes,\n        edges: edges,\n    };\\n`\n\n    // TODO: This should be removed, this pacakge will not be installable on a client while this remains.\n    const fs = require(\"fs\");\n    fs.writeFileSync(\n      \"D:/Info/Notes/GraphVisualization/data.js\",\n      nodes + edges + data\n    );\n  }*/\n\n  findBestPathExactIn(\n    from: RToken,\n    to: RToken,\n    amountIn: number,\n    _gasPrice?: number\n  ):\n    | {\n        path: Edge[]\n        output: number\n        gasSpent: number\n        totalOutput: number\n      }\n    | undefined {\n    const start = this.tokens.get(from.address)\n    const finish = this.tokens.get(to.address)\n    if (!start || !finish) return\n\n    const gasPrice = _gasPrice !== undefined ? _gasPrice : finish.gasPrice\n\n    this.edges.forEach((e) => {\n      e.bestEdgeIncome = 0\n      e.spentGasNew = 0\n    });\n    this.vertices.forEach((v) => {\n      v.bestIncome = 0\n      v.gasSpent = 0\n      v.bestTotal = 0\n      v.bestSource = undefined\n      v.checkLine = -1\n    })\n    start.bestIncome = amountIn\n    start.bestTotal = amountIn\n    const processedVert = new Set<Vertice>()\n    const nextVertList = [start] // TODO: Use sorted Set!\n\n    let debug_info = ``\n    let checkLine = 0\n    for (;;) {\n      let closestVert: Vertice | undefined\n      let closestTotal: number | undefined\n      let closestPosition = 0\n      nextVertList.forEach((v, i) => {\n        if (closestTotal === undefined || v.bestTotal > closestTotal) {\n          closestTotal = v.bestTotal\n          closestVert = v\n          closestPosition = i\n        }\n      })\n\n      if (!closestVert) return\n\n      closestVert.checkLine = checkLine++\n\n      if (closestVert === finish) {\n        const bestPath = []\n        for (let v: Vertice | undefined = finish; v?.bestSource; v = v.getNeibour(v.bestSource)) {\n          bestPath.unshift(v.bestSource)\n        }\n        DEBUG(() => console.log(debug_info)) \n        return {\n          path: bestPath,\n          output: finish.bestIncome,\n          gasSpent: finish.gasSpent,\n          totalOutput: finish.bestTotal,\n        }\n      }\n      nextVertList.splice(closestPosition, 1)\n\n      closestVert.edges.forEach((e) => {\n        const v2 = closestVert === e.vert0 ? e.vert1 : e.vert0\n        if (processedVert.has(v2)) return\n        let newIncome: number;\n        let gas: number;\n        try {\n          const {out, gasSpent} = e.calcOutput(closestVert as Vertice, (closestVert as Vertice).bestIncome)\n          if (!isFinite(out) || !isFinite(gasSpent))   // Math errors protection\n            return\n          newIncome = out\n          gas = gasSpent\n        } catch (e) {\n          // Any arithmetic error or out-of-liquidity\n          return\n        }\n        if (e.checkMinimalLiquidityExceededAfterSwap(closestVert as Vertice, newIncome)) {\n          e.bestEdgeIncome = -1\n          return\n        }\n        const newGasSpent = (closestVert as Vertice).gasSpent + gas\n        const price = v2.price / finish.price\n        const newTotal = newIncome * price - newGasSpent * gasPrice\n\n        console.assert(e.bestEdgeIncome === 0, \"Error 373\");\n        e.bestEdgeIncome = newIncome * price;\n        e.spentGasNew = e.spentGas + gas;\n\n        if (!v2.bestSource) nextVertList.push(v2)\n        if (!v2.bestSource || newTotal > v2.bestTotal) {\n          DEBUG(() => {\n            const st = closestVert?.token == from ? '*' : ''\n            const fn = v2?.token == to ? '*' : ''\n            debug_info += `${st}${closestVert?.token.name}->${v2.token.name}${fn} ${v2.bestIncome} -> ${newIncome}\\n`\n          })\n          v2.bestIncome = newIncome\n          v2.gasSpent = newGasSpent\n          v2.bestTotal = newTotal\n          v2.bestSource = e          \n        }\n      })\n      processedVert.add(closestVert)\n    }\n  }\n\n  findBestPathExactOut(\n    from: RToken,\n    to: RToken,\n    amountOut: number,\n    _gasPrice?: number\n  ):\n    | {\n        path: Edge[]\n        input: number\n        gasSpent: number\n        totalInput: number\n      }\n    | undefined {\n    const start = this.tokens.get(to.address)\n    const finish = this.tokens.get(from.address)\n    if (!start || !finish) return\n\n    const gasPrice = _gasPrice !== undefined ? _gasPrice : finish.gasPrice\n\n    this.edges.forEach((e) => {\n      e.bestEdgeIncome = 0\n      e.spentGasNew = 0\n    });\n    this.vertices.forEach((v) => {\n      v.bestIncome = 0\n      v.gasSpent = 0\n      v.bestTotal = 0\n      v.bestSource = undefined\n      v.checkLine = -1\n    })\n    start.bestIncome = amountOut\n    start.bestTotal = amountOut\n    const processedVert = new Set<Vertice>()\n    const nextVertList = [start] // TODO: Use sorted Set!\n\n    let debug_info = ''\n    let checkLine = 0\n    for (;;) {\n      let closestVert: Vertice | undefined\n      let closestTotal: number | undefined\n      let closestPosition = 0\n      nextVertList.forEach((v, i) => {\n        if (closestTotal === undefined || v.bestTotal < closestTotal) {\n          closestTotal = v.bestTotal\n          closestVert = v\n          closestPosition = i\n        }\n      })\n\n      if (!closestVert) return\n\n      closestVert.checkLine = checkLine++\n\n      if (closestVert === finish) {\n        const bestPath = []\n        for (let v: Vertice | undefined = finish; v?.bestSource; v = v.getNeibour(v.bestSource)) {\n          bestPath.push(v.bestSource)\n        }\n        DEBUG(() => console.log(debug_info))\n        return {\n          path: bestPath,\n          input: finish.bestIncome,\n          gasSpent: finish.gasSpent,\n          totalInput: finish.bestTotal,\n        }\n      }\n      nextVertList.splice(closestPosition, 1)\n\n      closestVert.edges.forEach((e) => {\n        const v2 = closestVert === e.vert0 ? e.vert1 : e.vert0\n        if (processedVert.has(v2)) return\n        let newIncome: number, gas\n        try {\n          const {inp, gasSpent} = e.calcInput(closestVert as Vertice, (closestVert as Vertice).bestIncome)\n          if (!isFinite(inp) || !isFinite(gasSpent))   // Math errors protection\n            return\n          if (inp < 0) return // No enouph liquidity in the pool\n          newIncome = inp\n          gas = gasSpent\n        } catch (e) {\n          // Any arithmetic error or out-of-liquidity\n          return\n        }\n        const newGasSpent = (closestVert as Vertice).gasSpent + gas\n        const price = v2.price / finish.price\n        const newTotal = newIncome * price + newGasSpent * gasPrice\n\n        console.assert(e.bestEdgeIncome === 0, \"Error 373\");\n        e.bestEdgeIncome = newIncome * price;\n        e.spentGasNew = e.spentGas + gas;\n\n        if (!v2.bestSource) nextVertList.push(v2)\n        if (!v2.bestSource || newTotal < v2.bestTotal) {\n          DEBUG(() => {\n            const st = v2?.token == from ? '*' : ''\n            const fn = closestVert?.token == to ? '*' : ''\n            debug_info += `${st}${closestVert?.token.name}<-${v2.token.name}${fn} ${v2.bestIncome} -> ${newIncome}\\n`\n          })\n          v2.bestIncome = newIncome\n          v2.gasSpent = newGasSpent\n          v2.bestTotal = newTotal\n          v2.bestSource = e\n        }\n      })\n      processedVert.add(closestVert)\n    }\n  }\n\n  addPath(from: Vertice | undefined, to: Vertice | undefined, path: Edge[]) {\n    let _from = from\n    path.forEach((e) => {\n      if (_from) {\n        e.applySwap(_from)\n        _from = _from.getNeibour(e)\n      } else {\n        console.error('Unexpected 315')\n      }\n    });\n\n    ASSERT(() => {\n      return this.vertices.every((v) => {\n        let total = 0\n        let totalModule = 0\n        v.edges.forEach((e) => {\n          if (e.vert0 === v) {\n            if (e.direction) {\n              total -= e.amountInPrevious\n            } else {\n              total += e.amountInPrevious\n            }\n            totalModule += e.amountInPrevious\n          } else {\n            if (e.direction) {\n              total += e.amountOutPrevious\n            } else {\n              total -= e.amountOutPrevious\n            }\n            totalModule += e.amountOutPrevious\n          }\n        })\n        if (v === from) return total <= 0\n        if (v === to) return total >= 0\n        if (totalModule === 0) return total === 0\n        return Math.abs(total / totalModule) < 1e10\n      })\n    }, 'Error 290')\n  }\n\n  getPrimaryPriceForPath(from: Vertice, path: Edge[]): number {\n    let p = 1\n    let prevToken = from\n    path.forEach( edge => {\n      const direction = edge.vert0 === prevToken\n      const edgePrice = edge.pool.calcCurrentPriceWithoutFee(direction)\n      p *= edgePrice\n      prevToken = prevToken.getNeibour(edge) as Vertice\n    })\n    return p\n  }\n\n  findBestRouteExactIn(from: RToken, to: RToken, amountIn: number, mode: number | number[]): MultiRoute {\n    let routeValues = [0]\n    if (Array.isArray(mode)) {\n      const sum = mode.reduce((a, b) => a + b, 0)\n      routeValues = mode.map((e) => e / sum)\n    } else {\n      for (let i = 0; i < mode; ++i) routeValues.push(1 / mode)\n    }\n\n    this.edges.forEach((e) => {\n      e.amountInPrevious = 0\n      e.amountOutPrevious = 0\n      e.direction = true\n    })\n    let output = 0\n    let gasSpentInit = 0\n    //let totalOutput = 0\n    let totalrouted = 0\n    let primaryPrice\n    let step\n    for (step = 0; step < routeValues.length; ++step) {\n      const p = this.findBestPathExactIn(from, to, amountIn * routeValues[step])\n      if (!p) {\n        break\n      } else {\n        output += p.output\n        gasSpentInit += p.gasSpent\n        //totalOutput += p.totalOutput\n        this.addPath(this.tokens.get(from.address), this.tokens.get(to.address), p.path)\n        totalrouted += routeValues[step]\n        if (step === 0) {\n          primaryPrice = this.getPrimaryPriceForPath(this.tokens.get(from.address) as Vertice, p.path)\n        }\n      }\n    }\n    if (step == 0)\n      return {\n        status: RouteStatus.NoWay,\n        fromToken: from,\n        toToken: to,\n        amountIn: 0,\n        amountInBN: BigNumber.from(0),\n        amountOut: 0,\n        amountOutBN: BigNumber.from(0),\n        legs: [],\n        gasSpent: 0,\n        totalAmountOut: 0,\n        totalAmountOutBN: BigNumber.from(0),\n      }\n    let status\n    if (step < routeValues.length) status = RouteStatus.Partial\n    else status = RouteStatus.Success\n\n    const fromVert = this.tokens.get(from.address) as Vertice\n    const toVert = this.tokens.get(to.address) as Vertice\n    const {legs, gasSpent, topologyWasChanged} = this.getRouteLegs(fromVert, toVert)\n    console.assert(gasSpent <= gasSpentInit, 'Internal Error 491')\n\n    if (topologyWasChanged) {\n      output = this.calcLegsAmountOut(legs, amountIn)\n    }\n\n    let swapPrice, priceImpact\n    try {\n      swapPrice = output/amountIn\n      priceImpact = primaryPrice !== undefined? 1- swapPrice/primaryPrice : undefined\n    } catch(e) { /* skip division by 0 errors*/}\n\n    return {\n      status,\n      fromToken: from,\n      toToken: to,\n      primaryPrice,\n      swapPrice,\n      priceImpact,\n      amountIn: amountIn * totalrouted,\n      amountInBN: getBigNumber(amountIn * totalrouted),\n      amountOut: output,\n      amountOutBN: getBigNumber(output),\n      legs,\n      gasSpent,\n      totalAmountOut: output - gasSpent * toVert.gasPrice,\n      totalAmountOutBN: getBigNumber(output - gasSpent * toVert.gasPrice),\n    }\n  }\n\n  findBestRouteExactOut(from: RToken, to: RToken, amountOut: number, mode: number | number[]): MultiRoute {\n    let routeValues = Array<number>()\n    if (Array.isArray(mode)) {\n      const sum = mode.reduce((a, b) => a + b, 0)\n      routeValues = mode.map((e) => e / sum)\n    } else {\n      for (let i = 0; i < mode; ++i) routeValues.push(1 / mode)\n    }\n\n    this.edges.forEach((e) => {\n      e.amountInPrevious = 0\n      e.amountOutPrevious = 0\n      e.direction = true\n    })\n    let input = 0\n    let gasSpentInit = 0\n    //let totalOutput = 0\n    let totalrouted = 0\n    let primaryPrice\n    let step\n    for (step = 0; step < routeValues.length; ++step) {\n      const p = this.findBestPathExactOut(from, to, amountOut * routeValues[step])\n      if (!p) {\n        break\n      } else {\n        input += p.input\n        gasSpentInit += p.gasSpent\n        //totalOutput += p.totalOutput\n        this.addPath(this.tokens.get(from.address), this.tokens.get(to.address), p.path)\n        totalrouted += routeValues[step]\n        if (step === 0) {\n          primaryPrice = this.getPrimaryPriceForPath(this.tokens.get(from.address) as Vertice, p.path)\n        }\n      }\n    }\n    if (step == 0)\n      return {\n        status: RouteStatus.NoWay,\n        fromToken: from,\n        toToken: to,\n        amountIn: 0,\n        amountInBN: BigNumber.from(0),\n        amountOut: 0,\n        amountOutBN: BigNumber.from(0),\n        legs: [],\n        gasSpent: 0,\n        totalAmountOut: 0,\n        totalAmountOutBN: BigNumber.from(0),\n      }\n    let status\n    if (step < routeValues.length) status = RouteStatus.Partial\n    else status = RouteStatus.Success\n\n    const fromVert = this.tokens.get(from.address) as Vertice\n    const toVert = this.tokens.get(to.address) as Vertice\n    const {legs, gasSpent, topologyWasChanged} = this.getRouteLegs(fromVert, toVert)\n    console.assert(gasSpent <= gasSpentInit, 'Internal Error 491')\n\n    if (topologyWasChanged) {\n      input = this.calcLegsAmountIn(legs, amountOut) ///\n    }\n\n    let swapPrice, priceImpact\n    try {\n      swapPrice = amountOut/input\n      priceImpact = primaryPrice !== undefined? 1- swapPrice/primaryPrice : undefined\n    } catch(e) { /* skip division by 0 errors*/}\n\n    return {\n      status,\n      fromToken: from,\n      toToken: to,\n      primaryPrice,\n      swapPrice,\n      priceImpact,\n      amountIn: input,\n      amountInBN: getBigNumber(input),\n      amountOut: amountOut * totalrouted,\n      amountOutBN: getBigNumber(amountOut * totalrouted),\n      legs,\n      gasSpent,\n      totalAmountOut: amountOut - gasSpent * toVert.gasPrice,\n      totalAmountOutBN: getBigNumber(amountOut - gasSpent * toVert.gasPrice),\n    }\n  }\n\n  getRouteLegs(from: Vertice, to: Vertice): {\n    legs: RouteLeg[],\n    gasSpent: number,\n    topologyWasChanged: boolean\n  } {\n    const {vertices, topologyWasChanged} = this.cleanTopology(from, to)\n    const legs: RouteLeg[] = []\n    let gasSpent = 0\n    vertices.forEach((n) => {\n      const outEdges = n.getOutputEdges().map((e) => {\n        const from = this.edgeFrom(e)\n        return from ? [e, from.vert, from.amount] : [e]\n      })\n\n      let outAmount = outEdges.reduce((a, b) => a + (b[2] as number), 0)\n      if (outAmount <= 0) return\n\n      const total = outAmount\n      outEdges.forEach((e, i) => {\n        const p = e[2] as number\n        const quantity = i + 1 === outEdges.length ? 1 : p / outAmount\n        const edge = e[0] as Edge\n        legs.push({\n          poolAddress: edge.pool.address,\n          poolFee: edge.pool.fee,\n          tokenFrom: n.token,\n          tokenTo: (n.getNeibour(edge) as Vertice).token,\n          assumedAmountIn: edge.direction ? edge.amountInPrevious : edge.amountOutPrevious,\n          assumedAmountOut:  edge.direction ? edge.amountOutPrevious : edge.amountInPrevious,\n          swapPortion: quantity,\n          absolutePortion: p / total,\n        })\n        gasSpent += (e[0] as Edge).pool.swapGasCost\n        outAmount -= p\n      })\n      console.assert(outAmount / total < 1e-12, 'Error 281')\n    })\n    return {legs, gasSpent, topologyWasChanged}\n  }\n\n  edgeFrom(e: Edge): {vert: Vertice, amount: number} | undefined {\n    if (e.amountInPrevious === 0) return undefined\n    return e.direction ? {vert: e.vert0, amount: e.amountInPrevious} : {vert: e.vert1, amount: e.amountOutPrevious}\n  }\n\n  // TODO: make full test coverage!\n  calcLegsAmountOut(legs: RouteLeg[], amountIn: number) {\n    const amounts = new Map<string, number>()\n    amounts.set(legs[0].tokenFrom.address, amountIn)\n    legs.forEach((l) => {\n      const vert = this.tokens.get(l.tokenFrom.address);\n      console.assert(vert !== undefined, \"Internal Error 570\");\n      const edge = (vert as Vertice).edges.find(\n        (e) => e.pool.address === l.poolAddress\n      );\n      console.assert(edge !== undefined, \"Internel Error 569\");\n      const pool = (edge as Edge).pool;\n      const direction = vert === (edge as Edge).vert0;\n\n      const inputTotal = amounts.get(l.tokenFrom.address);\n      console.assert(inputTotal !== undefined, \"Internal Error 564\");\n      const input = (inputTotal as number) * l.swapPortion;\n      amounts.set(l.tokenFrom.address, (inputTotal as number) - input);\n      const output = pool.calcOutByIn(input, direction).out;\n\n      const vertNext = (vert as Vertice).getNeibour(edge) as Vertice;\n      const prevAmount = amounts.get(vertNext.token.address);\n      amounts.set(vertNext.token.address, (prevAmount || 0) + output);\n    });\n    return amounts.get(legs[legs.length-1].tokenTo.address) || 0;\n  }\n\n  // TODO: make full test coverage!\n  calcLegsAmountIn(legs: RouteLeg[], amountOut: number) {\n    const totalOutputAssumed = new Map<string, number>()\n    legs.forEach(l => {\n      const prevValue = totalOutputAssumed.get(l.tokenFrom.address) || 0\n      totalOutputAssumed.set(l.tokenFrom.address, prevValue + l.assumedAmountOut)\n    })\n\n    const amounts = new Map<string, number>()\n    amounts.set(legs[legs.length-1].tokenTo.address, amountOut)\n    for (let i = legs.length - 1; i >= 0; --i) {\n      const l = legs[i]\n      const vert = this.tokens.get(l.tokenTo.address);\n      console.assert(vert !== undefined, \"Internal Error 884\");\n      const edge = (vert as Vertice).edges.find(\n        (e) => e.pool.address === l.poolAddress\n      );\n      console.assert(edge !== undefined, \"Internel Error 888\");\n      const pool = (edge as Edge).pool;\n      const direction = vert === (edge as Edge).vert1;\n\n      const outputTotal = amounts.get(l.tokenTo.address);\n      console.assert(outputTotal !== undefined, \"Internal Error 893\");\n      const totalAssumed = totalOutputAssumed.get(l.tokenFrom.address)\n      console.assert(totalAssumed !== undefined, \"Internal Error 903\");\n      const output = (outputTotal as number) * l.assumedAmountOut / (totalAssumed as number);\n      const input = pool.calcInByOut(output, direction).inp;\n\n      const vertNext = (vert as Vertice).getNeibour(edge) as Vertice;\n      const prevAmount = amounts.get(vertNext.token.address);\n      amounts.set(vertNext.token.address, (prevAmount || 0) + input);\n    };\n    return amounts.get(legs[0].tokenFrom.address) || 0;\n  }\n\n  // removes all cycles if there are any, then removes all dead end could appear after cycle removing\n  // Returns clean result topologically sorted\n  cleanTopology(from: Vertice, to: Vertice): {vertices: Vertice[], topologyWasChanged: boolean} {\n    let topologyWasChanged = false\n    let result = this.topologySort(from, to)\n    if (result.status !== 2) {\n      topologyWasChanged = true\n      console.assert(result.status === 0, 'Internal Error 554')\n      while (result.status === 0) {\n        this.removeWeakestEdge(result.vertices)\n        result = this.topologySort(from, to)\n      }\n      if (result.status === 3) {\n        this.removeDeadEnds(result.vertices)\n        result = this.topologySort(from, to)\n      }\n      console.assert(result.status === 2, 'Internal Error 563')\n      if (result.status !== 2) return {vertices: [], topologyWasChanged}\n    }\n    return {vertices: result.vertices, topologyWasChanged}\n  }\n\n  removeDeadEnds(verts: Vertice[]) {\n    verts.forEach((v) => {\n      v.getInputEdges().forEach((e) => {\n        e.canBeUsed = false\n      })\n    })\n  }\n\n  removeWeakestEdge(verts: Vertice[]) {\n    let minVert: Vertice;\n    let minVertNext: Vertice;\n    let minOutput = Number.MAX_VALUE\n    verts.forEach((v1, i) => {\n      const v2 = i === 0 ? verts[verts.length - 1] : verts[i - 1]\n      let out = 0\n      v1.getOutputEdges().forEach((e) => {\n        if (v1.getNeibour(e) !== v2) return\n        out += e.direction ? e.amountOutPrevious : e.amountInPrevious\n      })\n      if (out < minOutput) {\n        minVert = v1\n        minVertNext = v2\n        minOutput = out\n      }\n    })\n    minVert.getOutputEdges().forEach((e) => {\n      if (minVert.getNeibour(e) !== minVertNext) return\n      e.canBeUsed = false\n    })\n  }\n\n  // topological sort\n  // if there is a cycle - returns [0, <List of envolved vertices in the cycle>]\n  // if there are no cycles but deadends- returns [3, <List of all envolved deadend vertices>]\n  // if there are no cycles or deadends- returns [2, <List of all envolved vertices topologically sorted>]\n  topologySort(from: Vertice, to: Vertice): {status: number, vertices: Vertice[]} {\n    // undefined or 0 - not processed, 1 - in process, 2 - finished, 3 - dedend\n    const vertState = new Map<Vertice, number>()\n    const vertsFinished: Vertice[] = []\n    const foundCycle: Vertice[] = []\n    const foundDeadEndVerts: Vertice[] = []\n\n    // 0 - cycle was found and created, return\n    // 1 - during cycle creating\n    // 2 - vertex is processed ok\n    // 3 - dead end vertex\n    function topSortRecursive(current: Vertice): number {\n      const state = vertState.get(current)\n      if (state === 2 || state === 3) return state\n      if (state === 1) {\n        console.assert(foundCycle.length == 0, 'Internal Error 566')\n        foundCycle.push(current)\n        return 1\n      }\n      vertState.set(current, 1)\n\n      let successors2Exist = false\n      const outEdges = current.getOutputEdges()\n      for (let i = 0; i < outEdges.length; ++i) {\n        const e = outEdges[i]\n        const res = topSortRecursive(current.getNeibour(e) as Vertice)\n        if (res === 0) return 0\n        if (res === 1) {\n          if (foundCycle[0] === current) return 0\n          else {\n            foundCycle.push(current)\n            return 1\n          }\n        }\n        if (res === 2) successors2Exist = true // Ok successors\n      }\n      if (successors2Exist) {\n        console.assert(current !== to, 'Internal Error 589')\n        vertsFinished.push(current)\n        vertState.set(current, 2)\n        return 2\n      } else {\n        if (current !== to) {\n          foundDeadEndVerts.push(current)\n          vertState.set(current, 3)\n          return 3\n        }\n        vertsFinished.push(current)\n        vertState.set(current, 2)\n        return 2\n      }\n    }\n\n    const res = topSortRecursive(from)\n    if (res === 0) return {status: 0, vertices: foundCycle}\n    if (foundDeadEndVerts.length) return {status: 3, vertices: foundDeadEndVerts}\n    ASSERT(() => {\n      if (vertsFinished[0] !== to) return false\n      if (vertsFinished[vertsFinished.length - 1] !== from) return false\n      return true\n    }, 'Internal Error 614')\n    if (res === 2) return {status: 2, vertices: vertsFinished.reverse()}\n    console.assert(true, 'Internal Error 612')\n    return {status: 1, vertices: []}\n  }\n}","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { Graph, RouteStatus } from \"./Graph\";\nimport type { MultiRoute } from \"./Graph\";\nimport { RPool } from \"./PrimaryPools\";  \nimport type { RToken } from \"./PrimaryPools\";\n\n// Assumes route is a single path\nfunction calcPriceImactWithoutFee(route: MultiRoute) {\n  if (route.primaryPrice === undefined || route.swapPrice === undefined) {\n    return undefined\n  } else {\n    let oneMinusCombinedFee = 1\n    route.legs.forEach(l => oneMinusCombinedFee *= (1-l.poolFee))\n    //const combinedFee = 1-oneMinusCombinedFee\n    return Math.max(0, 1-route.swapPrice/route.primaryPrice/oneMinusCombinedFee)\n  }\n}\n\nconst defaultFlowNumber = 12\nconst maxFlowNumber = 100\nfunction calcBestFlowNumber(bestSingleRoute: MultiRoute, amountIn: number, gasPriceIn?: number): number {\n  const priceImpact = calcPriceImactWithoutFee(bestSingleRoute)\n  if (!priceImpact) return defaultFlowNumber\n\n  const bestFlowAmount = Math.sqrt(bestSingleRoute.gasSpent*(gasPriceIn || 0)*amountIn/priceImpact)\n  const bestFlowNumber = Math.round(amountIn/bestFlowAmount)\n  if (!isFinite(bestFlowNumber)) return maxFlowNumber\n\n  const realFlowNumber = Math.max(1, Math.min(bestFlowNumber, maxFlowNumber))\n  return realFlowNumber\n}\n\nfunction getBetterRouteExactIn(route1: MultiRoute, route2: MultiRoute): MultiRoute {\n  if (route1.status == RouteStatus.NoWay) return route2\n  if (route2.status == RouteStatus.NoWay) return route1\n  if (route1.status == RouteStatus.Partial && route2.status == RouteStatus.Success) return route2\n  if (route2.status == RouteStatus.Partial && route1.status == RouteStatus.Success) return route1\n  return route1.totalAmountOut > route2.totalAmountOut ? route1 : route2\n}\n\nexport function findMultiRouteExactIn(\n  from: RToken,\n  to: RToken,\n  amountIn: BigNumber | number,\n  pools: RPool[],\n  baseToken: RToken,\n  gasPrice: number,\n  flows?: number | number[]\n): MultiRoute {\n  if (amountIn instanceof BigNumber) {\n    amountIn = parseInt(amountIn.toString())\n  }\n\n  const g = new Graph(pools, baseToken, gasPrice)\n  const fromV = g.tokens.get(from.address)\n  if (fromV?.price === 0) {\n    g.setPricesStable(fromV, 1, 0)\n  }\n\n  if (flows !== undefined) return g.findBestRouteExactIn(from, to, amountIn, flows)\n\n  const outSingle = g.findBestRouteExactIn(from, to, amountIn, 1)\n  // Possible optimization of timing\n  // if (g.findBestPathExactIn(from, to, amountIn/100 + 10_000, 0)?.gasSpent === 0) return outSingle\n  g.cleanTmpData()\n\n  const bestFlowNumber = calcBestFlowNumber(outSingle, amountIn, fromV?.gasPrice)\n  if (bestFlowNumber === 1) return outSingle\n\n  const outMulti = g.findBestRouteExactIn(from, to, amountIn, bestFlowNumber)\n  return getBetterRouteExactIn(outSingle, outMulti)\n}\n\nfunction getBetterRouteExactOut(route1: MultiRoute, route2: MultiRoute, gasPrice: number): MultiRoute {\n  if (route1.status == RouteStatus.NoWay) return route2\n  if (route2.status == RouteStatus.NoWay) return route1\n  if (route1.status == RouteStatus.Partial && route2.status == RouteStatus.Success) return route2\n  if (route2.status == RouteStatus.Partial && route1.status == RouteStatus.Success) return route1\n  const totalAmountIn1 = route1.amountIn + route1.gasSpent*gasPrice\n  const totalAmountIn2 = route2.amountIn + route2.gasSpent*gasPrice\n  return totalAmountIn1 < totalAmountIn2 ? route1 : route2\n}\n\nexport function findMultiRouteExactOut(\n  from: RToken,\n  to: RToken,\n  amountOut: BigNumber | number,\n  pools: RPool[],\n  baseToken: RToken,\n  gasPrice: number,\n  flows?: number | number[]\n): MultiRoute {\n  if (amountOut instanceof BigNumber) {\n    amountOut = parseInt(amountOut.toString())\n  }\n\n  const g = new Graph(pools, baseToken, gasPrice)\n  const fromV = g.tokens.get(from.address)\n  if (fromV?.price === 0) {\n    g.setPricesStable(fromV, 1, 0)\n  }\n\n  if (flows !== undefined) return g.findBestRouteExactOut(from, to, amountOut, flows)\n\n  const inSingle = g.findBestRouteExactOut(from, to, amountOut, 1)\n  // Possible optimization of timing\n  // if (g.findBestPathExactOut(from, to, amountOut/100 + 10_000, 0)?.gasSpent === 0) return inSingle\n  g.cleanTmpData()\n\n  const bestFlowNumber = calcBestFlowNumber(inSingle, inSingle.amountIn, fromV?.gasPrice)\n  if (bestFlowNumber === 1) return inSingle\n\n  const inMulti = g.findBestRouteExactOut(from, to, amountOut, bestFlowNumber)\n  return getBetterRouteExactOut(inSingle, inMulti, gasPrice)\n}\n\nexport function findSingleRouteExactIn(\n  from: RToken,\n  to: RToken,\n  amountIn: BigNumber | number,\n  pools: RPool[],\n  baseToken: RToken,\n  gasPrice: number\n): MultiRoute {\n  const g = new Graph(pools, baseToken, gasPrice)\n  const fromV = g.tokens.get(from.address)\n  if (fromV?.price === 0) {\n    g.setPricesStable(fromV, 1, 0)\n  }\n\n  if (amountIn instanceof BigNumber) {\n    amountIn = parseInt(amountIn.toString())\n  }\n\n  const out = g.findBestRouteExactIn(from, to, amountIn, 1)\n  return out\n}\n\nexport function findSingleRouteExactOut(\n  from: RToken,\n  to: RToken,\n  amountOut: BigNumber | number,\n  pools: RPool[],\n  baseToken: RToken,\n  gasPrice: number\n): MultiRoute {\n  const g = new Graph(pools, baseToken, gasPrice)\n  const fromV = g.tokens.get(from.address)\n  if (fromV?.price === 0) {\n    g.setPricesStable(fromV, 1, 0)\n  }\n\n  if (amountOut instanceof BigNumber) {\n    amountOut = parseInt(amountOut.toString())\n  }\n\n  const out = g.findBestRouteExactOut(from, to, amountOut, 1)\n  return out\n}\n\nexport function calcTokenPrices(pools: RPool[], baseToken: RToken): Map<RToken, number> {\n  const g = new Graph(pools, baseToken, 0)\n  const res = new Map<RToken, number>()\n  g.vertices.forEach(v => res.set(v.token, v.price))\n  return res\n}","import { BigNumber } from '@ethersproject/bignumber'\n\ninterface RToken {\n  name: string\n  address: string\n}\n\nexport enum PoolType {\n  ConstantProduct = 'ConstantProduct',\n  Weighted = 'Weighted',\n  Hybrid = 'Hybrid',\n  ConcentratedLiquidity = 'ConcentratedLiquidity',\n}\n\nexport interface PoolInfo {\n  address: string\n  token0: RToken\n  token1: RToken\n  type: PoolType\n  reserve0: BigNumber\n  reserve1: BigNumber\n  fee: number\n  minLiquidity: number\n  swapGasCost: number\n}\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\ntype PoolInfoWithDefaults = PartialBy<PoolInfo, 'minLiquidity' | 'swapGasCost'>\n\nexport class Pool {\n  address: string\n  token0: RToken\n  token1: RToken\n  type: PoolType\n  reserve0: BigNumber\n  reserve1: BigNumber\n  fee: number\n  minLiquidity: number\n  swapGasCost: number\n\n  constructor(_info: PoolInfoWithDefaults) {\n    const info = {\n      minLiquidity: 1000,\n      swapGasCost: 40_000,\n      ..._info,\n    }\n    this.address = info.address\n    this.token0 = info.token0\n    this.token1 = info.token1\n    this.type = info.type\n    this.reserve0 = info.reserve0\n    this.reserve1 = info.reserve1\n    this.fee = info.fee\n    this.minLiquidity = info.minLiquidity\n    this.swapGasCost = info.swapGasCost\n  }\n}\n\ntype PoolInfoNoType = Omit<PoolInfoWithDefaults, 'type'>\n\nexport class RConstantProductPool extends Pool {\n  constructor(info: PoolInfoNoType) {\n    super({\n      type: PoolType.ConstantProduct,\n      ...info,\n    })\n  }\n}\n\ntype HybridPoolInfo = PoolInfoNoType & { A: number }\n\nexport class RHybridPool extends Pool {\n  A: number\n  constructor(info: HybridPoolInfo) {\n    super({\n      type: PoolType.Hybrid,\n      ...info,\n    })\n    this.A = info.A\n  }\n}\n\ntype WeightedPoolInfo = PoolInfoNoType & { weight0: number; weight1: number }\n\nexport class RWeightedPool extends Pool {\n  weight0: number\n  weight1: number\n  constructor(info: WeightedPoolInfo) {\n    super({\n      type: PoolType.Weighted,\n      ...info,\n    })\n    this.weight0 = info.weight0\n    this.weight1 = info.weight1\n  }\n}\n\ninterface CLTick {\n  index: number\n  DLiquidity: number\n}\n\ninterface CLSpecific {\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n}\n\ntype CLPoolInfo = Omit<PoolInfoNoType, 'reserve0' | 'reserve1'> & CLSpecific\n\nexport class RConcentratedLiquidityPool extends Pool {\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n  constructor(info: CLPoolInfo) {\n    super({\n      type: PoolType.ConcentratedLiquidity,\n      reserve0: BigNumber.from(0),\n      reserve1: BigNumber.from(0),\n      ...info,\n    })\n    this.liquidity = info.liquidity\n    this.sqrtPrice = info.sqrtPrice\n    this.nearestTick = info.nearestTick\n    this.ticks = info.ticks\n  }\n}\n\n","import {\n  Pool,\n  PoolType,\n  RHybridPool,\n  RWeightedPool,\n} from './MultiRouterTypes'\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { getBigNumber, revertPositive } from \"../Utils\";\n\nconst A_PRECISION = 100\n\nconst DCacheBN = new Map<Pool, BigNumber>()\nexport function HybridComputeLiquidity(pool: RHybridPool): BigNumber {\n  const res = DCacheBN.get(pool)\n  if (res !== undefined) return res\n\n  const r0 = pool.reserve0\n  const r1 = pool.reserve1\n\n  if (r0.isZero() && r1.isZero()) {\n    DCacheBN.set(pool, BigNumber.from(0))\n    return BigNumber.from(0)\n  }\n  const s = r0.add(r1)\n\n  const nA = BigNumber.from(pool.A * 2)\n\n  let prevD\n\n  let D = s\n  for (let i = 0; i < 256; i++) {\n    const dP = D.mul(D).div(r0).mul(D).div(r1).div(4)\n    prevD = D\n    D = nA\n      .mul(s)\n      .div(A_PRECISION)\n      .add(dP.mul(2))\n      .mul(D)\n      .div(nA.div(A_PRECISION).sub(1).mul(D).add(dP.mul(3)))\n    if (D.sub(prevD).abs().lte(1)) {\n      break\n    }\n  }\n  DCacheBN.set(pool, D)\n  return D\n}\n\nexport function HybridgetY(pool: RHybridPool, x: BigNumber): BigNumber {\n  const D = HybridComputeLiquidity(pool)\n\n  const nA = pool.A * 2\n\n  let c = D.mul(D)\n    .div(x.mul(2))\n    .mul(D)\n    .div((nA * 2) / A_PRECISION)\n  let b = D.mul(A_PRECISION).div(nA).add(x)\n\n  let yPrev\n  let y = D\n  for (let i = 0; i < 256; i++) {\n    yPrev = y\n\n    y = y.mul(y).add(c).div(y.mul(2).add(b).sub(D))\n    if (y.sub(yPrev).abs().lte(1)) {\n      break\n    }\n  }\n  return y\n}\n\nexport function calcOutByIn(pool: Pool, amountIn: number, direction = true): number {\n  const xBN = direction ? pool.reserve0 : pool.reserve1\n  const yBN = direction ? pool.reserve1 : pool.reserve0\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      return (y * amountIn) / (x / (1 - pool.fee) + amountIn)\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      const wPool = pool as RWeightedPool\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\n      const actualIn = amountIn * (1 - pool.fee)\n      const out = y * (1 - Math.pow(x / (x + actualIn), weightRatio))\n      return out\n    }\n    case PoolType.Hybrid: {\n      // const xNew = x + amountIn*(1-pool.fee);\n      // const yNew = HybridgetY(pool, xNew);\n      // const dy = y - yNew;\n\n      const xNewBN = xBN.add(getBigNumber(amountIn * (1 - pool.fee)))\n      const yNewBN = HybridgetY(pool as RHybridPool, xNewBN)\n      const dy = parseInt(yBN.sub(yNewBN).toString())\n\n      return dy\n    }\n  }\n  return -1\n}\n\nexport class OutOfLiquidity extends Error {}\n\n\nexport function calcInByOut(pool: Pool, amountOut: number, direction: boolean): number {\n  let input = 0\n  const xBN = direction ? pool.reserve0 : pool.reserve1\n  const yBN = direction ? pool.reserve1 : pool.reserve0\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      input = (x * amountOut) / (1 - pool.fee) / (y - amountOut)\n      break\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      const wPool = pool as RWeightedPool\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\n      input = x * (1 - pool.fee) * (Math.pow(1 - amountOut / y, -weightRatio) - 1)\n      break\n    }\n    case PoolType.Hybrid: {\n      let yNewBN = yBN.sub(getBigNumber(amountOut))\n      if (yNewBN.lt(1))\n        // lack of precision\n        yNewBN = BigNumber.from(1)\n\n      const xNewBN = HybridgetY(pool as RHybridPool, yNewBN)\n      input = Math.round(parseInt(xNewBN.sub(xBN).toString()) / (1 - pool.fee))\n\n      // const yNew = y - amountOut;\n      // const xNew = HybridgetY(pool, yNew);\n      // input = (xNew - x)/(1-pool.fee);\n      break\n    }\n    default:\n      console.error('Unknown pool type')\n  }\n\n  // ASSERT(() => {\n  //   const amount2 = calcOutByIn(pool, input, direction);\n  //   const res = closeValues(amountOut, amount2, 1e-6);\n  //   if (!res) console.log(\"Error 138:\", amountOut, amount2, Math.abs(amountOut/amount2 - 1));\n  //   return res;\n  // });\n  if (input < 1) input = 1\n  return input\n}\n\nexport function calcPrice(pool: Pool, amountIn: number, takeFeeIntoAccount = true): number {\n  const r0 = parseInt(pool.reserve0.toString())\n  const r1 = parseInt(pool.reserve1.toString())\n  const oneMinusFee = takeFeeIntoAccount ? 1 - pool.fee : 1\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = r0 / oneMinusFee\n      return (r1 * x) / (x + amountIn) / (x + amountIn)\n    }\n    case PoolType.Weighted: {\n      const wPool = pool as RWeightedPool\n      const weightRatio = wPool.weight0 / wPool.weight1\n      const x = r0 + amountIn * oneMinusFee\n      return (r1 * weightRatio * oneMinusFee * Math.pow(r0 / x, weightRatio)) / x\n    }\n    case PoolType.Hybrid: {\n      const hPool = pool as RHybridPool\n      const D = parseInt(HybridComputeLiquidity(hPool).toString())\n      const A = hPool.A / A_PRECISION\n      const x = r0 + amountIn\n      const b = 4 * A * x + D - 4 * A * D\n      const ac4 = (D * D * D) / x\n      const Ds = Math.sqrt(b * b + 4 * A * ac4)\n      const res = (0.5 - (2 * b - ac4 / x) / Ds / 4) * oneMinusFee\n      return res\n    }\n  }\n  return 0\n}\n\nfunction calcInputByPriceConstantMean(pool: RWeightedPool, price: number) {\n  const r0 = parseInt(pool.reserve0.toString())\n  const r1 = parseInt(pool.reserve1.toString())\n  const weightRatio = pool.weight0 / pool.weight1\n  const t = r1 * price * weightRatio * (1 - pool.fee) * Math.pow(r0, weightRatio)\n  return (Math.pow(t, 1 / (weightRatio + 1)) - r0) / (1 - pool.fee)\n}\n\nexport function calcInputByPrice(pool: Pool, priceEffective: number, hint = 1): number {\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const r0 = parseInt(pool.reserve0.toString())\n      const r1 = parseInt(pool.reserve1.toString())\n      const x = r0 / (1 - pool.fee)\n      const res = Math.sqrt(r1 * x * priceEffective) - x\n      return res\n    }\n    case PoolType.Weighted: {\n      const res = calcInputByPriceConstantMean(pool as RWeightedPool, priceEffective)\n      return res\n    }\n    case PoolType.Hybrid: {\n      return revertPositive((x: number) => 1 / calcPrice(pool, x), priceEffective, hint)\n    }\n  }\n  return 0\n}\n"],"names":[],"mappings":";;;AAIA,IAAI,OAAO,GAAG,KAAK,CAAC;AACb,MAAM,YAAY,GAAG,MAAM;AAClC,EAAE,IAAI,OAAO,EAAE;AACf,IAAI,OAAO;AACX,GAAG;AACH,EAAE,MAAM,GAAG,GAAG,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC;AAC7C,EAAE,UAAU,CAAC,SAAS,CAAC,SAAS,GAAG,SAAS,GAAG,IAAI,EAAE;AAErD,IAAI,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;AACzC,IAAI,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC;AACnC,IAAI,IAAI,CAAC,WAAW,GAAG,CAAC,GAAG,SAAS,KAAK;AAEzC,MAAM,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC,CAAC;AACrC,MAAM,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC1C,KAAK,CAAC;AACN,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG,CAAC;AACJ,EAAE,OAAO,GAAG,IAAI,CAAC;AACjB,CAAC;;ACpBa,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE;AACjC,SAAS,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE;AAC7B,EAAE,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AAC1D,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC;AACD,IAAI,UAAU,GAAG,KAAK,CAAC;AAChB,SAAS,KAAK,CAAC,CAAC,EAAE;AACzB,EAAE,IAAI,UAAU;AAChB,IAAI,CAAC,EAAE,CAAC;AACR,CAAC;AACM,SAAS,aAAa,CAAC,EAAE,EAAE;AAClC,EAAE,UAAU,GAAG,EAAE,CAAC;AAClB,CAAC;AACD,IAAI,gBAAgB,GAAG,KAAK,CAAC;AACtB,SAAS,WAAW,GAAG;AAC9B,EAAE,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AACM,SAAS,kBAAkB,GAAG;AACrC,EAAE,gBAAgB,GAAG,KAAK,CAAC;AAC3B,CAAC;AACM,SAAS,eAAe,GAAG;AAClC,EAAE,gBAAgB,GAAG,IAAI,CAAC;AAC1B,EAAE,YAAY,EAAE,CAAC;AACjB,CAAC;AACM,SAAS,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE;AAC5C,EAAE,IAAI,QAAQ,KAAK,CAAC;AACpB,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC;AACnB,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,QAAQ;AACtB,IAAI,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;AACjC,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC;AACxC,CAAC;AACM,SAAS,kBAAkB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;AAC5C,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAC9B,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,0BAA0B,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE,EAAE,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC7B,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AACtD,CAAC;AACM,SAAS,cAAc,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,GAAG,CAAC,EAAE;AACjD,EAAE,IAAI;AACN,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACnB,MAAM,OAAO,CAAC,CAAC;AACf,IAAI,IAAI,GAAG,CAAC;AACZ,IAAI,IAAI,GAAG,CAAC;AACZ,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,EAAE;AACvB,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,CAAC;AACrB,MAAM,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG;AACzB,QAAQ,GAAG,IAAI,CAAC,CAAC;AACjB,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AACpB,KAAK,MAAM;AACX,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,CAAC;AACrB,MAAM,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG;AACzB,QAAQ,GAAG,IAAI,CAAC,CAAC;AACjB,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AACpB,KAAK;AACL,IAAI,OAAO,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,EAAE;AACjC,MAAM,MAAM,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC;AACjC,MAAM,MAAM,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACvB,MAAM,IAAI,GAAG,KAAK,EAAE;AACpB,QAAQ,OAAO,EAAE,CAAC;AAClB,MAAM,IAAI,GAAG,GAAG,EAAE;AAClB,QAAQ,GAAG,GAAG,EAAE,CAAC;AACjB;AACA,QAAQ,GAAG,GAAG,EAAE,CAAC;AACjB,KAAK;AACL,IAAI,OAAO,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC;AAC3B,GAAG,CAAC,OAAO,CAAC,EAAE;AACd,IAAI,OAAO,CAAC,CAAC;AACb,GAAG;AACH,CAAC;AACM,SAAS,YAAY,CAAC,KAAK,EAAE;AACpC,EAAE,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAC5B,EAAE,IAAI,CAAC,GAAG,MAAM,CAAC,gBAAgB;AACjC,IAAI,OAAO,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;AAC7C,EAAE,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;AACjD,EAAE,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,EAAE,EAAE,oBAAoB,CAAC,CAAC;AAClD,EAAE,MAAM,KAAK,GAAG,GAAG,GAAG,EAAE,CAAC;AACzB,EAAE,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,CAAC;AAC1C,EAAE,MAAM,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;AACrE,EAAE,OAAO,KAAK,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC;;AC/EY,MAAC,qBAAqB,GAAG,IAAI;AAC7B,MAAC,yBAAyB,GAAG,IAAI;AACtC,MAAM,KAAK,CAAC;AACnB,EAAE,OAAO,CAAC;AACV,EAAE,MAAM,CAAC;AACT,EAAE,MAAM,CAAC;AACT,EAAE,GAAG,CAAC;AACN,EAAE,QAAQ,CAAC;AACX,EAAE,QAAQ,CAAC;AACX,EAAE,YAAY,CAAC;AACf,EAAE,WAAW,CAAC;AACd,EAAE,WAAW,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY,GAAG,yBAAyB,EAAE,WAAW,GAAG,qBAAqB,EAAE;AAC/I,IAAI,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AAC3B,IAAI,IAAI,CAAC,MAAM,GAAG,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AAC/C,IAAI,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AACnB,IAAI,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;AACrC,IAAI,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AACnC,IAAI,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC7B,IAAI,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC7B,GAAG;AACH,EAAE,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE;AAC7B,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACzB,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACzB,GAAG;AACH,CAAC;AACM,MAAM,oBAAoB,SAAS,KAAK,CAAC;AAChD,EAAE,cAAc,CAAC;AACjB,EAAE,cAAc,CAAC;AACjB,EAAE,WAAW,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE;AAChE,IAAI,KAAK,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAC5D,IAAI,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;AACxD,IAAI,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;AACxD,GAAG;AACH,EAAE,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE;AAC7B,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACzB,IAAI,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;AACpD,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACzB,IAAI,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;AACpD,GAAG;AACH,EAAE,WAAW,CAAC,QAAQ,EAAE,SAAS,EAAE;AACnC,IAAI,MAAM,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;AACpE,IAAI,MAAM,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;AACpE,IAAI,OAAO,EAAE,GAAG,EAAE,CAAC,GAAG,QAAQ,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;AAC/F,GAAG;AACH,EAAE,WAAW,CAAC,SAAS,EAAE,SAAS,EAAE;AACpC,IAAI,MAAM,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;AACpE,IAAI,MAAM,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;AACpE,IAAI,IAAI,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,YAAY;AACzC,MAAM,OAAO,EAAE,GAAG,EAAE,MAAM,CAAC,iBAAiB,EAAE,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;AAC3E,IAAI,IAAI,KAAK,GAAG,CAAC,GAAG,SAAS,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC;AACjE,IAAI,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;AACtD,GAAG;AACH,EAAE,0BAA0B,CAAC,SAAS,EAAE;AACxC,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;AAC/C,GAAG;AACH,EAAE,SAAS,CAAC,QAAQ,EAAE,SAAS,EAAE,kBAAkB,EAAE;AACrD,IAAI,MAAM,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;AACpE,IAAI,MAAM,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;AACpE,IAAI,MAAM,WAAW,GAAG,kBAAkB,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;AAC9D,IAAI,MAAM,EAAE,GAAG,CAAC,GAAG,WAAW,CAAC;AAC/B,IAAI,OAAO,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,QAAQ,CAAC,IAAI,EAAE,GAAG,QAAQ,CAAC,CAAC;AACtD,GAAG;AACH,EAAE,gBAAgB,CAAC,KAAK,EAAE,SAAS,EAAE,kBAAkB,EAAE;AACzD,IAAI,MAAM,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;AACpE,IAAI,MAAM,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;AACpE,IAAI,MAAM,WAAW,GAAG,kBAAkB,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;AAC9D,IAAI,MAAM,EAAE,GAAG,CAAC,GAAG,WAAW,CAAC;AAC/B,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;AAC1C,GAAG;AACH,EAAE,YAAY,GAAG;AACjB,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;AAChE,GAAG;AACH,CAAC;AACM,MAAM,WAAW,SAAS,KAAK,CAAC;AACvC,EAAE,CAAC,CAAC;AACJ,EAAE,WAAW,GAAG,GAAG,CAAC;AACpB,EAAE,CAAC,CAAC;AACJ,EAAE,WAAW,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE;AACnE,IAAI,KAAK,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAC5D,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,IAAI,IAAI,CAAC,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/B,GAAG;AACH,EAAE,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE;AAC7B,IAAI,IAAI,CAAC,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/B,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACzB,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACzB,GAAG;AACH,EAAE,gBAAgB,GAAG;AACrB,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACrB,MAAM,OAAO,IAAI,CAAC,CAAC,CAAC;AACpB,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC7B,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC7B,IAAI,IAAI,EAAE,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,MAAM,EAAE;AAClC,MAAM,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/B,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AACzB,IAAI,MAAM,EAAE,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAC1C,IAAI,IAAI,KAAK,CAAC;AACd,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;AACd,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAClC,MAAM,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACxD,MAAM,KAAK,GAAG,CAAC,CAAC;AAChB,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3H,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;AACrC,QAAQ,MAAM;AACd,OAAO;AACP,KAAK;AACL,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,IAAI,OAAO,CAAC,CAAC;AACb,GAAG;AACH,EAAE,QAAQ,CAAC,CAAC,EAAE;AACd,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;AACtC,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AAC1B,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;AACzE,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACnD,IAAI,IAAI,KAAK,CAAC;AACd,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;AACd,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAClC,MAAM,KAAK,GAAG,CAAC,CAAC;AAChB,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;AACrC,QAAQ,MAAM;AACd,OAAO;AACP,KAAK;AACL,IAAI,OAAO,CAAC,CAAC;AACb,GAAG;AACH,EAAE,WAAW,CAAC,QAAQ,EAAE,SAAS,EAAE;AACnC,IAAI,MAAM,GAAG,GAAG,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC1D,IAAI,MAAM,GAAG,GAAG,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC1D,IAAI,MAAM,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACpE,IAAI,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACzC,IAAI,MAAM,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;AACpD,IAAI,OAAO,EAAE,GAAG,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;AACnD,GAAG;AACH,EAAE,WAAW,CAAC,SAAS,EAAE,SAAS,EAAE;AACpC,IAAI,MAAM,GAAG,GAAG,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC1D,IAAI,MAAM,GAAG,GAAG,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC1D,IAAI,IAAI,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC;AAClD,IAAI,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;AACpB,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACjC,IAAI,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACzC,IAAI,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AAClF,IAAI,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;AACtD,GAAG;AACH,EAAE,0BAA0B,CAAC,SAAS,EAAE;AACxC,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;AAC/C,GAAG;AACH,EAAE,SAAS,CAAC,QAAQ,EAAE,SAAS,EAAE,kBAAkB,EAAE;AACrD,IAAI,MAAM,GAAG,GAAG,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC1D,IAAI,MAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;AACvC,IAAI,MAAM,WAAW,GAAG,kBAAkB,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;AAC9D,IAAI,MAAM,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC3D,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC;AACxC,IAAI,MAAM,EAAE,GAAG,CAAC,GAAG,QAAQ,CAAC;AAC5B,IAAI,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACzC,IAAI,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;AAC/B,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAC9C,IAAI,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,WAAW,CAAC;AAClE,IAAI,OAAO,GAAG,CAAC;AACf,GAAG;AACH,EAAE,gBAAgB,CAAC,KAAK,EAAE,SAAS,EAAE,kBAAkB,EAAE,IAAI,GAAG,CAAC,EAAE;AACnE,IAAI,OAAO,cAAc,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,EAAE,kBAAkB,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;AACpG,GAAG;AACH;;ACnKY,MAAC,WAAW,GAAG,CAAC,OAAO;AACvB,MAAC,WAAW,GAAG,CAAC,WAAW,GAAG,EAAE;AACrC,MAAM,OAAO,SAAS,KAAK,CAAC;AACnC,EAAE,WAAW,CAAC;AACd,EAAE,SAAS,CAAC;AACZ,EAAE,SAAS,CAAC;AACZ,EAAE,WAAW,CAAC;AACd,EAAE,KAAK,CAAC;AACR,EAAE,WAAW,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE;AACvH,IAAI,KAAK,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,yBAAyB,EAAE,qBAAqB,CAAC,CAAC;AAC9G,IAAI,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AACnC,IAAI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC/B,IAAI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC/B,IAAI,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AACnC,IAAI,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACvB,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;AACjC,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;AAC7D,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;AAC7D,KAAK;AACL,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,WAAW;AACzC,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;AAChE,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,WAAW;AAC7D,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;AAC7D,GAAG;AACH,EAAE,WAAW,CAAC,QAAQ,EAAE,SAAS,EAAE;AACnC,IAAI,IAAI,eAAe,GAAG,SAAS,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;AAC9E,IAAI,IAAI,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC;AACtC,IAAI,IAAI,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC;AAC1C,IAAI,IAAI,SAAS,GAAG,CAAC,CAAC;AACtB,IAAI,IAAI,KAAK,GAAG,QAAQ,CAAC;AACzB,IAAI,OAAO,KAAK,GAAG,CAAC,EAAE;AACtB,MAAM,IAAI,eAAe,GAAG,CAAC,IAAI,eAAe,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM;AACrE,QAAQ,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;AAC9D,MAAM,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AAC3F,MAAM,IAAI,MAAM,GAAG,CAAC,CAAC;AACrB,MAAM,IAAI,SAAS,EAAE;AACrB,QAAQ,MAAM,KAAK,GAAG,gBAAgB,IAAI,YAAY,GAAG,aAAa,CAAC,GAAG,YAAY,GAAG,aAAa,CAAC;AACvG,QAAQ,IAAI,KAAK,IAAI,KAAK,EAAE;AAC5B,UAAU,MAAM,GAAG,gBAAgB,GAAG,YAAY,GAAG,KAAK,IAAI,KAAK,GAAG,gBAAgB,GAAG,YAAY,CAAC,CAAC;AACvG,UAAU,KAAK,GAAG,CAAC,CAAC;AACpB,SAAS,MAAM;AACf,UAAU,MAAM,GAAG,gBAAgB,IAAI,YAAY,GAAG,aAAa,CAAC,CAAC;AACrE,UAAU,YAAY,GAAG,aAAa,CAAC;AACvC,UAAU,KAAK,IAAI,KAAK,CAAC;AACzB,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,GAAG,CAAC,KAAK,CAAC,EAAE;AAC9E,YAAY,gBAAgB,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,UAAU,CAAC;AACvE,WAAW,MAAM;AACjB,YAAY,gBAAgB,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,UAAU,CAAC;AACvE,WAAW;AACX,UAAU,eAAe,EAAE,CAAC;AAC5B,SAAS;AACT,OAAO,MAAM;AACb,QAAQ,MAAM,KAAK,GAAG,gBAAgB,IAAI,aAAa,GAAG,YAAY,CAAC,CAAC;AACxE,QAAQ,IAAI,KAAK,IAAI,KAAK,EAAE;AAC5B,UAAU,MAAM,GAAG,KAAK,GAAG,YAAY,IAAI,YAAY,GAAG,KAAK,GAAG,gBAAgB,CAAC,CAAC;AACpF,UAAU,KAAK,GAAG,CAAC,CAAC;AACpB,SAAS,MAAM;AACf,UAAU,MAAM,GAAG,gBAAgB,IAAI,aAAa,GAAG,YAAY,CAAC,GAAG,YAAY,GAAG,aAAa,CAAC;AACpG,UAAU,YAAY,GAAG,aAAa,CAAC;AACvC,UAAU,KAAK,IAAI,KAAK,CAAC;AACzB,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,GAAG,CAAC,KAAK,CAAC,EAAE;AAC9E,YAAY,gBAAgB,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,UAAU,CAAC;AACvE,WAAW,MAAM;AACjB,YAAY,gBAAgB,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,UAAU,CAAC;AACvE,WAAW;AACX,UAAU,eAAe,EAAE,CAAC;AAC5B,SAAS;AACT,OAAO;AACP,MAAM,SAAS,IAAI,MAAM,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;AAC3C,KAAK;AACL,IAAI,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;AAC1D,GAAG;AACH,EAAE,WAAW,CAAC,SAAS,EAAE,SAAS,EAAE;AACpC,IAAI,IAAI,eAAe,GAAG,SAAS,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;AAC9E,IAAI,IAAI,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC;AACtC,IAAI,IAAI,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC;AAC1C,IAAI,IAAI,KAAK,GAAG,CAAC,CAAC;AAClB,IAAI,IAAI,YAAY,GAAG,SAAS,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;AAClD,IAAI,OAAO,YAAY,GAAG,CAAC,EAAE;AAC7B,MAAM,IAAI,eAAe,GAAG,CAAC,IAAI,eAAe,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM;AACrE,QAAQ,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;AAC1D,MAAM,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AAC3F,MAAM,IAAI,SAAS,EAAE;AACrB,QAAQ,MAAM,KAAK,GAAG,gBAAgB,IAAI,YAAY,GAAG,aAAa,CAAC,CAAC;AACxE,QAAQ,IAAI,YAAY,IAAI,KAAK,EAAE;AACnC,UAAU,KAAK,IAAI,YAAY,GAAG,YAAY,IAAI,YAAY,GAAG,YAAY,GAAG,gBAAgB,CAAC,CAAC;AAClG,UAAU,YAAY,GAAG,CAAC,CAAC;AAC3B,SAAS,MAAM;AACf,UAAU,KAAK,IAAI,gBAAgB,IAAI,YAAY,GAAG,aAAa,CAAC,GAAG,YAAY,GAAG,aAAa,CAAC;AACpG,UAAU,YAAY,GAAG,aAAa,CAAC;AACvC,UAAU,YAAY,IAAI,KAAK,CAAC;AAChC,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,GAAG,CAAC,KAAK,CAAC,EAAE;AAC9E,YAAY,gBAAgB,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,UAAU,CAAC;AACvE,WAAW,MAAM;AACjB,YAAY,gBAAgB,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,UAAU,CAAC;AACvE,WAAW;AACX,UAAU,eAAe,EAAE,CAAC;AAC5B,SAAS;AACT,OAAO,MAAM;AACb,QAAQ,MAAM,KAAK,GAAG,gBAAgB,IAAI,aAAa,GAAG,YAAY,CAAC,GAAG,YAAY,GAAG,aAAa,CAAC;AACvG,QAAQ,IAAI,YAAY,IAAI,KAAK,EAAE;AACnC,UAAU,KAAK,IAAI,gBAAgB,GAAG,YAAY,GAAG,YAAY,IAAI,gBAAgB,GAAG,YAAY,GAAG,YAAY,CAAC,CAAC;AACrH,UAAU,YAAY,GAAG,CAAC,CAAC;AAC3B,SAAS,MAAM;AACf,UAAU,KAAK,IAAI,gBAAgB,IAAI,aAAa,GAAG,YAAY,CAAC,CAAC;AACrE,UAAU,YAAY,GAAG,aAAa,CAAC;AACvC,UAAU,YAAY,IAAI,KAAK,CAAC;AAChC,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,GAAG,CAAC,KAAK,CAAC,EAAE;AAC9E,YAAY,gBAAgB,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,UAAU,CAAC;AACvE,WAAW,MAAM;AACjB,YAAY,gBAAgB,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,UAAU,CAAC;AACvE,WAAW;AACX,UAAU,eAAe,EAAE,CAAC;AAC5B,SAAS;AACT,OAAO;AACP,KAAK;AACL,IAAI,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;AACtD,GAAG;AACH,EAAE,0BAA0B,CAAC,SAAS,EAAE;AACxC,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAC9C,IAAI,OAAO,SAAS,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACjC,GAAG;AACH;;ACxHA,SAAS,UAAU,CAAC,KAAK,EAAE,KAAK,EAAE;AAClC,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE;AACnD,IAAI,OAAO,KAAK,CAAC;AACjB,EAAE,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAClD,CAAC;AACD,MAAM,cAAc,CAAC;AACrB,EAAE,YAAY,CAAC;AACf,EAAE,QAAQ,CAAC;AACX,EAAE,WAAW,CAAC,MAAM,EAAE;AACtB,IAAI,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;AAC3B,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE;AACvD,MAAM,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;AAC5B;AACA,MAAM,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;AACjG,GAAG;AACH,EAAE,QAAQ,CAAC,KAAK,EAAE;AAClB,IAAI,OAAO,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC;AACrC,GAAG;AACH,EAAE,OAAO,CAAC,MAAM,EAAE;AAClB,IAAI,OAAO,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC;AACtC,GAAG;AACH,EAAE,UAAU,CAAC,KAAK,EAAE;AACpB,IAAI,OAAO,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC5C,GAAG;AACH,CAAC;AACM,MAAM,eAAe,SAAS,KAAK,CAAC;AAC3C,EAAE,CAAC,CAAC;AACJ,EAAE,MAAM,CAAC;AACT,EAAE,MAAM,CAAC;AACT,EAAE,WAAW,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE;AAChF,IAAI,KAAK,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,UAAU,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,UAAU,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;AACpG,IAAI,IAAI,CAAC,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/B,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,cAAc,CAAC,MAAM,CAAC,CAAC;AAC7C,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,cAAc,CAAC,MAAM,CAAC,CAAC;AAC7C,GAAG;AACH,EAAE,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE;AAC7B,IAAI,IAAI,CAAC,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/B,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACjD,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACjD,GAAG;AACH,EAAE,QAAQ,GAAG;AACb,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE;AACzB,MAAM,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC9B,MAAM,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC9B,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,KAAK;AACL,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC;AAClB,GAAG;AACH,EAAE,QAAQ,CAAC,CAAC,EAAE,KAAK,EAAE;AACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;AAC9B,IAAI,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACxB,IAAI,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACxB,IAAI,MAAM,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAClC,IAAI,IAAI,KAAK,GAAG,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC;AACjC,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;AAClC,MAAM,MAAM,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC/B,MAAM,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACnC,MAAM,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;AAC/D,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;AACnC,QAAQ,MAAM;AACd,MAAM,KAAK,GAAG,CAAC,CAAC;AAChB,KAAK;AACL,IAAI,OAAO,CAAC,CAAC;AACb,GAAG;AACH,EAAE,WAAW,CAAC,QAAQ,EAAE,SAAS,EAAE;AACnC,IAAI,QAAQ,GAAG,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AAC3F,IAAI,MAAM,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AACxD,IAAI,MAAM,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AACxD,IAAI,MAAM,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5E,IAAI,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AACxC,IAAI,MAAM,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAC;AACtD,IAAI,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AACnC,IAAI,MAAM,GAAG,GAAG,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAClF,IAAI,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;AAC/C,GAAG;AACH,EAAE,WAAW,CAAC,SAAS,EAAE,SAAS,EAAE;AACpC,IAAI,SAAS,GAAG,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;AAC9F,IAAI,MAAM,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AACxD,IAAI,MAAM,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AACxD,IAAI,IAAI,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;AACzD,IAAI,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC;AAClC,MAAM,OAAO,EAAE,GAAG,EAAE,MAAM,CAAC,iBAAiB,EAAE,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;AAC3E,IAAI,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AACxC,IAAI,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AACpF,IAAI,MAAM,GAAG,GAAG,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AACpF,IAAI,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;AAC/C,GAAG;AACH,EAAE,0BAA0B,CAAC,SAAS,EAAE;AACxC,IAAI,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC1D,IAAI,MAAM,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC9D,IAAI,MAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;AACvC,IAAI,MAAM,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;AACnD,IAAI,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACxB,IAAI,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AACtB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;AAC1C,IAAI,MAAM,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;AACpD,IAAI,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/B,IAAI,MAAM,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,EAAE,CAAC;AACtC,IAAI,MAAM,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;AACxB,IAAI,MAAM,EAAE,GAAG,MAAM,GAAG,EAAE,CAAC;AAC3B,IAAI,MAAM,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;AACxB,IAAI,MAAM,EAAE,GAAG,MAAM,GAAG,EAAE,CAAC;AAC3B,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;AAClC,IAAI,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;AACpC,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;AAClC,IAAI,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;AACpC,IAAI,MAAM,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC;AACzB,IAAI,MAAM,QAAQ,GAAG,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;AACnI,IAAI,OAAO,aAAa,IAAI,SAAS,GAAG,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC;AAClE,GAAG;AACH;;AC/GU,IAAC,WAAW,mBAAmB,CAAC,CAAC,YAAY,KAAK;AAC5D,EAAE,YAAY,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC;AACtC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC;AAClC,EAAE,YAAY,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC;AACtC,EAAE,OAAO,YAAY,CAAC;AACtB,CAAC,EAAE,WAAW,IAAI,EAAE,EAAE;AACf,MAAM,IAAI,CAAC;AAClB,EAAE,IAAI,CAAC;AACP,EAAE,KAAK,CAAC;AACR,EAAE,KAAK,CAAC;AACR,EAAE,SAAS,CAAC;AACZ,EAAE,SAAS,CAAC;AACZ,EAAE,gBAAgB,CAAC;AACnB,EAAE,iBAAiB,CAAC;AACpB,EAAE,QAAQ,CAAC;AACX,EAAE,WAAW,CAAC;AACd,EAAE,cAAc,CAAC;AACjB,EAAE,WAAW,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE;AACzB,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;AAClB,IAAI,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AACpB,IAAI,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AACpB,IAAI,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;AAC9B,IAAI,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;AAC/B,IAAI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AAC1B,IAAI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AAC1B,IAAI,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;AACtB,IAAI,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;AACzB,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;AAC5B,GAAG;AACH,EAAE,YAAY,GAAG;AACjB,IAAI,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;AAC9B,IAAI,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;AAC/B,IAAI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AAC1B,IAAI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AAC1B,IAAI,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;AACtB,IAAI,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;AACzB,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;AAC5B,GAAG;AACH,EAAE,OAAO,CAAC,CAAC,EAAE;AACb,IAAI,OAAO,CAAC,KAAK,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;AACtE,GAAG;AACH,EAAE,UAAU,CAAC,CAAC,EAAE,QAAQ,EAAE;AAC1B,IAAI,IAAI,GAAG,CAAC;AACZ,IAAI,IAAI,GAAG,CAAC;AACZ,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE;AAC1B,MAAM,IAAI,IAAI,CAAC,SAAS,EAAE;AAC1B,QAAQ,IAAI,QAAQ,GAAG,IAAI,CAAC,iBAAiB,EAAE;AAC/C,UAAU,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,GAAG,QAAQ,EAAE,IAAI,CAAC,CAAC;AACnG,UAAU,GAAG,GAAG,IAAI,CAAC,gBAAgB,GAAG,GAAG,CAAC;AAC5C,UAAU,GAAG,GAAG,QAAQ,CAAC;AACzB,SAAS,MAAM;AACf,UAAU,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;AACpG,UAAU,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC;AAC5C,UAAU,GAAG,GAAG,QAAQ,CAAC;AACzB,SAAS;AACT,OAAO,MAAM;AACb,QAAQ,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,GAAG,QAAQ,EAAE,KAAK,CAAC,CAAC;AAClG,QAAQ,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC;AAC1C,QAAQ,GAAG,GAAG,QAAQ,CAAC;AACvB,OAAO;AACP,KAAK,MAAM;AACX,MAAM,IAAI,IAAI,CAAC,SAAS,EAAE;AAC1B,QAAQ,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,GAAG,QAAQ,EAAE,IAAI,CAAC,CAAC;AAChG,QAAQ,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC;AAC3C,QAAQ,GAAG,GAAG,QAAQ,CAAC;AACvB,OAAO,MAAM;AACb,QAAQ,IAAI,QAAQ,GAAG,IAAI,CAAC,gBAAgB,EAAE;AAC9C,UAAU,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,GAAG,QAAQ,EAAE,KAAK,CAAC,CAAC;AACnG,UAAU,GAAG,GAAG,IAAI,CAAC,iBAAiB,GAAG,GAAG,CAAC;AAC7C,UAAU,GAAG,GAAG,QAAQ,CAAC;AACzB,SAAS,MAAM;AACf,UAAU,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;AAClG,UAAU,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC;AAC7C,UAAU,GAAG,GAAG,QAAQ,CAAC;AACzB,SAAS;AACT,OAAO;AACP,KAAK;AACL,IAAI,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvD,GAAG;AACH,EAAE,SAAS,CAAC,CAAC,EAAE,SAAS,EAAE;AAC1B,IAAI,IAAI,GAAG,EAAE,GAAG,CAAC;AACjB,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE;AAC1B,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;AAC3B,QAAQ,IAAI,SAAS,GAAG,IAAI,CAAC,iBAAiB,EAAE;AAChD,UAAU,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,GAAG,SAAS,EAAE,KAAK,CAAC,CAAC;AACrG,UAAU,GAAG,GAAG,IAAI,CAAC,gBAAgB,GAAG,GAAG,CAAC;AAC5C,UAAU,GAAG,GAAG,QAAQ,CAAC;AACzB,SAAS,MAAM;AACf,UAAU,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;AACpG,UAAU,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC;AAC5C,UAAU,GAAG,GAAG,QAAQ,CAAC;AACzB,SAAS;AACT,OAAO,MAAM;AACb,QAAQ,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,GAAG,SAAS,EAAE,IAAI,CAAC,CAAC;AAClG,QAAQ,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC;AAC1C,QAAQ,GAAG,GAAG,QAAQ,CAAC;AACvB,OAAO;AACP,KAAK,MAAM;AACX,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;AAC3B,QAAQ,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,GAAG,SAAS,EAAE,KAAK,CAAC,CAAC;AAClG,QAAQ,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC;AAC3C,QAAQ,GAAG,GAAG,QAAQ,CAAC;AACvB,OAAO,MAAM;AACb,QAAQ,IAAI,SAAS,GAAG,IAAI,CAAC,gBAAgB,EAAE;AAC/C,UAAU,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,GAAG,SAAS,EAAE,IAAI,CAAC,CAAC;AACnG,UAAU,GAAG,GAAG,IAAI,CAAC,iBAAiB,GAAG,GAAG,CAAC;AAC7C,UAAU,GAAG,GAAG,QAAQ,CAAC;AACzB,SAAS,MAAM;AACf,UAAU,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;AACpG,UAAU,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC;AAC7C,UAAU,GAAG,GAAG,QAAQ,CAAC;AACzB,SAAS;AACT,OAAO;AACP,KAAK;AACL,IAAI,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvD,GAAG;AACH,EAAE,sCAAsC,CAAC,IAAI,EAAE,SAAS,EAAE;AAC1D,IAAI,IAAI,IAAI,KAAK,IAAI,CAAC,KAAK,EAAE;AAC7B,MAAM,MAAM,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;AACzD,MAAM,IAAI,IAAI,CAAC,SAAS,EAAE;AAC1B,QAAQ,OAAO,EAAE,GAAG,SAAS,GAAG,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;AAChF,OAAO,MAAM;AACb,QAAQ,OAAO,EAAE,GAAG,SAAS,GAAG,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;AAChF,OAAO;AACP,KAAK,MAAM;AACX,MAAM,MAAM,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;AACzD,MAAM,IAAI,IAAI,CAAC,SAAS,EAAE;AAC1B,QAAQ,OAAO,EAAE,GAAG,SAAS,GAAG,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;AAC/E,OAAO,MAAM;AACb,QAAQ,OAAO,EAAE,GAAG,SAAS,GAAG,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;AAC/E,OAAO;AACP,KAAK;AACL,GAAG;AACH,EAAE,SAAS,CAAC,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE;AACvC,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,IAAI,CAAC,CAAC,CAAC;AACxE,IAAI,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,gBAAgB,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC;AACnF,IAAI,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC;AACtF,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACrC,IAAI,IAAI,YAAY,EAAE,WAAW,GAAG,CAAC,EAAE,YAAY,GAAG,CAAC,CAAC;AACxD,IAAI,IAAI,EAAE,EAAE;AACZ,MAAM,MAAM,KAAK,GAAG,IAAI,KAAK,IAAI,CAAC,KAAK,GAAG,QAAQ,GAAG,CAAC,SAAS,CAAC;AAChE,MAAM,MAAM,MAAM,GAAG,IAAI,KAAK,IAAI,CAAC,KAAK,GAAG,SAAS,GAAG,CAAC,QAAQ,CAAC;AACjE,MAAM,MAAM,KAAK,GAAG,MAAM,GAAG,KAAK,CAAC;AACnC,MAAM,MAAM,MAAM,GAAG,OAAO,GAAG,MAAM,CAAC;AACtC,MAAM,IAAI,KAAK,GAAG,MAAM,GAAG,CAAC;AAC5B,QAAQ,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAC3B,MAAM,OAAO,CAAC,MAAM,CAAC,KAAK,GAAG,MAAM,IAAI,CAAC,CAAC,CAAC;AAC1C,MAAM,IAAI,KAAK,IAAI,CAAC,EAAE;AACtB,QAAQ,YAAY,GAAG,IAAI,CAAC;AAC5B,QAAQ,WAAW,GAAG,KAAK,CAAC;AAC5B,QAAQ,YAAY,GAAG,MAAM,CAAC;AAC9B,OAAO,MAAM;AACb,QAAQ,YAAY,GAAG,KAAK,CAAC;AAC7B,QAAQ,WAAW,GAAG,CAAC,KAAK,CAAC;AAC7B,QAAQ,YAAY,GAAG,CAAC,MAAM,CAAC;AAC/B,OAAO;AACP,KAAK;AACL,MAAM,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;AACjC,IAAI,IAAI,YAAY,EAAE;AACtB,MAAM,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC;AAChE,MAAM,MAAM,GAAG,GAAG,WAAW,CAAC,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AACxD,MAAM,IAAI,CAAC,GAAG;AACd,QAAQ,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3F,MAAM,OAAO,GAAG,CAAC;AACjB,KAAK,MAAM;AACX,MAAM,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC;AAClE,MAAM,MAAM,GAAG,GAAG,WAAW,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AACvD,MAAM,IAAI,CAAC,GAAG;AACd,QAAQ,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,WAAW,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;AACxF,MAAM,OAAO,GAAG,CAAC;AACjB,KAAK;AACL,GAAG;AACH,EAAE,SAAS,CAAC,IAAI,EAAE;AAClB,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,IAAI,CAAC,CAAC,CAAC;AACxE,IAAI,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,gBAAgB,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC;AACnF,IAAI,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC;AACtF,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACrC,IAAI,IAAI,EAAE,EAAE;AACZ,MAAM,MAAM,KAAK,GAAG,IAAI,KAAK,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC,EAAE,CAAC,UAAU,CAAC;AAC3E,MAAM,MAAM,MAAM,GAAG,IAAI,KAAK,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;AAC5E,MAAM,MAAM,KAAK,GAAG,MAAM,GAAG,KAAK,CAAC;AACnC,MAAM,MAAM,MAAM,GAAG,OAAO,GAAG,MAAM,CAAC;AACtC,MAAM,OAAO,CAAC,MAAM,CAAC,KAAK,GAAG,MAAM,IAAI,CAAC,CAAC,CAAC;AAC1C,MAAM,IAAI,KAAK,IAAI,CAAC,EAAE;AACtB,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AAC9B,QAAQ,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;AACtC,QAAQ,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC;AACxC,OAAO,MAAM;AACb,QAAQ,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;AAC/B,QAAQ,IAAI,CAAC,gBAAgB,GAAG,CAAC,KAAK,CAAC;AACvC,QAAQ,IAAI,CAAC,iBAAiB,GAAG,CAAC,MAAM,CAAC;AACzC,OAAO;AACP,KAAK;AACL,MAAM,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;AACjC,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;AACrC,IAAI,MAAM,CAAC,MAAM;AACjB,MAAM,OAAO,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AACxP,KAAK,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;AACpB,GAAG;AACH,CAAC;AACM,MAAM,OAAO,CAAC;AACrB,EAAE,KAAK,CAAC;AACR,EAAE,KAAK,CAAC;AACR,EAAE,KAAK,CAAC;AACR,EAAE,QAAQ,CAAC;AACX,EAAE,UAAU,CAAC;AACb,EAAE,QAAQ,CAAC;AACX,EAAE,SAAS,CAAC;AACZ,EAAE,UAAU,CAAC;AACb,EAAE,SAAS,CAAC;AACZ,EAAE,WAAW,CAAC,CAAC,EAAE;AACjB,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;AACnB,IAAI,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AACpB,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;AACnB,IAAI,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;AACtB,IAAI,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;AACxB,IAAI,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;AACtB,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;AACvB,IAAI,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,CAAC;AAC7B,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;AACxB,GAAG;AACH,EAAE,YAAY,GAAG;AACjB,IAAI,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;AACxB,IAAI,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;AACtB,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;AACvB,IAAI,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,CAAC;AAC7B,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;AACxB,GAAG;AACH,EAAE,UAAU,CAAC,CAAC,EAAE;AAChB,IAAI,IAAI,CAAC,CAAC;AACV,MAAM,OAAO;AACb,IAAI,OAAO,CAAC,CAAC,KAAK,KAAK,IAAI,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;AAChD,GAAG;AACH,EAAE,cAAc,GAAG;AACnB,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK;AACpC,MAAM,IAAI,CAAC,CAAC,CAAC,SAAS;AACtB,QAAQ,OAAO,KAAK,CAAC;AACrB,MAAM,IAAI,CAAC,CAAC,gBAAgB,KAAK,CAAC;AAClC,QAAQ,OAAO,KAAK,CAAC;AACrB,MAAM,IAAI,CAAC,CAAC,SAAS,MAAM,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC;AAC5C,QAAQ,OAAO,KAAK,CAAC;AACrB,MAAM,OAAO,IAAI,CAAC;AAClB,KAAK,CAAC,CAAC;AACP,GAAG;AACH,EAAE,aAAa,GAAG;AAClB,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK;AACpC,MAAM,IAAI,CAAC,CAAC,CAAC,SAAS;AACtB,QAAQ,OAAO,KAAK,CAAC;AACrB,MAAM,IAAI,CAAC,CAAC,gBAAgB,KAAK,CAAC;AAClC,QAAQ,OAAO,KAAK,CAAC;AACrB,MAAM,IAAI,CAAC,CAAC,SAAS,MAAM,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC;AAC5C,QAAQ,OAAO,KAAK,CAAC;AACrB,MAAM,OAAO,IAAI,CAAC;AAClB,KAAK,CAAC,CAAC;AACP,GAAG;AACH,CAAC;AACM,MAAM,KAAK,CAAC;AACnB,EAAE,QAAQ,CAAC;AACX,EAAE,KAAK,CAAC;AACR,EAAE,MAAM,CAAC;AACT,EAAE,WAAW,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE;AAC1C,IAAI,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AACvB,IAAI,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AACpB,IAAI,IAAI,CAAC,MAAM,mBAAmB,IAAI,GAAG,EAAE,CAAC;AAC5C,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;AACzB,MAAM,MAAM,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;AACnD,MAAM,MAAM,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;AACnD,MAAM,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AACvC,MAAM,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC1B,MAAM,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC1B,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC5B,KAAK,CAAC,CAAC;AACP,IAAI,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AACxD,IAAI,IAAI,QAAQ,EAAE;AAClB,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;AAClD,KAAK;AACL,GAAG;AACH,EAAE,YAAY,GAAG;AACjB,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC;AAChD,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC;AACnD,GAAG;AACH,EAAE,eAAe,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE;AACzC,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;AAC9C,IAAI,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACvB,IAAI,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC7B,IAAI,MAAM,UAAU,mBAAmB,IAAI,GAAG,EAAE,CAAC;AACjD,IAAI,MAAM,KAAK,GAAG,CAAC,CAAC,KAAK,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3C,IAAI,SAAS,UAAU,CAAC,CAAC,EAAE;AAC3B,MAAM,MAAM,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;AAC1E,MAAM,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;AAC9F,MAAM,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,KAAK,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;AACvD,MAAM,MAAM,GAAG,GAAG,EAAE,CAAC;AACrB,MAAM,OAAO,SAAS,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,EAAE;AAClD,QAAQ,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACpD,UAAU,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,CAAC;AACtC;AACA,UAAU,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;AACrC,OAAO;AACP,MAAM,SAAS,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,SAAS,EAAE,GAAG,QAAQ,CAAC,CAAC;AACtD,KAAK;AACL,IAAI,IAAI,SAAS,GAAG,EAAE,CAAC;AACvB,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;AACrB,IAAI,OAAO,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;AACjC,MAAM,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC;AACvC,MAAM,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC5H,MAAM,IAAI,GAAG,CAAC,KAAK,KAAK,CAAC;AACzB,QAAQ,SAAS;AACjB,MAAM,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,0BAA0B,CAAC,KAAK,KAAK,QAAQ,CAAC,KAAK,CAAC,CAAC;AACjF,MAAM,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;AAClC,MAAM,GAAG,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC;AACxC,MAAM,UAAU,CAAC,GAAG,CAAC,CAAC;AACtB,KAAK;AACL,GAAG;AACH,EAAE,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE;AACnC,IAAI,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC;AACxB,MAAM,OAAO;AACb,IAAI,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACvB,IAAI,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC7B,IAAI,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;AACzH,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK;AAC9B,MAAM,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,IAAI,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;AACrD,MAAM,IAAI,CAAC,CAAC,KAAK,KAAK,CAAC;AACvB,QAAQ,OAAO;AACf,MAAM,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,IAAI,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;AACpE,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC;AACjD,KAAK,CAAC,CAAC;AACP,GAAG;AACH,EAAE,kBAAkB,CAAC,KAAK,EAAE;AAC5B,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC9C,IAAI,IAAI,IAAI;AACZ,MAAM,OAAO,IAAI,CAAC;AAClB,IAAI,IAAI,GAAG,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC;AAC9B,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC7B,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACzC,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH,EAAE,mBAAmB,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE;AACrD,IAAI,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAChD,IAAI,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;AAC/C,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM;AACzB,MAAM,OAAO;AACb,IAAI,MAAM,QAAQ,GAAG,SAAS,KAAK,KAAK,CAAC,GAAG,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC;AACxE,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;AAC9B,MAAM,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC;AAC3B,MAAM,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC;AACxB,KAAK,CAAC,CAAC;AACP,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;AACjC,MAAM,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC;AACvB,MAAM,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC;AACrB,MAAM,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC;AACtB,MAAM,CAAC,CAAC,UAAU,GAAG,KAAK,CAAC,CAAC;AAC5B,MAAM,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;AACvB,KAAK,CAAC,CAAC;AACP,IAAI,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC;AAChC,IAAI,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC;AAC/B,IAAI,MAAM,aAAa,mBAAmB,IAAI,GAAG,EAAE,CAAC;AACpD,IAAI,MAAM,YAAY,GAAG,CAAC,KAAK,CAAC,CAAC;AACjC,IAAI,IAAI,UAAU,GAAG,CAAC,CAAC,CAAC;AACxB,IAAI,IAAI,SAAS,GAAG,CAAC,CAAC;AACtB,IAAI,WAAW;AACf,MAAM,IAAI,WAAW,CAAC;AACtB,MAAM,IAAI,YAAY,CAAC;AACvB,MAAM,IAAI,eAAe,GAAG,CAAC,CAAC;AAC9B,MAAM,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK;AACrC,QAAQ,IAAI,YAAY,KAAK,KAAK,CAAC,IAAI,CAAC,CAAC,SAAS,GAAG,YAAY,EAAE;AACnE,UAAU,YAAY,GAAG,CAAC,CAAC,SAAS,CAAC;AACrC,UAAU,WAAW,GAAG,CAAC,CAAC;AAC1B,UAAU,eAAe,GAAG,CAAC,CAAC;AAC9B,SAAS;AACT,OAAO,CAAC,CAAC;AACT,MAAM,IAAI,CAAC,WAAW;AACtB,QAAQ,OAAO;AACf,MAAM,WAAW,CAAC,SAAS,GAAG,SAAS,EAAE,CAAC;AAC1C,MAAM,IAAI,WAAW,KAAK,MAAM,EAAE;AAClC,QAAQ,MAAM,QAAQ,GAAG,EAAE,CAAC;AAC5B,QAAQ,KAAK,IAAI,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE;AAC5E,UAAU,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;AACzC,SAAS;AACT,QAAQ,KAAK,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;AAC7C,QAAQ,OAAO;AACf,UAAU,IAAI,EAAE,QAAQ;AACxB,UAAU,MAAM,EAAE,MAAM,CAAC,UAAU;AACnC,UAAU,QAAQ,EAAE,MAAM,CAAC,QAAQ;AACnC,UAAU,WAAW,EAAE,MAAM,CAAC,SAAS;AACvC,SAAS,CAAC;AACV,OAAO;AACP,MAAM,YAAY,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;AAC9C,MAAM,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;AACvC,QAAQ,MAAM,EAAE,GAAG,WAAW,KAAK,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;AAC/D,QAAQ,IAAI,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC;AACjC,UAAU,OAAO;AACjB,QAAQ,IAAI,SAAS,CAAC;AACtB,QAAQ,IAAI,GAAG,CAAC;AAChB,QAAQ,IAAI;AACZ,UAAU,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC,UAAU,CAAC,WAAW,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC;AACtF,UAAU,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;AACnD,YAAY,OAAO;AACnB,UAAU,SAAS,GAAG,GAAG,CAAC;AAC1B,UAAU,GAAG,GAAG,QAAQ,CAAC;AACzB,SAAS,CAAC,OAAO,EAAE,EAAE;AACrB,UAAU,OAAO;AACjB,SAAS;AACT,QAAQ,IAAI,CAAC,CAAC,sCAAsC,CAAC,WAAW,EAAE,SAAS,CAAC,EAAE;AAC9E,UAAU,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;AAChC,UAAU,OAAO;AACjB,SAAS;AACT,QAAQ,MAAM,WAAW,GAAG,WAAW,CAAC,QAAQ,GAAG,GAAG,CAAC;AACvD,QAAQ,MAAM,KAAK,GAAG,EAAE,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;AAC9C,QAAQ,MAAM,QAAQ,GAAG,SAAS,GAAG,KAAK,GAAG,WAAW,GAAG,QAAQ,CAAC;AACpE,QAAQ,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,cAAc,KAAK,CAAC,EAAE,WAAW,CAAC,CAAC;AAC5D,QAAQ,CAAC,CAAC,cAAc,GAAG,SAAS,GAAG,KAAK,CAAC;AAC7C,QAAQ,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,QAAQ,GAAG,GAAG,CAAC;AACzC,QAAQ,IAAI,CAAC,EAAE,CAAC,UAAU;AAC1B,UAAU,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAChC,QAAQ,IAAI,CAAC,EAAE,CAAC,UAAU,IAAI,QAAQ,GAAG,EAAE,CAAC,SAAS,EAAE;AACvD,UAAU,KAAK,CAAC,MAAM;AACtB,YAAY,MAAM,EAAE,GAAG,WAAW,EAAE,KAAK,IAAI,IAAI,GAAG,GAAG,GAAG,EAAE,CAAC;AAC7D,YAAY,MAAM,EAAE,GAAG,EAAE,EAAE,KAAK,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;AAClD,YAAY,UAAU,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,WAAW,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC;AAClH,CAAC,CAAC;AACF,WAAW,CAAC,CAAC;AACb,UAAU,EAAE,CAAC,UAAU,GAAG,SAAS,CAAC;AACpC,UAAU,EAAE,CAAC,QAAQ,GAAG,WAAW,CAAC;AACpC,UAAU,EAAE,CAAC,SAAS,GAAG,QAAQ,CAAC;AAClC,UAAU,EAAE,CAAC,UAAU,GAAG,CAAC,CAAC;AAC5B,SAAS;AACT,OAAO,CAAC,CAAC;AACT,MAAM,aAAa,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;AACrC,KAAK;AACL,GAAG;AACH,EAAE,oBAAoB,CAAC,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE;AACvD,IAAI,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;AAC9C,IAAI,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACjD,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM;AACzB,MAAM,OAAO;AACb,IAAI,MAAM,QAAQ,GAAG,SAAS,KAAK,KAAK,CAAC,GAAG,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC;AACxE,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;AAC9B,MAAM,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC;AAC3B,MAAM,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC;AACxB,KAAK,CAAC,CAAC;AACP,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;AACjC,MAAM,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC;AACvB,MAAM,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC;AACrB,MAAM,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC;AACtB,MAAM,CAAC,CAAC,UAAU,GAAG,KAAK,CAAC,CAAC;AAC5B,MAAM,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;AACvB,KAAK,CAAC,CAAC;AACP,IAAI,KAAK,CAAC,UAAU,GAAG,SAAS,CAAC;AACjC,IAAI,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC;AAChC,IAAI,MAAM,aAAa,mBAAmB,IAAI,GAAG,EAAE,CAAC;AACpD,IAAI,MAAM,YAAY,GAAG,CAAC,KAAK,CAAC,CAAC;AACjC,IAAI,IAAI,UAAU,GAAG,EAAE,CAAC;AACxB,IAAI,IAAI,SAAS,GAAG,CAAC,CAAC;AACtB,IAAI,WAAW;AACf,MAAM,IAAI,WAAW,CAAC;AACtB,MAAM,IAAI,YAAY,CAAC;AACvB,MAAM,IAAI,eAAe,GAAG,CAAC,CAAC;AAC9B,MAAM,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK;AACrC,QAAQ,IAAI,YAAY,KAAK,KAAK,CAAC,IAAI,CAAC,CAAC,SAAS,GAAG,YAAY,EAAE;AACnE,UAAU,YAAY,GAAG,CAAC,CAAC,SAAS,CAAC;AACrC,UAAU,WAAW,GAAG,CAAC,CAAC;AAC1B,UAAU,eAAe,GAAG,CAAC,CAAC;AAC9B,SAAS;AACT,OAAO,CAAC,CAAC;AACT,MAAM,IAAI,CAAC,WAAW;AACtB,QAAQ,OAAO;AACf,MAAM,WAAW,CAAC,SAAS,GAAG,SAAS,EAAE,CAAC;AAC1C,MAAM,IAAI,WAAW,KAAK,MAAM,EAAE;AAClC,QAAQ,MAAM,QAAQ,GAAG,EAAE,CAAC;AAC5B,QAAQ,KAAK,IAAI,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE;AAC5E,UAAU,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;AACtC,SAAS;AACT,QAAQ,KAAK,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;AAC7C,QAAQ,OAAO;AACf,UAAU,IAAI,EAAE,QAAQ;AACxB,UAAU,KAAK,EAAE,MAAM,CAAC,UAAU;AAClC,UAAU,QAAQ,EAAE,MAAM,CAAC,QAAQ;AACnC,UAAU,UAAU,EAAE,MAAM,CAAC,SAAS;AACtC,SAAS,CAAC;AACV,OAAO;AACP,MAAM,YAAY,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;AAC9C,MAAM,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;AACvC,QAAQ,MAAM,EAAE,GAAG,WAAW,KAAK,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;AAC/D,QAAQ,IAAI,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC;AACjC,UAAU,OAAO;AACjB,QAAQ,IAAI,SAAS,EAAE,GAAG,CAAC;AAC3B,QAAQ,IAAI;AACZ,UAAU,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,WAAW,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC;AACrF,UAAU,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;AACnD,YAAY,OAAO;AACnB,UAAU,IAAI,GAAG,GAAG,CAAC;AACrB,YAAY,OAAO;AACnB,UAAU,SAAS,GAAG,GAAG,CAAC;AAC1B,UAAU,GAAG,GAAG,QAAQ,CAAC;AACzB,SAAS,CAAC,OAAO,EAAE,EAAE;AACrB,UAAU,OAAO;AACjB,SAAS;AACT,QAAQ,MAAM,WAAW,GAAG,WAAW,CAAC,QAAQ,GAAG,GAAG,CAAC;AACvD,QAAQ,MAAM,KAAK,GAAG,EAAE,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;AAC9C,QAAQ,MAAM,QAAQ,GAAG,SAAS,GAAG,KAAK,GAAG,WAAW,GAAG,QAAQ,CAAC;AACpE,QAAQ,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,cAAc,KAAK,CAAC,EAAE,WAAW,CAAC,CAAC;AAC5D,QAAQ,CAAC,CAAC,cAAc,GAAG,SAAS,GAAG,KAAK,CAAC;AAC7C,QAAQ,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,QAAQ,GAAG,GAAG,CAAC;AACzC,QAAQ,IAAI,CAAC,EAAE,CAAC,UAAU;AAC1B,UAAU,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAChC,QAAQ,IAAI,CAAC,EAAE,CAAC,UAAU,IAAI,QAAQ,GAAG,EAAE,CAAC,SAAS,EAAE;AACvD,UAAU,KAAK,CAAC,MAAM;AACtB,YAAY,MAAM,EAAE,GAAG,EAAE,EAAE,KAAK,IAAI,IAAI,GAAG,GAAG,GAAG,EAAE,CAAC;AACpD,YAAY,MAAM,EAAE,GAAG,WAAW,EAAE,KAAK,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;AAC3D,YAAY,UAAU,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,WAAW,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC;AAClH,CAAC,CAAC;AACF,WAAW,CAAC,CAAC;AACb,UAAU,EAAE,CAAC,UAAU,GAAG,SAAS,CAAC;AACpC,UAAU,EAAE,CAAC,QAAQ,GAAG,WAAW,CAAC;AACpC,UAAU,EAAE,CAAC,SAAS,GAAG,QAAQ,CAAC;AAClC,UAAU,EAAE,CAAC,UAAU,GAAG,CAAC,CAAC;AAC5B,SAAS;AACT,OAAO,CAAC,CAAC;AACT,MAAM,aAAa,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;AACrC,KAAK;AACL,GAAG;AACH,EAAE,OAAO,CAAC,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE;AAC1B,IAAI,IAAI,KAAK,GAAG,IAAI,CAAC;AACrB,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;AACxB,MAAM,IAAI,KAAK,EAAE;AACjB,QAAQ,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAC3B,QAAQ,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACpC,OAAO,MAAM;AACb,QAAQ,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;AACxC,OAAO;AACP,KAAK,CAAC,CAAC;AACP,IAAI,MAAM,CAAC,MAAM;AACjB,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK;AACxC,QAAQ,IAAI,KAAK,GAAG,CAAC,CAAC;AACtB,QAAQ,IAAI,WAAW,GAAG,CAAC,CAAC;AAC5B,QAAQ,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;AAC/B,UAAU,IAAI,CAAC,CAAC,KAAK,KAAK,CAAC,EAAE;AAC7B,YAAY,IAAI,CAAC,CAAC,SAAS,EAAE;AAC7B,cAAc,KAAK,IAAI,CAAC,CAAC,gBAAgB,CAAC;AAC1C,aAAa,MAAM;AACnB,cAAc,KAAK,IAAI,CAAC,CAAC,gBAAgB,CAAC;AAC1C,aAAa;AACb,YAAY,WAAW,IAAI,CAAC,CAAC,gBAAgB,CAAC;AAC9C,WAAW,MAAM;AACjB,YAAY,IAAI,CAAC,CAAC,SAAS,EAAE;AAC7B,cAAc,KAAK,IAAI,CAAC,CAAC,iBAAiB,CAAC;AAC3C,aAAa,MAAM;AACnB,cAAc,KAAK,IAAI,CAAC,CAAC,iBAAiB,CAAC;AAC3C,aAAa;AACb,YAAY,WAAW,IAAI,CAAC,CAAC,iBAAiB,CAAC;AAC/C,WAAW;AACX,SAAS,CAAC,CAAC;AACX,QAAQ,IAAI,CAAC,KAAK,IAAI;AACtB,UAAU,OAAO,KAAK,IAAI,CAAC,CAAC;AAC5B,QAAQ,IAAI,CAAC,KAAK,EAAE;AACpB,UAAU,OAAO,KAAK,IAAI,CAAC,CAAC;AAC5B,QAAQ,IAAI,WAAW,KAAK,CAAC;AAC7B,UAAU,OAAO,KAAK,KAAK,CAAC,CAAC;AAC7B,QAAQ,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,WAAW,CAAC,GAAG,IAAI,CAAC;AACpD,OAAO,CAAC,CAAC;AACT,KAAK,EAAE,WAAW,CAAC,CAAC;AACpB,GAAG;AACH,EAAE,sBAAsB,CAAC,IAAI,EAAE,IAAI,EAAE;AACrC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;AACd,IAAI,IAAI,SAAS,GAAG,IAAI,CAAC;AACzB,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK;AAC3B,MAAM,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC;AACjD,MAAM,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,SAAS,CAAC,CAAC;AACxE,MAAM,CAAC,IAAI,SAAS,CAAC;AACrB,MAAM,SAAS,GAAG,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAC7C,KAAK,CAAC,CAAC;AACP,IAAI,OAAO,CAAC,CAAC;AACb,GAAG;AACH,EAAE,oBAAoB,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE;AACjD,IAAI,IAAI,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1B,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;AAC7B,MAAM,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AAClD,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;AAC7C,KAAK,MAAM;AACX,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC;AACnC,QAAQ,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;AACnC,KAAK;AACL,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;AAC9B,MAAM,CAAC,CAAC,gBAAgB,GAAG,CAAC,CAAC;AAC7B,MAAM,CAAC,CAAC,iBAAiB,GAAG,CAAC,CAAC;AAC9B,MAAM,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC;AACzB,KAAK,CAAC,CAAC;AACP,IAAI,IAAI,MAAM,GAAG,CAAC,CAAC;AACnB,IAAI,IAAI,YAAY,GAAG,CAAC,CAAC;AACzB,IAAI,IAAI,WAAW,GAAG,CAAC,CAAC;AACxB,IAAI,IAAI,YAAY,CAAC;AACrB,IAAI,IAAI,IAAI,CAAC;AACb,IAAI,KAAK,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,WAAW,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE;AACtD,MAAM,MAAM,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;AACjF,MAAM,IAAI,CAAC,CAAC,EAAE;AACd,QAAQ,MAAM;AACd,OAAO,MAAM;AACb,QAAQ,MAAM,IAAI,CAAC,CAAC,MAAM,CAAC;AAC3B,QAAQ,YAAY,IAAI,CAAC,CAAC,QAAQ,CAAC;AACnC,QAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;AACzF,QAAQ,WAAW,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC;AACzC,QAAQ,IAAI,IAAI,KAAK,CAAC,EAAE;AACxB,UAAU,YAAY,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;AAC5F,SAAS;AACT,OAAO;AACP,KAAK;AACL,IAAI,IAAI,IAAI,IAAI,CAAC;AACjB,MAAM,OAAO;AACb,QAAQ,MAAM,EAAE,OAAO;AACvB,QAAQ,SAAS,EAAE,IAAI;AACvB,QAAQ,OAAO,EAAE,EAAE;AACnB,QAAQ,QAAQ,EAAE,CAAC;AACnB,QAAQ,UAAU,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;AACrC,QAAQ,SAAS,EAAE,CAAC;AACpB,QAAQ,WAAW,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;AACtC,QAAQ,IAAI,EAAE,EAAE;AAChB,QAAQ,QAAQ,EAAE,CAAC;AACnB,QAAQ,cAAc,EAAE,CAAC;AACzB,QAAQ,gBAAgB,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;AAC3C,OAAO,CAAC;AACR,IAAI,IAAI,MAAM,CAAC;AACf,IAAI,IAAI,IAAI,GAAG,WAAW,CAAC,MAAM;AACjC,MAAM,MAAM,GAAG,SAAS,eAAe;AACvC;AACA,MAAM,MAAM,GAAG,SAAS,eAAe;AACvC,IAAI,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACnD,IAAI,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;AAC/C,IAAI,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,kBAAkB,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACvF,IAAI,OAAO,CAAC,MAAM,CAAC,QAAQ,IAAI,YAAY,EAAE,oBAAoB,CAAC,CAAC;AACnE,IAAI,IAAI,kBAAkB,EAAE;AAC5B,MAAM,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACtD,KAAK;AACL,IAAI,IAAI,SAAS,EAAE,WAAW,CAAC;AAC/B,IAAI,IAAI;AACR,MAAM,SAAS,GAAG,MAAM,GAAG,QAAQ,CAAC;AACpC,MAAM,WAAW,GAAG,YAAY,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG,SAAS,GAAG,YAAY,GAAG,KAAK,CAAC,CAAC;AACpF,KAAK,CAAC,OAAO,CAAC,EAAE;AAChB,KAAK;AACL,IAAI,OAAO;AACX,MAAM,MAAM;AACZ,MAAM,SAAS,EAAE,IAAI;AACrB,MAAM,OAAO,EAAE,EAAE;AACjB,MAAM,YAAY;AAClB,MAAM,SAAS;AACf,MAAM,WAAW;AACjB,MAAM,QAAQ,EAAE,QAAQ,GAAG,WAAW;AACtC,MAAM,UAAU,EAAE,YAAY,CAAC,QAAQ,GAAG,WAAW,CAAC;AACtD,MAAM,SAAS,EAAE,MAAM;AACvB,MAAM,WAAW,EAAE,YAAY,CAAC,MAAM,CAAC;AACvC,MAAM,IAAI;AACV,MAAM,QAAQ;AACd,MAAM,cAAc,EAAE,MAAM,GAAG,QAAQ,GAAG,MAAM,CAAC,QAAQ;AACzD,MAAM,gBAAgB,EAAE,YAAY,CAAC,MAAM,GAAG,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;AACzE,KAAK,CAAC;AACN,GAAG;AACH,EAAE,qBAAqB,CAAC,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE;AACnD,IAAI,IAAI,WAAW,GAAG,KAAK,EAAE,CAAC;AAC9B,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;AAC7B,MAAM,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AAClD,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;AAC7C,KAAK,MAAM;AACX,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC;AACnC,QAAQ,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;AACnC,KAAK;AACL,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;AAC9B,MAAM,CAAC,CAAC,gBAAgB,GAAG,CAAC,CAAC;AAC7B,MAAM,CAAC,CAAC,iBAAiB,GAAG,CAAC,CAAC;AAC9B,MAAM,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC;AACzB,KAAK,CAAC,CAAC;AACP,IAAI,IAAI,KAAK,GAAG,CAAC,CAAC;AAClB,IAAI,IAAI,YAAY,GAAG,CAAC,CAAC;AACzB,IAAI,IAAI,WAAW,GAAG,CAAC,CAAC;AACxB,IAAI,IAAI,YAAY,CAAC;AACrB,IAAI,IAAI,IAAI,CAAC;AACb,IAAI,KAAK,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,WAAW,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE;AACtD,MAAM,MAAM,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,EAAE,EAAE,SAAS,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;AACnF,MAAM,IAAI,CAAC,CAAC,EAAE;AACd,QAAQ,MAAM;AACd,OAAO,MAAM;AACb,QAAQ,KAAK,IAAI,CAAC,CAAC,KAAK,CAAC;AACzB,QAAQ,YAAY,IAAI,CAAC,CAAC,QAAQ,CAAC;AACnC,QAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;AACzF,QAAQ,WAAW,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC;AACzC,QAAQ,IAAI,IAAI,KAAK,CAAC,EAAE;AACxB,UAAU,YAAY,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;AAC5F,SAAS;AACT,OAAO;AACP,KAAK;AACL,IAAI,IAAI,IAAI,IAAI,CAAC;AACjB,MAAM,OAAO;AACb,QAAQ,MAAM,EAAE,OAAO;AACvB,QAAQ,SAAS,EAAE,IAAI;AACvB,QAAQ,OAAO,EAAE,EAAE;AACnB,QAAQ,QAAQ,EAAE,CAAC;AACnB,QAAQ,UAAU,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;AACrC,QAAQ,SAAS,EAAE,CAAC;AACpB,QAAQ,WAAW,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;AACtC,QAAQ,IAAI,EAAE,EAAE;AAChB,QAAQ,QAAQ,EAAE,CAAC;AACnB,QAAQ,cAAc,EAAE,CAAC;AACzB,QAAQ,gBAAgB,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;AAC3C,OAAO,CAAC;AACR,IAAI,IAAI,MAAM,CAAC;AACf,IAAI,IAAI,IAAI,GAAG,WAAW,CAAC,MAAM;AACjC,MAAM,MAAM,GAAG,SAAS,eAAe;AACvC;AACA,MAAM,MAAM,GAAG,SAAS,eAAe;AACvC,IAAI,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACnD,IAAI,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;AAC/C,IAAI,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,kBAAkB,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACvF,IAAI,OAAO,CAAC,MAAM,CAAC,QAAQ,IAAI,YAAY,EAAE,oBAAoB,CAAC,CAAC;AACnE,IAAI,IAAI,kBAAkB,EAAE;AAC5B,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACrD,KAAK;AACL,IAAI,IAAI,SAAS,EAAE,WAAW,CAAC;AAC/B,IAAI,IAAI;AACR,MAAM,SAAS,GAAG,SAAS,GAAG,KAAK,CAAC;AACpC,MAAM,WAAW,GAAG,YAAY,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG,SAAS,GAAG,YAAY,GAAG,KAAK,CAAC,CAAC;AACpF,KAAK,CAAC,OAAO,CAAC,EAAE;AAChB,KAAK;AACL,IAAI,OAAO;AACX,MAAM,MAAM;AACZ,MAAM,SAAS,EAAE,IAAI;AACrB,MAAM,OAAO,EAAE,EAAE;AACjB,MAAM,YAAY;AAClB,MAAM,SAAS;AACf,MAAM,WAAW;AACjB,MAAM,QAAQ,EAAE,KAAK;AACrB,MAAM,UAAU,EAAE,YAAY,CAAC,KAAK,CAAC;AACrC,MAAM,SAAS,EAAE,SAAS,GAAG,WAAW;AACxC,MAAM,WAAW,EAAE,YAAY,CAAC,SAAS,GAAG,WAAW,CAAC;AACxD,MAAM,IAAI;AACV,MAAM,QAAQ;AACd,MAAM,cAAc,EAAE,SAAS,GAAG,QAAQ,GAAG,MAAM,CAAC,QAAQ;AAC5D,MAAM,gBAAgB,EAAE,YAAY,CAAC,SAAS,GAAG,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;AAC5E,KAAK,CAAC;AACN,GAAG;AACH,EAAE,YAAY,CAAC,IAAI,EAAE,EAAE,EAAE;AACzB,IAAI,MAAM,EAAE,QAAQ,EAAE,kBAAkB,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AAC1E,IAAI,MAAM,IAAI,GAAG,EAAE,CAAC;AACpB,IAAI,IAAI,QAAQ,GAAG,CAAC,CAAC;AACrB,IAAI,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;AAC5B,MAAM,MAAM,QAAQ,GAAG,CAAC,CAAC,cAAc,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK;AACrD,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACvC,QAAQ,OAAO,KAAK,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3D,OAAO,CAAC,CAAC;AACT,MAAM,IAAI,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC7D,MAAM,IAAI,SAAS,IAAI,CAAC;AACxB,QAAQ,OAAO;AACf,MAAM,MAAM,KAAK,GAAG,SAAS,CAAC;AAC9B,MAAM,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK;AACjC,QAAQ,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,QAAQ,MAAM,QAAQ,GAAG,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC;AACvE,QAAQ,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,QAAQ,IAAI,CAAC,IAAI,CAAC;AAClB,UAAU,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO;AACxC,UAAU,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG;AAChC,UAAU,SAAS,EAAE,CAAC,CAAC,KAAK;AAC5B,UAAU,OAAO,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,KAAK;AAC3C,UAAU,eAAe,EAAE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,iBAAiB;AAC1F,UAAU,gBAAgB,EAAE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,gBAAgB;AAC3F,UAAU,WAAW,EAAE,QAAQ;AAC/B,UAAU,eAAe,EAAE,CAAC,GAAG,KAAK;AACpC,SAAS,CAAC,CAAC;AACX,QAAQ,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;AAC1C,QAAQ,SAAS,IAAI,CAAC,CAAC;AACvB,OAAO,CAAC,CAAC;AACT,MAAM,OAAO,CAAC,MAAM,CAAC,SAAS,GAAG,KAAK,GAAG,KAAK,EAAE,WAAW,CAAC,CAAC;AAC7D,KAAK,CAAC,CAAC;AACP,IAAI,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,kBAAkB,EAAE,CAAC;AAClD,GAAG;AACH,EAAE,QAAQ,CAAC,CAAC,EAAE;AACd,IAAI,IAAI,CAAC,CAAC,gBAAgB,KAAK,CAAC;AAChC,MAAM,OAAO,KAAK,CAAC,CAAC;AACpB,IAAI,OAAO,CAAC,CAAC,SAAS,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,gBAAgB,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,iBAAiB,EAAE,CAAC;AACxH,GAAG;AACH,EAAE,iBAAiB,CAAC,IAAI,EAAE,QAAQ,EAAE;AACpC,IAAI,MAAM,OAAO,mBAAmB,IAAI,GAAG,EAAE,CAAC;AAC9C,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AACrD,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;AACxB,MAAM,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AACxD,MAAM,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,KAAK,CAAC,EAAE,oBAAoB,CAAC,CAAC;AAC5D,MAAM,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,WAAW,CAAC,CAAC;AAC5E,MAAM,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,KAAK,CAAC,EAAE,oBAAoB,CAAC,CAAC;AAC5D,MAAM,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AAC7B,MAAM,MAAM,SAAS,GAAG,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC;AAC5C,MAAM,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AAC1D,MAAM,OAAO,CAAC,MAAM,CAAC,UAAU,KAAK,KAAK,CAAC,EAAE,oBAAoB,CAAC,CAAC;AAClE,MAAM,MAAM,KAAK,GAAG,UAAU,GAAG,CAAC,CAAC,WAAW,CAAC;AAC/C,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,UAAU,GAAG,KAAK,CAAC,CAAC;AAC3D,MAAM,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,GAAG,CAAC;AAC5D,MAAM,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAC7C,MAAM,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC7D,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,UAAU,IAAI,CAAC,IAAI,MAAM,CAAC,CAAC;AACtE,KAAK,CAAC,CAAC;AACP,IAAI,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACnE,GAAG;AACH,EAAE,gBAAgB,CAAC,IAAI,EAAE,SAAS,EAAE;AACpC,IAAI,MAAM,kBAAkB,mBAAmB,IAAI,GAAG,EAAE,CAAC;AACzD,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;AACxB,MAAM,MAAM,SAAS,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACzE,MAAM,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,SAAS,GAAG,CAAC,CAAC,gBAAgB,CAAC,CAAC;AAClF,KAAK,CAAC,CAAC;AACP,IAAI,MAAM,OAAO,mBAAmB,IAAI,GAAG,EAAE,CAAC;AAC9C,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;AAClE,IAAI,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;AAC/C,MAAM,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACxB,MAAM,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACtD,MAAM,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,KAAK,CAAC,EAAE,oBAAoB,CAAC,CAAC;AAC5D,MAAM,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,WAAW,CAAC,CAAC;AAC5E,MAAM,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,KAAK,CAAC,EAAE,oBAAoB,CAAC,CAAC;AAC5D,MAAM,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AAC7B,MAAM,MAAM,SAAS,GAAG,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC;AAC5C,MAAM,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACzD,MAAM,OAAO,CAAC,MAAM,CAAC,WAAW,KAAK,KAAK,CAAC,EAAE,oBAAoB,CAAC,CAAC;AACnE,MAAM,MAAM,YAAY,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AACvE,MAAM,OAAO,CAAC,MAAM,CAAC,YAAY,KAAK,KAAK,CAAC,EAAE,oBAAoB,CAAC,CAAC;AACpE,MAAM,MAAM,MAAM,GAAG,WAAW,GAAG,CAAC,CAAC,gBAAgB,GAAG,YAAY,CAAC;AACrE,MAAM,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,GAAG,CAAC;AAC5D,MAAM,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAC7C,MAAM,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC7D,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,UAAU,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC;AACrE,KAAK;AAEL,IAAI,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACvD,GAAG;AACH,EAAE,aAAa,CAAC,IAAI,EAAE,EAAE,EAAE;AAC1B,IAAI,IAAI,kBAAkB,GAAG,KAAK,CAAC;AACnC,IAAI,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AAC7C,IAAI,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;AAC7B,MAAM,kBAAkB,GAAG,IAAI,CAAC;AAChC,MAAM,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,oBAAoB,CAAC,CAAC;AAChE,MAAM,OAAO,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;AAClC,QAAQ,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAChD,QAAQ,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AAC7C,OAAO;AACP,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;AAC/B,QAAQ,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAC7C,QAAQ,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AAC7C,OAAO;AACP,MAAM,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,oBAAoB,CAAC,CAAC;AAChE,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;AAC7B,QAAQ,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE,kBAAkB,EAAE,CAAC;AACpD,KAAK;AACL,IAAI,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,kBAAkB,EAAE,CAAC;AAC7D,GAAG;AACH,EAAE,cAAc,CAAC,KAAK,EAAE;AACxB,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;AACzB,MAAM,CAAC,CAAC,aAAa,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;AACvC,QAAQ,CAAC,CAAC,SAAS,GAAG,KAAK,CAAC;AAC5B,OAAO,CAAC,CAAC;AACT,KAAK,CAAC,CAAC;AACP,GAAG;AACH,EAAE,iBAAiB,CAAC,KAAK,EAAE;AAC3B,IAAI,IAAI,OAAO,CAAC;AAChB,IAAI,IAAI,WAAW,CAAC;AACpB,IAAI,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;AACrC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK;AAC7B,MAAM,MAAM,EAAE,GAAG,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAClE,MAAM,IAAI,GAAG,GAAG,CAAC,CAAC;AAClB,MAAM,EAAE,CAAC,cAAc,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;AACzC,QAAQ,IAAI,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE;AACnC,UAAU,OAAO;AACjB,QAAQ,GAAG,IAAI,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,iBAAiB,GAAG,CAAC,CAAC,gBAAgB,CAAC;AACtE,OAAO,CAAC,CAAC;AACT,MAAM,IAAI,GAAG,GAAG,SAAS,EAAE;AAC3B,QAAQ,OAAO,GAAG,EAAE,CAAC;AACrB,QAAQ,WAAW,GAAG,EAAE,CAAC;AACzB,QAAQ,SAAS,GAAG,GAAG,CAAC;AACxB,OAAO;AACP,KAAK,CAAC,CAAC;AACP,IAAI,OAAO,CAAC,cAAc,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;AAC5C,MAAM,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,WAAW;AAC/C,QAAQ,OAAO;AACf,MAAM,CAAC,CAAC,SAAS,GAAG,KAAK,CAAC;AAC1B,KAAK,CAAC,CAAC;AACP,GAAG;AACH,EAAE,YAAY,CAAC,IAAI,EAAE,EAAE,EAAE;AACzB,IAAI,MAAM,SAAS,mBAAmB,IAAI,GAAG,EAAE,CAAC;AAChD,IAAI,MAAM,aAAa,GAAG,EAAE,CAAC;AAC7B,IAAI,MAAM,UAAU,GAAG,EAAE,CAAC;AAC1B,IAAI,MAAM,iBAAiB,GAAG,EAAE,CAAC;AACjC,IAAI,SAAS,gBAAgB,CAAC,OAAO,EAAE;AACvC,MAAM,MAAM,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAC3C,MAAM,IAAI,KAAK,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC;AACpC,QAAQ,OAAO,KAAK,CAAC;AACrB,MAAM,IAAI,KAAK,KAAK,CAAC,EAAE;AACvB,QAAQ,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC,EAAE,oBAAoB,CAAC,CAAC;AACrE,QAAQ,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACjC,QAAQ,OAAO,CAAC,CAAC;AACjB,OAAO;AACP,MAAM,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;AAChC,MAAM,IAAI,gBAAgB,GAAG,KAAK,CAAC;AACnC,MAAM,MAAM,QAAQ,GAAG,OAAO,CAAC,cAAc,EAAE,CAAC;AAChD,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AAChD,QAAQ,MAAM,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC9B,QAAQ,MAAM,IAAI,GAAG,gBAAgB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,QAAQ,IAAI,IAAI,KAAK,CAAC;AACtB,UAAU,OAAO,CAAC,CAAC;AACnB,QAAQ,IAAI,IAAI,KAAK,CAAC,EAAE;AACxB,UAAU,IAAI,UAAU,CAAC,CAAC,CAAC,KAAK,OAAO;AACvC,YAAY,OAAO,CAAC,CAAC;AACrB,eAAe;AACf,YAAY,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACrC,YAAY,OAAO,CAAC,CAAC;AACrB,WAAW;AACX,SAAS;AACT,QAAQ,IAAI,IAAI,KAAK,CAAC;AACtB,UAAU,gBAAgB,GAAG,IAAI,CAAC;AAClC,OAAO;AACP,MAAM,IAAI,gBAAgB,EAAE;AAC5B,QAAQ,OAAO,CAAC,MAAM,CAAC,OAAO,KAAK,EAAE,EAAE,oBAAoB,CAAC,CAAC;AAC7D,QAAQ,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACpC,QAAQ,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;AAClC,QAAQ,OAAO,CAAC,CAAC;AACjB,OAAO,MAAM;AACb,QAAQ,IAAI,OAAO,KAAK,EAAE,EAAE;AAC5B,UAAU,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC1C,UAAU,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;AACpC,UAAU,OAAO,CAAC,CAAC;AACnB,SAAS;AACT,QAAQ,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACpC,QAAQ,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;AAClC,QAAQ,OAAO,CAAC,CAAC;AACjB,OAAO;AACP,KAAK;AACL,IAAI,MAAM,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;AACvC,IAAI,IAAI,GAAG,KAAK,CAAC;AACjB,MAAM,OAAO,EAAE,MAAM,EAAE,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC;AACjD,IAAI,IAAI,iBAAiB,CAAC,MAAM;AAChC,MAAM,OAAO,EAAE,MAAM,EAAE,CAAC,EAAE,QAAQ,EAAE,iBAAiB,EAAE,CAAC;AACxD,IAAI,MAAM,CAAC,MAAM;AACjB,MAAM,IAAI,aAAa,CAAC,CAAC,CAAC,KAAK,EAAE;AACjC,QAAQ,OAAO,KAAK,CAAC;AACrB,MAAM,IAAI,aAAa,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI;AAC1D,QAAQ,OAAO,KAAK,CAAC;AACrB,MAAM,OAAO,IAAI,CAAC;AAClB,KAAK,EAAE,oBAAoB,CAAC,CAAC;AAC7B,IAAI,IAAI,GAAG,KAAK,CAAC;AACjB,MAAM,OAAO,EAAE,MAAM,EAAE,CAAC,EAAE,QAAQ,EAAE,aAAa,CAAC,OAAO,EAAE,EAAE,CAAC;AAC9D,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;AAC/C,IAAI,OAAO,EAAE,MAAM,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;AACvC,GAAG;AACH;;AC/6BA,SAAS,wBAAwB,CAAC,KAAK,EAAE;AACzC,EAAE,IAAI,KAAK,CAAC,YAAY,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,SAAS,KAAK,KAAK,CAAC,EAAE;AACnE,IAAI,OAAO,KAAK,CAAC,CAAC;AAClB,GAAG,MAAM;AACT,IAAI,IAAI,mBAAmB,GAAG,CAAC,CAAC;AAChC,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,mBAAmB,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC;AACpE,IAAI,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC,YAAY,GAAG,mBAAmB,CAAC,CAAC;AACvF,GAAG;AACH,CAAC;AACD,MAAM,iBAAiB,GAAG,EAAE,CAAC;AAC7B,MAAM,aAAa,GAAG,GAAG,CAAC;AAC1B,SAAS,kBAAkB,CAAC,eAAe,EAAE,QAAQ,EAAE,UAAU,EAAE;AACnE,EAAE,MAAM,WAAW,GAAG,wBAAwB,CAAC,eAAe,CAAC,CAAC;AAChE,EAAE,IAAI,CAAC,WAAW;AAClB,IAAI,OAAO,iBAAiB,CAAC;AAC7B,EAAE,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,IAAI,UAAU,IAAI,CAAC,CAAC,GAAG,QAAQ,GAAG,WAAW,CAAC,CAAC;AAC1G,EAAE,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,cAAc,CAAC,CAAC;AAC/D,EAAE,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC;AAC/B,IAAI,OAAO,aAAa,CAAC;AACzB,EAAE,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC,CAAC;AAC9E,EAAE,OAAO,cAAc,CAAC;AACxB,CAAC;AACD,SAAS,qBAAqB,CAAC,MAAM,EAAE,MAAM,EAAE;AAC/C,EAAE,IAAI,MAAM,CAAC,MAAM,IAAI,WAAW,CAAC,KAAK;AACxC,IAAI,OAAO,MAAM,CAAC;AAClB,EAAE,IAAI,MAAM,CAAC,MAAM,IAAI,WAAW,CAAC,KAAK;AACxC,IAAI,OAAO,MAAM,CAAC;AAClB,EAAE,IAAI,MAAM,CAAC,MAAM,IAAI,WAAW,CAAC,OAAO,IAAI,MAAM,CAAC,MAAM,IAAI,WAAW,CAAC,OAAO;AAClF,IAAI,OAAO,MAAM,CAAC;AAClB,EAAE,IAAI,MAAM,CAAC,MAAM,IAAI,WAAW,CAAC,OAAO,IAAI,MAAM,CAAC,MAAM,IAAI,WAAW,CAAC,OAAO;AAClF,IAAI,OAAO,MAAM,CAAC;AAClB,EAAE,OAAO,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,GAAG,MAAM,GAAG,MAAM,CAAC;AACzE,CAAC;AACM,SAAS,qBAAqB,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE;AAC7F,EAAE,IAAI,QAAQ,YAAY,SAAS,EAAE;AACrC,IAAI,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC7C,GAAG;AACH,EAAE,MAAM,CAAC,GAAG,IAAI,KAAK,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;AAClD,EAAE,MAAM,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC3C,EAAE,IAAI,KAAK,EAAE,KAAK,KAAK,CAAC,EAAE;AAC1B,IAAI,CAAC,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACnC,GAAG;AACH,EAAE,IAAI,KAAK,KAAK,KAAK,CAAC;AACtB,IAAI,OAAO,CAAC,CAAC,oBAAoB,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;AAC7D,EAAE,MAAM,SAAS,GAAG,CAAC,CAAC,oBAAoB,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;AAClE,EAAE,CAAC,CAAC,YAAY,EAAE,CAAC;AACnB,EAAE,MAAM,cAAc,GAAG,kBAAkB,CAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;AAClF,EAAE,IAAI,cAAc,KAAK,CAAC;AAC1B,IAAI,OAAO,SAAS,CAAC;AACrB,EAAE,MAAM,QAAQ,GAAG,CAAC,CAAC,oBAAoB,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;AAC9E,EAAE,OAAO,qBAAqB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;AACpD,CAAC;AACD,SAAS,sBAAsB,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE;AAC1D,EAAE,IAAI,MAAM,CAAC,MAAM,IAAI,WAAW,CAAC,KAAK;AACxC,IAAI,OAAO,MAAM,CAAC;AAClB,EAAE,IAAI,MAAM,CAAC,MAAM,IAAI,WAAW,CAAC,KAAK;AACxC,IAAI,OAAO,MAAM,CAAC;AAClB,EAAE,IAAI,MAAM,CAAC,MAAM,IAAI,WAAW,CAAC,OAAO,IAAI,MAAM,CAAC,MAAM,IAAI,WAAW,CAAC,OAAO;AAClF,IAAI,OAAO,MAAM,CAAC;AAClB,EAAE,IAAI,MAAM,CAAC,MAAM,IAAI,WAAW,CAAC,OAAO,IAAI,MAAM,CAAC,MAAM,IAAI,WAAW,CAAC,OAAO;AAClF,IAAI,OAAO,MAAM,CAAC;AAClB,EAAE,MAAM,cAAc,GAAG,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACtE,EAAE,MAAM,cAAc,GAAG,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACtE,EAAE,OAAO,cAAc,GAAG,cAAc,GAAG,MAAM,GAAG,MAAM,CAAC;AAC3D,CAAC;AACM,SAAS,sBAAsB,CAAC,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE;AAC/F,EAAE,IAAI,SAAS,YAAY,SAAS,EAAE;AACtC,IAAI,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC/C,GAAG;AACH,EAAE,MAAM,CAAC,GAAG,IAAI,KAAK,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;AAClD,EAAE,MAAM,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC3C,EAAE,IAAI,KAAK,EAAE,KAAK,KAAK,CAAC,EAAE;AAC1B,IAAI,CAAC,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACnC,GAAG;AACH,EAAE,IAAI,KAAK,KAAK,KAAK,CAAC;AACtB,IAAI,OAAO,CAAC,CAAC,qBAAqB,CAAC,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;AAC/D,EAAE,MAAM,QAAQ,GAAG,CAAC,CAAC,qBAAqB,CAAC,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;AACnE,EAAE,CAAC,CAAC,YAAY,EAAE,CAAC;AACnB,EAAE,MAAM,cAAc,GAAG,kBAAkB,CAAC,QAAQ,EAAE,QAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;AAC1F,EAAE,IAAI,cAAc,KAAK,CAAC;AAC1B,IAAI,OAAO,QAAQ,CAAC;AACpB,EAAE,MAAM,OAAO,GAAG,CAAC,CAAC,qBAAqB,CAAC,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;AAC/E,EAAE,OAAO,sBAAsB,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;AAC7D,CAAC;AACM,SAAS,sBAAsB,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE;AACvF,EAAE,MAAM,CAAC,GAAG,IAAI,KAAK,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;AAClD,EAAE,MAAM,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC3C,EAAE,IAAI,KAAK,EAAE,KAAK,KAAK,CAAC,EAAE;AAC1B,IAAI,CAAC,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACnC,GAAG;AACH,EAAE,IAAI,QAAQ,YAAY,SAAS,EAAE;AACrC,IAAI,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC7C,GAAG;AACH,EAAE,MAAM,GAAG,GAAG,CAAC,CAAC,oBAAoB,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;AAC5D,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AACM,SAAS,uBAAuB,CAAC,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE;AACzF,EAAE,MAAM,CAAC,GAAG,IAAI,KAAK,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;AAClD,EAAE,MAAM,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC3C,EAAE,IAAI,KAAK,EAAE,KAAK,KAAK,CAAC,EAAE;AAC1B,IAAI,CAAC,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACnC,GAAG;AACH,EAAE,IAAI,SAAS,YAAY,SAAS,EAAE;AACtC,IAAI,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC/C,GAAG;AACH,EAAE,MAAM,GAAG,GAAG,CAAC,CAAC,qBAAqB,CAAC,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;AAC9D,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AACM,SAAS,eAAe,CAAC,KAAK,EAAE,SAAS,EAAE;AAClD,EAAE,MAAM,CAAC,GAAG,IAAI,KAAK,CAAC,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;AAC3C,EAAE,MAAM,GAAG,mBAAmB,IAAI,GAAG,EAAE,CAAC;AACxC,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACvD,EAAE,OAAO,GAAG,CAAC;AACb;;AClHU,IAAC,QAAQ,mBAAmB,CAAC,CAAC,SAAS,KAAK;AACtD,EAAE,SAAS,CAAC,iBAAiB,CAAC,GAAG,iBAAiB,CAAC;AACnD,EAAE,SAAS,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC;AACrC,EAAE,SAAS,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;AACjC,EAAE,SAAS,CAAC,uBAAuB,CAAC,GAAG,uBAAuB,CAAC;AAC/D,EAAE,OAAO,SAAS,CAAC;AACnB,CAAC,EAAE,QAAQ,IAAI,EAAE,EAAE;AACZ,MAAM,IAAI,CAAC;AAClB,EAAE,OAAO,CAAC;AACV,EAAE,MAAM,CAAC;AACT,EAAE,MAAM,CAAC;AACT,EAAE,IAAI,CAAC;AACP,EAAE,QAAQ,CAAC;AACX,EAAE,QAAQ,CAAC;AACX,EAAE,GAAG,CAAC;AACN,EAAE,YAAY,CAAC;AACf,EAAE,WAAW,CAAC;AACd,EAAE,WAAW,CAAC,KAAK,EAAE;AACrB,IAAI,MAAM,IAAI,GAAG;AACjB,MAAM,YAAY,EAAE,GAAG;AACvB,MAAM,WAAW,EAAE,GAAG;AACtB,MAAM,GAAG,KAAK;AACd,KAAK,CAAC;AACN,IAAI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAChC,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAC9B,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAC9B,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AAC1B,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AAClC,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AAClC,IAAI,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;AACxB,IAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;AAC1C,IAAI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;AACxC,GAAG;AACH,CAAC;AACM,MAAM,oBAAoB,SAAS,IAAI,CAAC;AAC/C,EAAE,WAAW,CAAC,IAAI,EAAE;AACpB,IAAI,KAAK,CAAC;AACV,MAAM,IAAI,EAAE,iBAAiB;AAC7B,MAAM,GAAG,IAAI;AACb,KAAK,CAAC,CAAC;AACP,GAAG;AACH,CAAC;AACM,MAAM,WAAW,SAAS,IAAI,CAAC;AACtC,EAAE,CAAC,CAAC;AACJ,EAAE,WAAW,CAAC,IAAI,EAAE;AACpB,IAAI,KAAK,CAAC;AACV,MAAM,IAAI,EAAE,QAAQ;AACpB,MAAM,GAAG,IAAI;AACb,KAAK,CAAC,CAAC;AACP,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;AACpB,GAAG;AACH,CAAC;AACM,MAAM,aAAa,SAAS,IAAI,CAAC;AACxC,EAAE,OAAO,CAAC;AACV,EAAE,OAAO,CAAC;AACV,EAAE,WAAW,CAAC,IAAI,EAAE;AACpB,IAAI,KAAK,CAAC;AACV,MAAM,IAAI,EAAE,UAAU;AACtB,MAAM,GAAG,IAAI;AACb,KAAK,CAAC,CAAC;AACP,IAAI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAChC,IAAI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAChC,GAAG;AACH,CAAC;AACM,MAAM,0BAA0B,SAAS,IAAI,CAAC;AACrD,EAAE,SAAS,CAAC;AACZ,EAAE,SAAS,CAAC;AACZ,EAAE,WAAW,CAAC;AACd,EAAE,KAAK,CAAC;AACR,EAAE,WAAW,CAAC,IAAI,EAAE;AACpB,IAAI,KAAK,CAAC;AACV,MAAM,IAAI,EAAE,uBAAuB;AACnC,MAAM,QAAQ,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;AACjC,MAAM,QAAQ,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;AACjC,MAAM,GAAG,IAAI;AACb,KAAK,CAAC,CAAC;AACP,IAAI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AACpC,IAAI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AACpC,IAAI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;AACxC,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AAC5B,GAAG;AACH;;AC7EA,MAAM,WAAW,GAAG,GAAG,CAAC;AACxB,MAAM,QAAQ,mBAAmB,IAAI,GAAG,EAAE,CAAC;AACpC,SAAS,sBAAsB,CAAC,IAAI,EAAE;AAC7C,EAAE,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACjC,EAAE,IAAI,GAAG,KAAK,KAAK,CAAC;AACpB,IAAI,OAAO,GAAG,CAAC;AACf,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC3B,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC3B,EAAE,IAAI,EAAE,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,MAAM,EAAE,EAAE;AAClC,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,IAAI,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC7B,GAAG;AACH,EAAE,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AACvB,EAAE,MAAM,EAAE,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACxC,EAAE,IAAI,KAAK,CAAC;AACZ,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;AACZ,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAChC,IAAI,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACtD,IAAI,KAAK,GAAG,CAAC,CAAC;AACd,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/G,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;AACnC,MAAM,MAAM;AACZ,KAAK;AACL,GAAG;AACH,EAAE,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AACxB,EAAE,OAAO,CAAC,CAAC;AACX,CAAC;AACM,SAAS,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE;AACpC,EAAE,MAAM,CAAC,GAAG,sBAAsB,CAAC,IAAI,CAAC,CAAC;AACzC,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AACxB,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,WAAW,CAAC,CAAC;AAClE,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC5C,EAAE,IAAI,KAAK,CAAC;AACZ,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;AACZ,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAChC,IAAI,KAAK,GAAG,CAAC,CAAC;AACd,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;AACnC,MAAM,MAAM;AACZ,KAAK;AACL,GAAG;AACH,EAAE,OAAO,CAAC,CAAC;AACX,CAAC;AACM,SAAS,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE,SAAS,GAAG,IAAI,EAAE;AAC9D,EAAE,MAAM,GAAG,GAAG,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AACxD,EAAE,MAAM,GAAG,GAAG,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AACxD,EAAE,QAAQ,IAAI,CAAC,IAAI;AACnB,IAAI,KAAK,QAAQ,CAAC,eAAe,EAAE;AACnC,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;AACzC,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;AACzC,MAAM,OAAO,CAAC,GAAG,QAAQ,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAC;AAC5D,KAAK;AACL,IAAI,KAAK,QAAQ,CAAC,QAAQ,EAAE;AAC5B,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;AACzC,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;AACzC,MAAM,MAAM,KAAK,GAAG,IAAI,CAAC;AACzB,MAAM,MAAM,WAAW,GAAG,SAAS,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;AACpG,MAAM,MAAM,QAAQ,GAAG,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;AACjD,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC;AACtE,MAAM,OAAO,GAAG,CAAC;AACjB,KAAK;AACL,IAAI,KAAK,QAAQ,CAAC,MAAM,EAAE;AAC1B,MAAM,MAAM,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACtE,MAAM,MAAM,MAAM,GAAG,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAC9C,MAAM,MAAM,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;AACtD,MAAM,OAAO,EAAE,CAAC;AAChB,KAAK;AACL,GAAG;AACH,EAAE,OAAO,CAAC,CAAC,CAAC;AACZ,CAAC;AACM,MAAM,cAAc,SAAS,KAAK,CAAC;AAC1C,CAAC;AACM,SAAS,WAAW,CAAC,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE;AACxD,EAAE,IAAI,KAAK,GAAG,CAAC,CAAC;AAChB,EAAE,MAAM,GAAG,GAAG,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AACxD,EAAE,MAAM,GAAG,GAAG,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AACxD,EAAE,QAAQ,IAAI,CAAC,IAAI;AACnB,IAAI,KAAK,QAAQ,CAAC,eAAe,EAAE;AACnC,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;AACzC,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;AACzC,MAAM,KAAK,GAAG,CAAC,GAAG,SAAS,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC;AAC/D,MAAM,MAAM;AACZ,KAAK;AACL,IAAI,KAAK,QAAQ,CAAC,QAAQ,EAAE;AAC5B,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;AACzC,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;AACzC,MAAM,MAAM,KAAK,GAAG,IAAI,CAAC;AACzB,MAAM,MAAM,WAAW,GAAG,SAAS,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;AACpG,MAAM,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;AACnF,MAAM,MAAM;AACZ,KAAK;AACL,IAAI,KAAK,QAAQ,CAAC,MAAM,EAAE;AAC1B,MAAM,IAAI,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC;AACpD,MAAM,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;AACtB,QAAQ,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACnC,MAAM,MAAM,MAAM,GAAG,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAC9C,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AAChF,MAAM,MAAM;AACZ,KAAK;AACL,IAAI;AACJ,MAAM,OAAO,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;AACzC,GAAG;AACH,EAAE,IAAI,KAAK,GAAG,CAAC;AACf,IAAI,KAAK,GAAG,CAAC,CAAC;AACd,EAAE,OAAO,KAAK,CAAC;AACf,CAAC;AACM,SAAS,SAAS,CAAC,IAAI,EAAE,QAAQ,EAAE,kBAAkB,GAAG,IAAI,EAAE;AACrE,EAAE,MAAM,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;AAChD,EAAE,MAAM,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;AAChD,EAAE,MAAM,WAAW,GAAG,kBAAkB,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;AAC5D,EAAE,QAAQ,IAAI,CAAC,IAAI;AACnB,IAAI,KAAK,QAAQ,CAAC,eAAe,EAAE;AACnC,MAAM,MAAM,CAAC,GAAG,EAAE,GAAG,WAAW,CAAC;AACjC,MAAM,OAAO,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC;AACtD,KAAK;AACL,IAAI,KAAK,QAAQ,CAAC,QAAQ,EAAE;AAC5B,MAAM,MAAM,KAAK,GAAG,IAAI,CAAC;AACzB,MAAM,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;AACxD,MAAM,MAAM,CAAC,GAAG,EAAE,GAAG,QAAQ,GAAG,WAAW,CAAC;AAC5C,MAAM,OAAO,EAAE,GAAG,WAAW,GAAG,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC;AAChF,KAAK;AACL,IAAI,KAAK,QAAQ,CAAC,MAAM,EAAE;AAC1B,MAAM,MAAM,KAAK,GAAG,IAAI,CAAC;AACzB,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;AACnE,MAAM,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,WAAW,CAAC;AACtC,MAAM,MAAM,CAAC,GAAG,EAAE,GAAG,QAAQ,CAAC;AAC9B,MAAM,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAC1C,MAAM,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAChC,MAAM,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAChD,MAAM,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,WAAW,CAAC;AACnE,MAAM,OAAO,GAAG,CAAC;AACjB,KAAK;AACL,GAAG;AACH,EAAE,OAAO,CAAC,CAAC;AACX,CAAC;AACD,SAAS,4BAA4B,CAAC,IAAI,EAAE,KAAK,EAAE;AACnD,EAAE,MAAM,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;AAChD,EAAE,MAAM,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;AAChD,EAAE,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAClD,EAAE,MAAM,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,WAAW,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;AAClF,EAAE,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,WAAW,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;AACpE,CAAC;AACM,SAAS,gBAAgB,CAAC,IAAI,EAAE,cAAc,EAAE,IAAI,GAAG,CAAC,EAAE;AACjE,EAAE,QAAQ,IAAI,CAAC,IAAI;AACnB,IAAI,KAAK,QAAQ,CAAC,eAAe,EAAE;AACnC,MAAM,MAAM,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;AACpD,MAAM,MAAM,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;AACpD,MAAM,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;AACpC,MAAM,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;AACzD,MAAM,OAAO,GAAG,CAAC;AACjB,KAAK;AACL,IAAI,KAAK,QAAQ,CAAC,QAAQ,EAAE;AAC5B,MAAM,MAAM,GAAG,GAAG,4BAA4B,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;AACrE,MAAM,OAAO,GAAG,CAAC;AACjB,KAAK;AACL,IAAI,KAAK,QAAQ,CAAC,MAAM,EAAE;AAC1B,MAAM,OAAO,cAAc,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;AACjF,KAAK;AACL,GAAG;AACH,EAAE,OAAO,CAAC,CAAC;AACX;;;;"}