{"version":3,"file":"index.js","sources":["../src/Utils.ts","../src/PrimaryPools.ts","../src/CLPool.ts","../src/Graph.ts","../src/MultiRouter.ts","../src/ParallelCPRPool.ts","../src/Redistributor.ts","../src/StableSwapPool.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber/lib.esm/index.js';\n\nexport function ASSERT(f: () => boolean, t?: string) {\n  if (process.env.NODE_ENV !== 'production' && (!f() && t)) console.error(t)\n}\n\nlet DEBUG_MODE = false\nexport function DEBUG(f: () => unknown) {\n  if (DEBUG_MODE) f()\n}\nexport function DEBUG_MODE_ON(on: boolean) {\n  DEBUG_MODE = on\n}\n\nexport function closeValues(a: number, b: number, accuracy: number, logInfoIfFalse = ''): boolean {\n  if (accuracy === 0) return a === b\n  if (Math.abs(a) < 1 / accuracy) return Math.abs(a - b) <= 10\n  const res = Math.abs(a / b - 1) < accuracy\n  if (!res && logInfoIfFalse) {\n    console.log('Expected close: ', a, b, accuracy, logInfoIfFalse)\n    // debugger\n  }\n  return res\n}\n\nexport function calcSquareEquation(a: number, b: number, c: number): [number, number] {\n  const D = b * b - 4 * a * c\n  console.assert(D >= 0, `Discriminant is negative! ${a} ${b} ${c}`)\n  const sqrtD = Math.sqrt(D)\n  return [(-b - sqrtD) / 2 / a, (-b + sqrtD) / 2 / a]\n}\n\n// returns such x > 0 that f(x) = out or 0 if there is no such x or f defined not everywhere\n// hint - approximation of x to speed up the algorithm\n// f assumed to be continues monotone growth function defined everywhere\nexport function revertPositive(f: (x: number) => number, out: number, hint = 1) {\n  try {\n    if (out <= f(0)) return 0\n    let min: number;\n    let max: any;\n    if (f(hint) > out) {\n      min = hint / 2\n      while (f(min) > out) min /= 2\n      max = min * 2\n    } else {\n      max = hint * 2\n      while (f(max) < out) max *= 2\n      min = max / 2\n    }\n\n    while (max / min - 1 > 1e-4) {\n      const x0: number = (min + max) / 2\n      const y0 = f(x0)\n      if (out === y0) return x0\n      if (out < y0) max = x0\n      else min = x0\n    }\n    return (min + max) / 2\n  } catch (e) {\n    return 0\n  }\n}\n\nexport function getBigNumber(value: number): BigNumber {\n  const v = Math.abs(value)\n  if (v < Number.MAX_SAFE_INTEGER) return BigNumber.from(Math.round(value))\n\n  const exp = Math.floor(Math.log(v) / Math.LN2)\n  console.assert(exp >= 51, 'Internal Error 314')\n  const shift = exp - 51\n  const mant = Math.round(v / 2 ** shift)\n  const res = BigNumber.from(mant).mul(BigNumber.from(2).pow(shift))\n  return value > 0 ? res : res.mul(-1)\n}\n","import { BigNumber } from '@ethersproject/bignumber/lib.esm/index.js';\n\nimport { getBigNumber, revertPositive } from './Utils'\n\nexport const TYPICAL_SWAP_GAS_COST = 60_000\nexport const TYPICAL_MINIMAL_LIQUIDITY = 1000\n\nexport interface RToken {\n  name: string\n  symbol: string\n  address: string\n}\n\nexport abstract class RPool {\n  readonly address: string\n  readonly token0: RToken\n  readonly token1: RToken\n  readonly fee: number\n  reserve0: BigNumber\n  reserve1: BigNumber\n  readonly minLiquidity: number\n  readonly swapGasCost: number\n\n  constructor(\n    address: string,\n    token0: RToken,\n    token1: RToken,\n    fee: number,\n    reserve0: BigNumber,\n    reserve1: BigNumber,\n    minLiquidity = TYPICAL_MINIMAL_LIQUIDITY,\n    swapGasCost = TYPICAL_SWAP_GAS_COST\n  ) {\n    this.address = address\n    ;(this.token0 = token0), (this.token1 = token1)\n    this.fee = fee\n    this.minLiquidity = minLiquidity\n    this.swapGasCost = swapGasCost\n    this.reserve0 = reserve0\n    this.reserve1 = reserve1\n  }\n\n  updateReserves(res0: BigNumber, res1: BigNumber) {\n    this.reserve0 = res0\n    this.reserve1 = res1\n  }\n  getReserve0() {\n    return this.reserve0\n  }\n  getReserve1() {\n    return this.reserve1\n  }\n\n  // Returns [<output amount>, <gas consumption estimation>]\n  abstract calcOutByIn(amountIn: number, direction: boolean): { out: number; gasSpent: number }\n  abstract calcInByOut(amountOut: number, direction: boolean): { inp: number; gasSpent: number }\n  abstract calcCurrentPriceWithoutFee(direction: boolean): number\n\n  // precision of calcOutByIn\n  granularity0() {\n    return 1\n  }\n  granularity1() {\n    return 1\n  }\n}\n\nexport class ConstantProductRPool extends RPool {\n  reserve0Number: number\n  reserve1Number: number\n\n  constructor(address: string, token0: RToken, token1: RToken, fee: number, reserve0: BigNumber, reserve1: BigNumber) {\n    super(address, token0, token1, fee, reserve0, reserve1)\n    this.reserve0Number = parseInt(reserve0.toString())\n    this.reserve1Number = parseInt(reserve1.toString())\n  }\n\n  updateReserves(res0: BigNumber, res1: BigNumber) {\n    this.reserve0 = res0\n    this.reserve0Number = parseInt(res0.toString())\n    this.reserve1 = res1\n    this.reserve1Number = parseInt(res1.toString())\n  }\n\n  calcOutByIn(amountIn: number, direction: boolean): { out: number; gasSpent: number } {\n    const x = direction ? this.reserve0Number : this.reserve1Number\n    const y = direction ? this.reserve1Number : this.reserve0Number\n    return { out: (y * amountIn) / (x / (1 - this.fee) + amountIn), gasSpent: this.swapGasCost }\n  }\n\n  calcInByOut(amountOut: number, direction: boolean): { inp: number; gasSpent: number } {\n    const x = direction ? this.reserve0Number : this.reserve1Number\n    const y = direction ? this.reserve1Number : this.reserve0Number\n    if (y - amountOut < this.minLiquidity)\n      // not possible swap\n      return { inp: Number.POSITIVE_INFINITY, gasSpent: this.swapGasCost }\n\n    const input = (x * amountOut) / (1 - this.fee) / (y - amountOut)\n    return { inp: input, gasSpent: this.swapGasCost }\n  }\n\n  calcCurrentPriceWithoutFee(direction: boolean): number {\n    return this.calcPrice(0, direction, false)\n  }\n\n  calcPrice(amountIn: number, direction: boolean, takeFeeIntoAccount: boolean): number {\n    const x = direction ? this.reserve0Number : this.reserve1Number\n    const y = direction ? this.reserve1Number : this.reserve0Number\n    const oneMinusFee = takeFeeIntoAccount ? 1 - this.fee : 1\n    const xf = x / oneMinusFee\n    return (y * xf) / (xf + amountIn) / (xf + amountIn)\n  }\n\n  calcInputByPrice(price: number, direction: boolean, takeFeeIntoAccount: boolean): number {\n    const x = direction ? this.reserve0Number : this.reserve1Number\n    const y = direction ? this.reserve1Number : this.reserve0Number\n    const oneMinusFee = takeFeeIntoAccount ? 1 - this.fee : 1\n    const xf = x / oneMinusFee\n    return Math.sqrt(y * xf * price) - xf // TODO: or y*xf/price ???\n  }\n\n  getLiquidity() {\n    return Math.sqrt(this.reserve0Number * this.reserve1Number)\n  }\n}\n\nexport class HybridRPool extends RPool {\n  readonly A: number\n  readonly A_PRECISION = 100\n  D: BigNumber // set it to 0 if reserves are changed !!\n\n  constructor(\n    address: string,\n    token0: RToken,\n    token1: RToken,\n    fee: number,\n    A: number,\n    reserve0: BigNumber,\n    reserve1: BigNumber\n  ) {\n    super(address, token0, token1, fee, reserve0, reserve1)\n    this.A = A\n    this.D = BigNumber.from(0)\n  }\n\n  updateReserves(res0: BigNumber, res1: BigNumber) {\n    this.D = BigNumber.from(0)\n    this.reserve0 = res0\n    this.reserve1 = res1\n  }\n\n  computeLiquidity(): BigNumber {\n    if (!this.D.eq(0)) return this.D // already calculated\n\n    const r0 = this.reserve0\n    const r1 = this.reserve1\n\n    if (r0.isZero() && r1.isZero()) return BigNumber.from(0)\n\n    const s = r0.add(r1)\n    const nA = BigNumber.from(this.A * 2)\n    let prevD\n    let D = s\n    for (let i = 0; i < 256; i++) {\n      const dP = D.mul(D).div(r0).mul(D).div(r1).div(4)\n      prevD = D\n      D = nA\n        .mul(s)\n        .div(this.A_PRECISION)\n        .add(dP.mul(2))\n        .mul(D)\n        .div(nA.div(this.A_PRECISION).sub(1).mul(D).add(dP.mul(3)))\n      if (D.sub(prevD).abs().lte(1)) {\n        break\n      }\n    }\n    this.D = D\n    return D\n  }\n\n  computeY(x: BigNumber): BigNumber {\n    const D = this.computeLiquidity()\n\n    const nA = this.A * 2\n\n    const c = D.mul(D)\n      .div(x.mul(2))\n      .mul(D)\n      .div((nA * 2) / this.A_PRECISION)\n    const b = D.mul(this.A_PRECISION).div(nA).add(x)\n\n    let yPrev\n    let y = D\n    for (let i = 0; i < 256; i++) {\n      yPrev = y\n\n      y = y.mul(y).add(c).div(y.mul(2).add(b).sub(D))\n      if (y.sub(yPrev).abs().lte(1)) {\n        break\n      }\n    }\n    return y\n  }\n\n  calcOutByIn(amountIn: number, direction: boolean): { out: number; gasSpent: number } {\n    const xBN = direction ? this.reserve0 : this.reserve1\n    const yBN = direction ? this.reserve1 : this.reserve0\n    const xNewBN = xBN.add(getBigNumber(amountIn * (1 - this.fee)))\n    const yNewBN = this.computeY(xNewBN)\n    const dy = parseInt(yBN.sub(yNewBN).toString())\n\n    return { out: dy, gasSpent: this.swapGasCost }\n  }\n\n  calcInByOut(amountOut: number, direction: boolean): { inp: number; gasSpent: number } {\n    const xBN = direction ? this.reserve0 : this.reserve1\n    const yBN = direction ? this.reserve1 : this.reserve0\n    let yNewBN = yBN.sub(getBigNumber(amountOut))\n    if (yNewBN.lt(1))\n      // lack of precision\n      yNewBN = BigNumber.from(1)\n\n    const xNewBN = this.computeY(yNewBN)\n    const input = Math.round(parseInt(xNewBN.sub(xBN).toString()) / (1 - this.fee))\n\n    //if (input < 1) input = 1\n    return { inp: input, gasSpent: this.swapGasCost }\n  }\n\n  calcCurrentPriceWithoutFee(direction: boolean): number {\n    return this.calcPrice(0, direction, false)\n  }\n\n  calcPrice(amountIn: number, direction: boolean, takeFeeIntoAccount: boolean): number {\n    const xBN = direction ? this.reserve0 : this.reserve1\n    const x = parseInt(xBN.toString())\n    const oneMinusFee = takeFeeIntoAccount ? 1 - this.fee : 1\n    const D = parseInt(this.computeLiquidity().toString())\n    const A = this.A / this.A_PRECISION\n    const xI = x + amountIn\n    const b = 4 * A * xI + D - 4 * A * D\n    const ac4 = (D * D * D) / xI\n    const Ds = Math.sqrt(b * b + 4 * A * ac4)\n    const res = (0.5 - (2 * b - ac4 / xI) / Ds / 4) * oneMinusFee\n    return res\n  }\n\n  calcInputByPrice(price: number, direction: boolean, takeFeeIntoAccount: boolean, hint = 1): number {\n    // TODO:  (x:number) => this.calcPrice(x, !direction, takeFeeIntoAccount)  ???\n    return revertPositive((x: number) => 1 / this.calcPrice(x, direction, takeFeeIntoAccount), price, hint)\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber/lib.esm/index.js';;\n\nimport { RPool, TYPICAL_MINIMAL_LIQUIDITY, TYPICAL_SWAP_GAS_COST } from './PrimaryPools';\nimport type { RToken } from './PrimaryPools';\n\nexport const CL_MIN_TICK = -887_272\nexport const CL_MAX_TICK = -CL_MIN_TICK - 1\n\nexport interface CLTick {\n  index: number\n  DLiquidity: number\n}\n\nexport class CLRPool extends RPool {\n  tickSpacing: number\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n\n  constructor(\n    address: string,\n    token0: RToken,\n    token1: RToken,\n    fee: number,\n    tickSpacing: number,\n    reserve0: BigNumber,\n    reserve1: BigNumber,\n    liquidity: number,\n    sqrtPrice: number,\n    nearestTick: number,\n    ticks: CLTick[]\n  ) {\n    super(address, token0, token1, fee, reserve0, reserve1, TYPICAL_MINIMAL_LIQUIDITY, TYPICAL_SWAP_GAS_COST)\n    this.tickSpacing = tickSpacing\n    this.liquidity = liquidity\n    this.sqrtPrice = sqrtPrice\n    this.nearestTick = nearestTick\n    this.ticks = ticks\n    if (this.ticks.length === 0) {\n      this.ticks.push({ index: CL_MIN_TICK, DLiquidity: 0 })\n      this.ticks.push({ index: CL_MAX_TICK, DLiquidity: 0 })\n    }\n    if (this.ticks[0].index > CL_MIN_TICK) this.ticks.unshift({ index: CL_MIN_TICK, DLiquidity: 0 })\n    if (this.ticks[this.ticks.length - 1].index < CL_MAX_TICK) this.ticks.push({ index: CL_MAX_TICK, DLiquidity: 0 })\n  }\n\n  calcOutByIn(amountIn: number, direction: boolean): { out: number; gasSpent: number } {\n    let nextTickToCross = direction ? this.nearestTick : this.nearestTick + 1\n    let currentPrice = this.sqrtPrice\n    let currentLiquidity = this.liquidity\n    let outAmount = 0\n    let input = amountIn\n\n    while (input > 0) {\n      if (nextTickToCross < 0 || nextTickToCross >= this.ticks.length)\n        return { out: outAmount, gasSpent: this.swapGasCost }\n\n      const nextTickPrice = Math.sqrt(Math.pow(1.0001, this.ticks[nextTickToCross].index))\n      // console.log('L, P, tick, nextP', currentLiquidity,\n      //     currentPrice, this.ticks[nextTickToCross].index, nextTickPrice);\n      let output = 0\n\n      if (direction) {\n        const maxDx = (currentLiquidity * (currentPrice - nextTickPrice)) / currentPrice / nextTickPrice\n        //console.log('input, maxDx', input, maxDx);\n\n        if (input <= maxDx) {\n          output = (currentLiquidity * currentPrice * input) / (input + currentLiquidity / currentPrice)\n          input = 0\n        } else {\n          output = currentLiquidity * (currentPrice - nextTickPrice)\n          currentPrice = nextTickPrice\n          input -= maxDx\n          if ((this.ticks[nextTickToCross].index / this.tickSpacing) % 2 === 0) {\n            currentLiquidity -= this.ticks[nextTickToCross].DLiquidity\n          } else {\n            currentLiquidity += this.ticks[nextTickToCross].DLiquidity\n          }\n          nextTickToCross--\n        }\n      } else {\n        const maxDy = currentLiquidity * (nextTickPrice - currentPrice)\n        //console.log('input, maxDy', input, maxDy);\n        if (input <= maxDy) {\n          output = input / currentPrice / (currentPrice + input / currentLiquidity)\n          input = 0\n        } else {\n          output = (currentLiquidity * (nextTickPrice - currentPrice)) / currentPrice / nextTickPrice\n          currentPrice = nextTickPrice\n          input -= maxDy\n          if ((this.ticks[nextTickToCross].index / this.tickSpacing) % 2 === 0) {\n            currentLiquidity += this.ticks[nextTickToCross].DLiquidity\n          } else {\n            currentLiquidity -= this.ticks[nextTickToCross].DLiquidity\n          }\n          nextTickToCross++\n        }\n      }\n\n      outAmount += output * (1 - this.fee)\n      //console.log('out', outAmount);\n    }\n\n    return { out: outAmount, gasSpent: this.swapGasCost } // TODO: more accurate gas prediction\n  }\n\n  calcInByOut(amountOut: number, direction: boolean): { inp: number; gasSpent: number } {\n    let nextTickToCross = direction ? this.nearestTick : this.nearestTick + 1\n    let currentPrice = this.sqrtPrice\n    let currentLiquidity = this.liquidity\n    let input = 0\n    let outBeforeFee = amountOut / (1 - this.fee)\n\n    while (outBeforeFee > 0) {\n      if (nextTickToCross < 0 || nextTickToCross >= this.ticks.length) return { inp: input, gasSpent: this.swapGasCost }\n\n      const nextTickPrice = Math.sqrt(Math.pow(1.0001, this.ticks[nextTickToCross].index))\n      // console.log('L, P, tick, nextP', currentLiquidity,\n      //     currentPrice, this.ticks[nextTickToCross].index, nextTickPrice);\n\n      if (direction) {\n        const maxDy = currentLiquidity * (currentPrice - nextTickPrice)\n        //console.log('input, maxDy', input, maxDy);\n        if (outBeforeFee <= maxDy) {\n          input += outBeforeFee / currentPrice / (currentPrice - outBeforeFee / currentLiquidity)\n          outBeforeFee = 0\n        } else {\n          input += (currentLiquidity * (currentPrice - nextTickPrice)) / currentPrice / nextTickPrice\n          currentPrice = nextTickPrice\n          outBeforeFee -= maxDy\n          if ((this.ticks[nextTickToCross].index / this.tickSpacing) % 2 === 0) {\n            currentLiquidity -= this.ticks[nextTickToCross].DLiquidity\n          } else {\n            currentLiquidity += this.ticks[nextTickToCross].DLiquidity\n          }\n          nextTickToCross--\n        }\n      } else {\n        const maxDx = (currentLiquidity * (nextTickPrice - currentPrice)) / currentPrice / nextTickPrice\n        //console.log('outBeforeFee, maxDx', outBeforeFee, maxDx);\n\n        if (outBeforeFee <= maxDx) {\n          input += (currentLiquidity * currentPrice * outBeforeFee) / (currentLiquidity / currentPrice - outBeforeFee)\n          outBeforeFee = 0\n        } else {\n          input += currentLiquidity * (nextTickPrice - currentPrice)\n          currentPrice = nextTickPrice\n          outBeforeFee -= maxDx\n          if ((this.ticks[nextTickToCross].index / this.tickSpacing) % 2 === 0) {\n            currentLiquidity += this.ticks[nextTickToCross].DLiquidity\n          } else {\n            currentLiquidity -= this.ticks[nextTickToCross].DLiquidity\n          }\n          nextTickToCross++\n        }\n      }\n    }\n\n    return { inp: input, gasSpent: this.swapGasCost }\n  }\n\n  calcCurrentPriceWithoutFee(direction: boolean): number {\n    const p = this.sqrtPrice * this.sqrtPrice\n    return direction ? p : 1 / p\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber/lib.esm/index.js';;\n\nimport { RPool } from './PrimaryPools';\nimport { ASSERT, closeValues, DEBUG, getBigNumber } from './Utils';\nimport type { RToken } from './PrimaryPools';\n\n// Routing info about each one swap\nexport interface RouteLeg {\n  poolAddress: string // which pool use for swap\n  poolFee: number\n\n  tokenFrom: RToken // from what token to swap\n  tokenTo: RToken // to what token\n\n  assumedAmountIn: number // assumed number of input token for swapping\n  assumedAmountOut: number // assumed number of output token after swapping\n\n  swapPortion: number // for router contract\n  absolutePortion: number // to depict at webpage for user\n}\n\nexport enum RouteStatus {\n  Success = 'Success',\n  NoWay = 'NoWay',\n  Partial = 'Partial',\n}\n\nexport interface MultiRoute {\n  status: RouteStatus\n  fromToken: RToken\n  toToken: RToken\n  primaryPrice?: number\n  swapPrice?: number\n  priceImpact?: number\n  amountIn: number\n  amountInBN: BigNumber\n  amountOut: number\n  amountOutBN: BigNumber\n  legs: RouteLeg[]\n  gasSpent: number\n  totalAmountOut: number\n  totalAmountOutBN: BigNumber\n}\n\nexport class Edge {\n  pool: RPool\n  vert0: Vertice\n  vert1: Vertice\n\n  canBeUsed: boolean\n  direction: boolean\n  amountInPrevious: number // How many liquidity were passed from vert0 to vert1\n  amountOutPrevious: number // How many liquidity were passed from vert0 to vert1\n  spentGas: number // How much gas was spent for this edge\n  spentGasNew: number //  How much gas was will be spent for this edge\n  bestEdgeIncome: number // debug data\n\n  constructor(p: RPool, v0: Vertice, v1: Vertice) {\n    this.pool = p\n    this.vert0 = v0\n    this.vert1 = v1\n    this.amountInPrevious = 0\n    this.amountOutPrevious = 0\n    this.canBeUsed = true\n    this.direction = true\n    this.spentGas = 0\n    this.spentGasNew = 0\n    this.bestEdgeIncome = 0\n  }\n\n  cleanTmpData() {\n    this.amountInPrevious = 0\n    this.amountOutPrevious = 0\n    this.canBeUsed = true\n    this.direction = true\n    this.spentGas = 0\n    this.spentGasNew = 0\n    this.bestEdgeIncome = 0\n  }\n\n  reserve(v: Vertice): BigNumber {\n    return v === this.vert0 ? this.pool.getReserve0() : this.pool.getReserve1()\n  }\n\n  calcOutput(v: Vertice, amountIn: number): { out: number; gasSpent: number } {\n    let res, gas\n    if (v === this.vert1) {\n      if (this.direction) {\n        if (amountIn < this.amountOutPrevious) {\n          const { inp, gasSpent } = this.pool.calcInByOut(this.amountOutPrevious - amountIn, true)\n          res = this.amountInPrevious - inp\n          gas = gasSpent\n        } else {\n          const { out, gasSpent } = this.pool.calcOutByIn(amountIn - this.amountOutPrevious, false)\n          res = out + this.amountInPrevious\n          gas = gasSpent\n        }\n      } else {\n        const { out, gasSpent } = this.pool.calcOutByIn(this.amountOutPrevious + amountIn, false)\n        res = out - this.amountInPrevious\n        gas = gasSpent\n      }\n    } else {\n      if (this.direction) {\n        const { out, gasSpent } = this.pool.calcOutByIn(this.amountInPrevious + amountIn, true)\n        res = out - this.amountOutPrevious\n        gas = gasSpent\n      } else {\n        if (amountIn < this.amountInPrevious) {\n          const { inp, gasSpent } = this.pool.calcInByOut(this.amountInPrevious - amountIn, false)\n          res = this.amountOutPrevious - inp\n          gas = gasSpent\n        } else {\n          const { out, gasSpent } = this.pool.calcOutByIn(amountIn - this.amountInPrevious, true)\n          res = out + this.amountOutPrevious\n          gas = gasSpent\n        }\n      }\n    }\n\n    // this.testApply(v, amountIn, out);\n\n    return { out: res, gasSpent: gas - this.spentGas }\n  }\n\n  calcInput(v: Vertice, amountOut: number): { inp: number; gasSpent: number } {\n    let res, gas\n    if (v === this.vert1) {\n      if (!this.direction) {\n        if (amountOut < this.amountOutPrevious) {\n          const { out, gasSpent } = this.pool.calcOutByIn(this.amountOutPrevious - amountOut, false)\n          res = this.amountInPrevious - out\n          gas = gasSpent\n        } else {\n          const { inp, gasSpent } = this.pool.calcInByOut(amountOut - this.amountOutPrevious, true)\n          res = inp + this.amountInPrevious\n          gas = gasSpent\n        }\n      } else {\n        const { inp, gasSpent } = this.pool.calcInByOut(this.amountOutPrevious + amountOut, true)\n        res = inp - this.amountInPrevious\n        gas = gasSpent\n      }\n    } else {\n      if (!this.direction) {\n        const { inp, gasSpent } = this.pool.calcInByOut(this.amountInPrevious + amountOut, false)\n        res = inp - this.amountOutPrevious\n        gas = gasSpent\n      } else {\n        if (amountOut < this.amountInPrevious) {\n          const { out, gasSpent } = this.pool.calcOutByIn(this.amountInPrevious - amountOut, true)\n          res = this.amountOutPrevious - out\n          gas = gasSpent\n        } else {\n          const { inp, gasSpent } = this.pool.calcInByOut(amountOut - this.amountInPrevious, false)\n          res = inp + this.amountOutPrevious\n          gas = gasSpent\n        }\n      }\n    }\n\n    // this.testApply(v, amountIn, out);\n\n    return { inp: res, gasSpent: gas - this.spentGas }\n  }\n\n  checkMinimalLiquidityExceededAfterSwap(from: Vertice, amountOut: number): boolean {\n    if (from === this.vert0) {\n      const r1 = parseInt(this.pool.getReserve1().toString())\n      if (this.direction) {\n        return r1 - amountOut - this.amountOutPrevious < this.pool.minLiquidity\n      } else {\n        return r1 - amountOut + this.amountOutPrevious < this.pool.minLiquidity\n      }\n    } else {\n      const r0 = parseInt(this.pool.getReserve0().toString())\n      if (this.direction) {\n        return r0 - amountOut + this.amountInPrevious < this.pool.minLiquidity\n      } else {\n        return r0 - amountOut - this.amountInPrevious < this.pool.minLiquidity\n      }\n    }\n  }\n\n  // doesn't used in production - just for testing\n  testApply(from: Vertice, amountIn: number, amountOut: number) {\n    console.assert(this.amountInPrevious * this.amountOutPrevious >= 0)\n    const inPrev = this.direction ? this.amountInPrevious : -this.amountInPrevious\n    const outPrev = this.direction ? this.amountOutPrevious : -this.amountOutPrevious\n    const to = from.getNeighbor(this)\n    let directionNew,\n      amountInNew = 0,\n      amountOutNew = 0\n    if (to) {\n      const inInc = from === this.vert0 ? amountIn : -amountOut\n      const outInc = from === this.vert0 ? amountOut : -amountIn\n      const inNew = inPrev + inInc\n      const outNew = outPrev + outInc\n      if (inNew * outNew < 0) console.log('333')\n      console.assert(inNew * outNew >= 0)\n      if (inNew >= 0) {\n        directionNew = true\n        amountInNew = inNew\n        amountOutNew = outNew\n      } else {\n        directionNew = false\n        amountInNew = -inNew\n        amountOutNew = -outNew\n      }\n    } else console.error('Error 221')\n\n    if (directionNew) {\n      const calc = this.pool.calcOutByIn(amountInNew, true).out\n      const res = closeValues(amountOutNew, calc, 1e-6)\n      if (!res) console.log('Err 225-1 !!', amountOutNew, calc, Math.abs(calc / amountOutNew - 1))\n      return res\n    } else {\n      const calc = this.pool.calcOutByIn(amountOutNew, false).out\n      const res = closeValues(amountInNew, calc, 1e-6)\n      if (!res) console.log('Err 225-2!!', amountInNew, calc, Math.abs(calc / amountInNew - 1))\n      return res\n    }\n  }\n\n  applySwap(from: Vertice) {\n    console.assert(this.amountInPrevious * this.amountOutPrevious >= 0)\n    const inPrev = this.direction ? this.amountInPrevious : -this.amountInPrevious\n    const outPrev = this.direction ? this.amountOutPrevious : -this.amountOutPrevious\n    const to = from.getNeighbor(this)\n    if (to) {\n      const inInc = from === this.vert0 ? from.bestIncome : -to.bestIncome\n      const outInc = from === this.vert0 ? to.bestIncome : -from.bestIncome\n      const inNew = inPrev + inInc\n      const outNew = outPrev + outInc\n      console.assert(inNew * outNew >= 0)\n      if (inNew >= 0) {\n        this.direction = true\n        this.amountInPrevious = inNew\n        this.amountOutPrevious = outNew\n      } else {\n        this.direction = false\n        this.amountInPrevious = -inNew\n        this.amountOutPrevious = -outNew\n      }\n    } else console.error('Error 221')\n    this.spentGas = this.spentGasNew\n\n    ASSERT(() => {\n      if (this.direction) {\n        const granularity = this.pool.granularity1()\n        return closeValues(\n          this.amountOutPrevious / granularity,\n          this.pool.calcOutByIn(this.amountInPrevious, this.direction).out / granularity,\n          1e-4\n        )\n      } else {\n        const granularity = this.pool.granularity0()\n        return closeValues(\n          this.amountInPrevious / granularity,\n          this.pool.calcOutByIn(this.amountOutPrevious, this.direction).out / granularity,\n          1e-4,\n          `\"${this.pool.address}\" ${inPrev} ${to?.bestIncome} ${from.bestIncome}`\n        )\n      }\n    }, `Error 225`)\n  }\n}\n\nexport class Vertice {\n  token: RToken\n  edges: Edge[]\n\n  price: number\n  gasPrice: number\n\n  bestIncome: number // temp data used for findBestPath algorithm\n  gasSpent: number // temp data used for findBestPath algorithm\n  bestTotal: number // temp data used for findBestPath algorithm\n  bestSource?: Edge // temp data used for findBestPath algorithm\n  checkLine: number // debug data\n\n  constructor(t: RToken) {\n    this.token = t\n    this.edges = []\n    this.price = 0\n    this.gasPrice = 0\n    this.bestIncome = 0\n    this.gasSpent = 0\n    this.bestTotal = 0\n    this.bestSource = undefined\n    this.checkLine = -1\n  }\n\n  cleanTmpData() {\n    this.bestIncome = 0\n    this.gasSpent = 0\n    this.bestTotal = 0\n    this.bestSource = undefined\n    this.checkLine = -1\n  }\n\n  getNeighbor(e?: Edge) {\n    if (!e) return\n    return e.vert0 === this ? e.vert1 : e.vert0\n  }\n\n  getOutputEdges(): Edge[] {\n    return this.edges.filter((e) => {\n      if (!e.canBeUsed) return false\n      if (e.amountInPrevious === 0) return false\n      if (e.direction !== (e.vert0 === this)) return false\n      return true\n    })\n  }\n\n  getInputEdges(): Edge[] {\n    return this.edges.filter((e) => {\n      if (!e.canBeUsed) return false\n      if (e.amountInPrevious === 0) return false\n      if (e.direction === (e.vert0 === this)) return false\n      return true\n    })\n  }\n}\n\nexport class Graph {\n  vertices: Vertice[]\n  edges: Edge[]\n  tokens: Map<string, Vertice>\n\n  constructor(pools: RPool[], baseToken: RToken, gasPrice: number) {\n    this.vertices = []\n    this.edges = []\n    this.tokens = new Map()\n    pools.forEach((p) => {\n      const v0 = this.getOrCreateVertice(p.token0)\n      const v1 = this.getOrCreateVertice(p.token1)\n      const edge = new Edge(p, v0, v1)\n      v0.edges.push(edge)\n      v1.edges.push(edge)\n      this.edges.push(edge)\n    })\n    const baseVert = this.tokens.get(baseToken.address)\n    if (baseVert) {\n      this.setPricesStable(baseVert, 1, gasPrice)\n    }\n  }\n\n  cleanTmpData() {\n    this.edges.forEach((e) => e.cleanTmpData())\n    this.vertices.forEach((v) => v.cleanTmpData())\n  }\n\n  // Set prices using greedy algorithm\n  setPricesStable(from: Vertice, price: number, gasPrice: number) {\n    this.vertices.forEach((v) => (v.price = 0)) // initialization\n    from.price = price\n    from.gasPrice = gasPrice\n\n    const edgeValues = new Map<Edge, number>()\n    const value = (e: Edge): number => edgeValues.get(e) as number\n\n    function addVertice(v: Vertice) {\n      const newEdges = v.edges.filter((e) => v.getNeighbor(e)?.price == 0)\n      newEdges.forEach((e) => edgeValues.set(e, v.price * parseInt(e.reserve(v).toString())))\n      newEdges.sort((e1, e2) => value(e1) - value(e2))\n      const res: Edge[] = []\n      while (nextEdges.length && newEdges.length) {\n        if (value(nextEdges[0]) < value(newEdges[0])) res.push(nextEdges.shift() as Edge)\n        else res.push(newEdges.shift() as Edge)\n      }\n      nextEdges = [...res, ...nextEdges, ...newEdges]\n    }\n\n    let nextEdges: Edge[] = []\n    addVertice(from)\n    while (nextEdges.length > 0) {\n      const bestEdge = nextEdges.pop() as Edge\n      const [vFrom, vTo] =\n        bestEdge.vert1.price !== 0 ? [bestEdge.vert1, bestEdge.vert0] : [bestEdge.vert0, bestEdge.vert1]\n      if (vTo.price !== 0) continue\n      const p = bestEdge.pool.calcCurrentPriceWithoutFee(vFrom === bestEdge.vert1)\n      vTo.price = vFrom.price * p\n      vTo.gasPrice = vFrom.gasPrice / p\n      addVertice(vTo)\n    }\n  }\n\n  // Set prices by search in depth\n  setPrices(from: Vertice, price: number, gasPrice: number) {\n    if (from.price !== 0) return\n    from.price = price\n    from.gasPrice = gasPrice\n    const edges = from.edges\n      .map((e): [Edge, number] => [e, parseInt(e.reserve(from).toString())])\n      .sort(([_1, r1], [_2, r2]) => r2 - r1)\n    edges.forEach(([e, _]) => {\n      const v = e.vert0 === from ? e.vert1 : e.vert0\n      if (v.price !== 0) return\n      const p = e.pool.calcCurrentPriceWithoutFee(from === e.vert1)\n      this.setPrices(v, price * p, gasPrice / p)\n    })\n  }\n\n  getOrCreateVertice(token: RToken) {\n    let vert = this.tokens.get(token.address)\n    if (vert) return vert\n    vert = new Vertice(token)\n    this.vertices.push(vert)\n    this.tokens.set(token.address, vert)\n    return vert\n  }\n\n  /*exportPath(from: RToken, to: RToken) {\n\n    const fromVert = this.tokens.get(from) as Vertice\n    const toVert = this.tokens.get(to) as Vertice\n    const initValue = (fromVert.bestIncome * fromVert.price) / toVert.price\n\n    const route = new Set<Edge>()\n    for (let v = toVert; v !== fromVert; v = v.getNeighbor(v.bestSource) as Vertice) {\n      if (v.bestSource) route.add(v.bestSource)\n    }\n\n    function edgeStyle(e: Edge) {\n      const finish = e.vert1.bestSource === e\n      const start = e.vert0.bestSource === e\n      let label\n      if (e.bestEdgeIncome === -1) label = 'label: \"low_liq\"'\n      if (e.bestEdgeIncome !== 0) label = `label: \"${print((e.bestEdgeIncome / initValue - 1) * 100, 3)}%\"`\n      const edgeValue = route.has(e) ? 'value: 2' : undefined\n      let arrow\n      if (finish && start) arrow = 'arrows: \"from,to\"'\n      if (finish) arrow = 'arrows: \"to\"'\n      if (start) arrow = 'arrows: \"from\"'\n      return ['', label, edgeValue, arrow].filter((a) => a !== undefined).join(', ')\n    }\n\n    function print(n: number, digits: number) {\n      let out\n      if (n === 0) out = '0'\n      else {\n        const n0 = n > 0 ? n : -n\n        const shift = digits - Math.ceil(Math.log(n0) / Math.LN10)\n        if (shift <= 0) out = `${Math.round(n0)}`\n        else {\n          const mult = Math.pow(10, shift)\n          out = `${Math.round(n0 * mult) / mult}`\n        }\n        if (n < 0) out = -out\n      }\n      return out\n    }\n\n    function nodeLabel(v: Vertice) {\n      const value = (v.bestIncome * v.price) / toVert.price\n      const income = `${print(value, 3)}`\n      const total = `${print(v.bestTotal, 3)}`\n      // const income = `${print((value/initValue-1)*100, 3)}%`\n      // const total = `${print((v.bestTotal/initValue-1)*100, 3)}%`\n      const checkLine = v.checkLine === -1 ? undefined : `${v.checkLine}`\n      return [checkLine, income, total].filter((a) => a !== undefined).join(':')\n    }\n\n    const nodes = `var nodes = new vis.DataSet([\n      ${this.vertices.map((t) => `{ id: ${t.token.name}, label: \"${nodeLabel(t)}\"}`).join(',\\n\\t\\t')}\n    ]);\\n`\n    const edges = `var edges = new vis.DataSet([\n      ${this.edges\n        .map((p) => `{ from: ${p.vert0.token.name}, to: ${p.vert1.token.name}${edgeStyle(p)}}`)\n        .join(',\\n\\t\\t')}\n    ]);\\n`\n    const data = `var data = {\n        nodes: nodes,\n        edges: edges,\n    };\\n`\n\n    // TODO: This should be removed, this pacakge will not be installable on a client while this remains.\n    const fs = require(\"fs\");\n    fs.writeFileSync(\n      \"D:/Info/Notes/GraphVisualization/data.js\",\n      nodes + edges + data\n    );\n  }*/\n\n  findBestPathExactIn(\n    from: RToken,\n    to: RToken,\n    amountIn: number,\n    _gasPrice?: number\n  ):\n    | {\n        path: Edge[]\n        output: number\n        gasSpent: number\n        totalOutput: number\n      }\n    | undefined {\n    const start = this.tokens.get(from.address)\n    const finish = this.tokens.get(to.address)\n    if (!start || !finish) return\n\n    const gasPrice = _gasPrice !== undefined ? _gasPrice : finish.gasPrice\n\n    this.edges.forEach((e) => {\n      e.bestEdgeIncome = 0\n      e.spentGasNew = 0\n    })\n    this.vertices.forEach((v) => {\n      v.bestIncome = 0\n      v.gasSpent = 0\n      v.bestTotal = 0\n      v.bestSource = undefined\n      v.checkLine = -1\n    })\n    start.bestIncome = amountIn\n    start.bestTotal = amountIn\n    const processedVert = new Set<Vertice>()\n    const nextVertList = [start] // TODO: Use sorted Set!\n\n    let debug_info = ``\n    let checkLine = 0\n    for (;;) {\n      let closestVert: Vertice | undefined\n      let closestTotal: number | undefined\n      let closestPosition = 0\n      nextVertList.forEach((v, i) => {\n        if (closestTotal === undefined || v.bestTotal > closestTotal) {\n          closestTotal = v.bestTotal\n          closestVert = v\n          closestPosition = i\n        }\n      })\n\n      if (!closestVert) return\n\n      closestVert.checkLine = checkLine++\n\n      if (closestVert === finish) {\n        const bestPath = []\n        for (let v: Vertice | undefined = finish; v?.bestSource; v = v.getNeighbor(v.bestSource)) {\n          bestPath.unshift(v.bestSource)\n        }\n        DEBUG(() => console.log(debug_info))\n        return {\n          path: bestPath,\n          output: finish.bestIncome,\n          gasSpent: finish.gasSpent,\n          totalOutput: finish.bestTotal,\n        }\n      }\n      nextVertList.splice(closestPosition, 1)\n\n      closestVert.edges.forEach((e) => {\n        const v2 = closestVert === e.vert0 ? e.vert1 : e.vert0\n        if (processedVert.has(v2)) return\n        let newIncome: number, gas\n        try {\n          const { out, gasSpent } = e.calcOutput(closestVert as Vertice, (closestVert as Vertice).bestIncome)\n          if (!isFinite(out) || !isFinite(gasSpent))\n            // Math errors protection\n            return\n\n          newIncome = out\n          gas = gasSpent\n        } catch (e) {\n          // Any arithmetic error or out-of-liquidity\n          return\n        }\n        if (e.checkMinimalLiquidityExceededAfterSwap(closestVert as Vertice, newIncome)) {\n          e.bestEdgeIncome = -1\n          return\n        }\n        const newGasSpent = (closestVert as Vertice).gasSpent + gas\n        const price = v2.price / finish.price\n        const newTotal = newIncome * price - newGasSpent * gasPrice\n\n        console.assert(e.bestEdgeIncome === 0, 'Error 373')\n        e.bestEdgeIncome = newIncome * price\n        e.spentGasNew = e.spentGas + gas\n\n        if (!v2.bestSource) nextVertList.push(v2)\n        if (!v2.bestSource || newTotal > v2.bestTotal) {\n          DEBUG(() => {\n            const st = closestVert?.token == from ? '*' : ''\n            const fn = v2?.token == to ? '*' : ''\n            debug_info += `${st}${closestVert?.token.name}->${v2.token.name}${fn} ${v2.bestIncome} -> ${newIncome}\\n`\n          })\n          v2.bestIncome = newIncome\n          v2.gasSpent = newGasSpent\n          v2.bestTotal = newTotal\n          v2.bestSource = e\n        }\n      })\n      processedVert.add(closestVert)\n    }\n  }\n\n  findBestPathExactOut(\n    from: RToken,\n    to: RToken,\n    amountOut: number,\n    _gasPrice?: number\n  ):\n    | {\n        path: Edge[]\n        input: number\n        gasSpent: number\n        totalInput: number\n      }\n    | undefined {\n    const start = this.tokens.get(to.address)\n    const finish = this.tokens.get(from.address)\n    if (!start || !finish) return\n\n    const gasPrice = _gasPrice !== undefined ? _gasPrice : finish.gasPrice\n\n    this.edges.forEach((e) => {\n      e.bestEdgeIncome = 0\n      e.spentGasNew = 0\n    })\n    this.vertices.forEach((v) => {\n      v.bestIncome = 0\n      v.gasSpent = 0\n      v.bestTotal = 0\n      v.bestSource = undefined\n      v.checkLine = -1\n    })\n    start.bestIncome = amountOut\n    start.bestTotal = amountOut\n    const processedVert = new Set<Vertice>()\n    const nextVertList = [start] // TODO: Use sorted Set!\n\n    let debug_info = ''\n    let checkLine = 0\n    for (;;) {\n      let closestVert: Vertice | undefined\n      let closestTotal: number | undefined\n      let closestPosition = 0\n      nextVertList.forEach((v, i) => {\n        if (closestTotal === undefined || v.bestTotal < closestTotal) {\n          closestTotal = v.bestTotal\n          closestVert = v\n          closestPosition = i\n        }\n      })\n\n      if (!closestVert) return\n\n      closestVert.checkLine = checkLine++\n\n      if (closestVert === finish) {\n        const bestPath = []\n        for (let v: Vertice | undefined = finish; v?.bestSource; v = v.getNeighbor(v.bestSource)) {\n          bestPath.push(v.bestSource)\n        }\n        DEBUG(() => console.log(debug_info))\n        return {\n          path: bestPath,\n          input: finish.bestIncome,\n          gasSpent: finish.gasSpent,\n          totalInput: finish.bestTotal,\n        }\n      }\n      nextVertList.splice(closestPosition, 1)\n\n      closestVert.edges.forEach((e) => {\n        const v2 = closestVert === e.vert0 ? e.vert1 : e.vert0\n        if (processedVert.has(v2)) return\n        let newIncome: number, gas\n        try {\n          const { inp, gasSpent } = e.calcInput(closestVert as Vertice, (closestVert as Vertice).bestIncome)\n          if (!isFinite(inp) || !isFinite(gasSpent))\n            // Math errors protection\n            return\n          if (inp < 0) return // No enouph liquidity in the pool\n          newIncome = inp\n          gas = gasSpent\n        } catch (e) {\n          // Any arithmetic error or out-of-liquidity\n          return\n        }\n        const newGasSpent = (closestVert as Vertice).gasSpent + gas\n        const price = v2.price / finish.price\n        const newTotal = newIncome * price + newGasSpent * gasPrice\n\n        console.assert(e.bestEdgeIncome === 0, 'Error 373')\n        e.bestEdgeIncome = newIncome * price\n        e.spentGasNew = e.spentGas + gas\n\n        if (!v2.bestSource) nextVertList.push(v2)\n        if (!v2.bestSource || newTotal < v2.bestTotal) {\n          DEBUG(() => {\n            const st = v2?.token == from ? '*' : ''\n            const fn = closestVert?.token == to ? '*' : ''\n            debug_info += `${st}${closestVert?.token.name}<-${v2.token.name}${fn} ${v2.bestIncome} -> ${newIncome}\\n`\n          })\n          v2.bestIncome = newIncome\n          v2.gasSpent = newGasSpent\n          v2.bestTotal = newTotal\n          v2.bestSource = e\n        }\n      })\n      processedVert.add(closestVert)\n    }\n  }\n\n  addPath(from: Vertice | undefined, to: Vertice | undefined, path: Edge[]) {\n    let _from = from\n    path.forEach((e) => {\n      if (_from) {\n        e.applySwap(_from)\n        _from = _from.getNeighbor(e)\n      } else {\n        console.error('Unexpected 315')\n      }\n    })\n\n    ASSERT(() => {\n      const res = this.vertices.every((v) => {\n        let total = 0\n        let totalModule = 0\n        v.edges.forEach((e) => {\n          if (e.vert0 === v) {\n            if (e.direction) {\n              total -= e.amountInPrevious\n            } else {\n              total += e.amountInPrevious\n            }\n            totalModule += e.amountInPrevious\n          } else {\n            if (e.direction) {\n              total += e.amountOutPrevious\n            } else {\n              total -= e.amountOutPrevious\n            }\n            totalModule += e.amountOutPrevious\n          }\n        })\n        if (v === from) return total <= 0\n        if (v === to) return total >= 0\n        if (totalModule === 0) return total === 0\n        return Math.abs(total / totalModule) < 1e10\n      })\n      return res\n    }, 'Error 290')\n  }\n\n  getPrimaryPriceForPath(from: Vertice, path: Edge[]): number {\n    let p = 1\n    let prevToken = from\n    path.forEach((edge) => {\n      const direction = edge.vert0 === prevToken\n      const edgePrice = edge.pool.calcCurrentPriceWithoutFee(direction)\n      p *= edgePrice\n      prevToken = prevToken.getNeighbor(edge) as Vertice\n    })\n    return p\n  }\n\n  findBestRouteExactIn(from: RToken, to: RToken, amountIn: BigNumber | number, mode: number | number[]): MultiRoute {\n    let amountInBN: BigNumber\n    if (amountIn instanceof BigNumber) {\n      amountInBN = amountIn\n      amountIn = parseInt(amountIn.toString())\n    } else {\n      amountInBN = getBigNumber(amountIn)\n    }\n\n    let routeValues = []\n    if (Array.isArray(mode)) {\n      const sum = mode.reduce((a, b) => a + b, 0)\n      routeValues = mode.map((e) => e / sum)\n    } else {\n      for (let i = 0; i < mode; ++i) routeValues.push(1 / mode)\n    }\n\n    this.edges.forEach((e) => {\n      e.amountInPrevious = 0\n      e.amountOutPrevious = 0\n      e.direction = true\n    })\n    let output = 0\n    let gasSpentInit = 0\n    //let totalOutput = 0\n    let totalrouted = 0\n    let primaryPrice\n    let step\n    for (step = 0; step < routeValues.length; ++step) {\n      const p = this.findBestPathExactIn(from, to, amountIn * routeValues[step])\n      if (!p) {\n        break\n      } else {\n        output += p.output\n        gasSpentInit += p.gasSpent\n        //totalOutput += p.totalOutput\n        this.addPath(this.tokens.get(from.address), this.tokens.get(to.address), p.path)\n        totalrouted += routeValues[step]\n        // if (step === 0) {\n        //   primaryPrice = this.getPrimaryPriceForPath(this.tokens.get(from.address) as Vertice, p.path)\n        // }\n      }\n    }\n    if (step == 0)\n      return {\n        status: RouteStatus.NoWay,\n        fromToken: from,\n        toToken: to,\n        amountIn: 0,\n        amountInBN: BigNumber.from(0),\n        amountOut: 0,\n        amountOutBN: BigNumber.from(0),\n        legs: [],\n        gasSpent: 0,\n        totalAmountOut: 0,\n        totalAmountOutBN: BigNumber.from(0),\n      }\n    let status\n    if (step < routeValues.length) status = RouteStatus.Partial\n    else status = RouteStatus.Success\n\n    const fromVert = this.tokens.get(from.address) as Vertice\n    const toVert = this.tokens.get(to.address) as Vertice\n    const { legs, gasSpent, topologyWasChanged } = this.getRouteLegs(fromVert, toVert)\n    console.assert(gasSpent <= gasSpentInit, 'Internal Error 491')\n\n    if (topologyWasChanged) {\n      output = this.calcLegsAmountOut(legs, amountIn)\n    }\n\n    let swapPrice, priceImpact\n    try {\n      swapPrice = output / amountIn\n      const priceTo = this.tokens.get(to.address)?.price\n      const priceFrom = this.tokens.get(from.address)?.price\n      primaryPrice = priceTo && priceFrom ? priceFrom / priceTo : undefined\n      priceImpact = primaryPrice !== undefined ? 1 - swapPrice / primaryPrice : undefined\n    } catch (e) {\n      /* skip division by 0 errors*/\n    }\n\n    return {\n      status,\n      fromToken: from,\n      toToken: to,\n      primaryPrice,\n      swapPrice,\n      priceImpact,\n      amountIn: amountIn * totalrouted,\n      amountInBN: status == RouteStatus.Success ? amountInBN : getBigNumber(amountIn * totalrouted),\n      amountOut: output,\n      amountOutBN: getBigNumber(output),\n      legs,\n      gasSpent,\n      totalAmountOut: output - gasSpent * toVert.gasPrice,\n      totalAmountOutBN: getBigNumber(output - gasSpent * toVert.gasPrice),\n    }\n  }\n\n  findBestRouteExactOut(from: RToken, to: RToken, amountOut: number, mode: number | number[]): MultiRoute {\n    let routeValues = []\n    if (Array.isArray(mode)) {\n      const sum = mode.reduce((a, b) => a + b, 0)\n      routeValues = mode.map((e) => e / sum)\n    } else {\n      for (let i = 0; i < mode; ++i) routeValues.push(1 / mode)\n    }\n\n    this.edges.forEach((e) => {\n      e.amountInPrevious = 0\n      e.amountOutPrevious = 0\n      e.direction = true\n    })\n    let input = 0\n    let gasSpentInit = 0\n    //let totalOutput = 0\n    let totalrouted = 0\n    let primaryPrice\n    let step\n    for (step = 0; step < routeValues.length; ++step) {\n      const p = this.findBestPathExactOut(from, to, amountOut * routeValues[step])\n      if (!p) {\n        break\n      } else {\n        input += p.input\n        gasSpentInit += p.gasSpent\n        //totalOutput += p.totalOutput\n        this.addPath(this.tokens.get(from.address), this.tokens.get(to.address), p.path)\n        totalrouted += routeValues[step]\n        // if (step === 0) {\n        //   primaryPrice = this.getPrimaryPriceForPath(this.tokens.get(from.address) as Vertice, p.path)\n        // }\n      }\n    }\n    if (step == 0)\n      return {\n        status: RouteStatus.NoWay,\n        fromToken: from,\n        toToken: to,\n        amountIn: 0,\n        amountInBN: BigNumber.from(0),\n        amountOut: 0,\n        amountOutBN: BigNumber.from(0),\n        legs: [],\n        gasSpent: 0,\n        totalAmountOut: 0,\n        totalAmountOutBN: BigNumber.from(0),\n      }\n    let status\n    if (step < routeValues.length) status = RouteStatus.Partial\n    else status = RouteStatus.Success\n\n    const fromVert = this.tokens.get(from.address) as Vertice\n    const toVert = this.tokens.get(to.address) as Vertice\n    const { legs, gasSpent, topologyWasChanged } = this.getRouteLegs(fromVert, toVert)\n    console.assert(gasSpent <= gasSpentInit, 'Internal Error 491')\n\n    if (topologyWasChanged) {\n      input = this.calcLegsAmountIn(legs, amountOut) ///\n    }\n\n    let swapPrice, priceImpact\n    try {\n      swapPrice = amountOut / input\n      const priceTo = this.tokens.get(to.address)?.price\n      const priceFrom = this.tokens.get(from.address)?.price\n      primaryPrice = priceTo && priceFrom ? priceFrom / priceTo : undefined\n      priceImpact = primaryPrice !== undefined ? 1 - swapPrice / primaryPrice : undefined\n    } catch (e) {\n      /* skip division by 0 errors*/\n    }\n\n    return {\n      status,\n      fromToken: from,\n      toToken: to,\n      primaryPrice,\n      swapPrice,\n      priceImpact,\n      amountIn: input,\n      amountInBN: getBigNumber(input),\n      amountOut: amountOut * totalrouted,\n      amountOutBN: getBigNumber(amountOut * totalrouted),\n      legs,\n      gasSpent,\n      totalAmountOut: amountOut - gasSpent * toVert.gasPrice,\n      totalAmountOutBN: getBigNumber(amountOut - gasSpent * toVert.gasPrice),\n    }\n  }\n\n  getRouteLegs(\n    from: Vertice,\n    to: Vertice\n  ): {\n    legs: RouteLeg[]\n    gasSpent: number\n    topologyWasChanged: boolean\n  } {\n    const { vertices, topologyWasChanged } = this.cleanTopology(from, to)\n    const legs: RouteLeg[] = []\n    let gasSpent = 0\n    vertices.forEach((n) => {\n      const outEdges = n.getOutputEdges().map((e) => {\n        const from = this.edgeFrom(e)\n        return from ? [e, from.vert, from.amount] : [e]\n      })\n\n      let outAmount = outEdges.reduce((a, b) => a + (b[2] as number), 0)\n      if (outAmount <= 0) return\n\n      const total = outAmount\n      outEdges.forEach((e, i) => {\n        const p = e[2] as number\n        const quantity = i + 1 === outEdges.length ? 1 : p / outAmount\n        const edge = e[0] as Edge\n        legs.push({\n          poolAddress: edge.pool.address,\n          poolFee: edge.pool.fee,\n          tokenFrom: n.token,\n          tokenTo: (n.getNeighbor(edge) as Vertice).token,\n          assumedAmountIn: edge.direction ? edge.amountInPrevious : edge.amountOutPrevious,\n          assumedAmountOut: edge.direction ? edge.amountOutPrevious : edge.amountInPrevious,\n          swapPortion: quantity,\n          absolutePortion: p / total,\n        })\n        gasSpent += (e[0] as Edge).pool.swapGasCost\n        outAmount -= p\n      })\n      console.assert(outAmount / total < 1e-12, 'Error 281')\n    })\n    return { legs, gasSpent, topologyWasChanged }\n  }\n\n  edgeFrom(e: Edge): { vert: Vertice; amount: number } | undefined {\n    if (e.amountInPrevious === 0) return undefined\n    return e.direction ? { vert: e.vert0, amount: e.amountInPrevious } : { vert: e.vert1, amount: e.amountOutPrevious }\n  }\n\n  // TODO: make full test coverage!\n  calcLegsAmountOut(legs: RouteLeg[], amountIn: number) {\n    const amounts = new Map<string, number>()\n    amounts.set(legs[0].tokenFrom.address, amountIn)\n    legs.forEach((l) => {\n      const vert = this.tokens.get(l.tokenFrom.address)\n      console.assert(vert !== undefined, 'Internal Error 570')\n      const edge = (vert as Vertice).edges.find((e) => e.pool.address === l.poolAddress)\n      console.assert(edge !== undefined, 'Internel Error 569')\n      const pool = (edge as Edge).pool\n      const direction = vert === (edge as Edge).vert0\n\n      const inputTotal = amounts.get(l.tokenFrom.address)\n      console.assert(inputTotal !== undefined, 'Internal Error 564')\n      const input = (inputTotal as number) * l.swapPortion\n      amounts.set(l.tokenFrom.address, (inputTotal as number) - input)\n      const output = pool.calcOutByIn(input, direction).out\n\n      const vertNext = (vert as Vertice).getNeighbor(edge) as Vertice\n      const prevAmount = amounts.get(vertNext.token.address)\n      amounts.set(vertNext.token.address, (prevAmount || 0) + output)\n    })\n    return amounts.get(legs[legs.length - 1].tokenTo.address) || 0\n  }\n\n  // TODO: make full test coverage!\n  calcLegsAmountIn(legs: RouteLeg[], amountOut: number) {\n    const totalOutputAssumed = new Map<string, number>()\n    legs.forEach((l) => {\n      const prevValue = totalOutputAssumed.get(l.tokenFrom.address) || 0\n      totalOutputAssumed.set(l.tokenFrom.address, prevValue + l.assumedAmountOut)\n    })\n\n    const amounts = new Map<string, number>()\n    amounts.set(legs[legs.length - 1].tokenTo.address, amountOut)\n    for (let i = legs.length - 1; i >= 0; --i) {\n      const l = legs[i]\n      const vert = this.tokens.get(l.tokenTo.address)\n      console.assert(vert !== undefined, 'Internal Error 884')\n      const edge = (vert as Vertice).edges.find((e) => e.pool.address === l.poolAddress)\n      console.assert(edge !== undefined, 'Internel Error 888')\n      const pool = (edge as Edge).pool\n      const direction = vert === (edge as Edge).vert1\n\n      const outputTotal = amounts.get(l.tokenTo.address)\n      console.assert(outputTotal !== undefined, 'Internal Error 893')\n      const totalAssumed = totalOutputAssumed.get(l.tokenFrom.address)\n      console.assert(totalAssumed !== undefined, 'Internal Error 903')\n      const output = ((outputTotal as number) * l.assumedAmountOut) / (totalAssumed as number)\n      const input = pool.calcInByOut(output, direction).inp\n\n      const vertNext = (vert as Vertice).getNeighbor(edge) as Vertice\n      const prevAmount = amounts.get(vertNext.token.address)\n      amounts.set(vertNext.token.address, (prevAmount || 0) + input)\n    }\n    return amounts.get(legs[0].tokenFrom.address) || 0\n  }\n\n  // removes all cycles if there are any, then removes all dead end could appear after cycle removing\n  // Returns clean result topologically sorted\n  cleanTopology(from: Vertice, to: Vertice): { vertices: Vertice[]; topologyWasChanged: boolean } {\n    let topologyWasChanged = false\n    let result = this.topologySort(from, to)\n    if (result.status !== 2) {\n      topologyWasChanged = true\n      console.assert(result.status === 0, 'Internal Error 554')\n      while (result.status === 0) {\n        this.removeWeakestEdge(result.vertices)\n        result = this.topologySort(from, to)\n      }\n      if (result.status === 3) {\n        this.removeDeadEnds(result.vertices)\n        result = this.topologySort(from, to)\n      }\n      console.assert(result.status === 2, 'Internal Error 563')\n      if (result.status !== 2) return { vertices: [], topologyWasChanged }\n    }\n    return { vertices: result.vertices, topologyWasChanged }\n  }\n\n  removeDeadEnds(verts: Vertice[]) {\n    verts.forEach((v) => {\n      v.getInputEdges().forEach((e) => {\n        e.canBeUsed = false\n      })\n    })\n  }\n\n  removeWeakestEdge(verts: Vertice[]) {\n    let minVert: Vertice, minVertNext: Vertice\n    let minOutput = Number.MAX_VALUE\n    verts.forEach((v1, i) => {\n      const v2 = i === 0 ? verts[verts.length - 1] : verts[i - 1]\n      let out = 0\n      v1.getOutputEdges().forEach((e) => {\n        if (v1.getNeighbor(e) !== v2) return\n        out += e.direction ? e.amountOutPrevious : e.amountInPrevious\n      })\n      if (out < minOutput) {\n        minVert = v1\n        minVertNext = v2\n        minOutput = out\n      }\n    })\n    // @ts-ignore\n    minVert.getOutputEdges().forEach((e) => {\n      if (minVert.getNeighbor(e) !== minVertNext) return\n      e.canBeUsed = false\n    })\n  }\n\n  // topological sort\n  // if there is a cycle - returns [0, <List of envolved vertices in the cycle>]\n  // if there are no cycles but deadends- returns [3, <List of all envolved deadend vertices>]\n  // if there are no cycles or deadends- returns [2, <List of all envolved vertices topologically sorted>]\n  topologySort(from: Vertice, to: Vertice): { status: number; vertices: Vertice[] } {\n    // undefined or 0 - not processed, 1 - in process, 2 - finished, 3 - dedend\n    const vertState = new Map<Vertice, number>()\n    const vertsFinished: Vertice[] = []\n    const foundCycle: Vertice[] = []\n    const foundDeadEndVerts: Vertice[] = []\n\n    // 0 - cycle was found and created, return\n    // 1 - during cycle creating\n    // 2 - vertex is processed ok\n    // 3 - dead end vertex\n    function topSortRecursive(current: Vertice): number {\n      const state = vertState.get(current)\n      if (state === 2 || state === 3) return state\n      if (state === 1) {\n        console.assert(foundCycle.length == 0, 'Internal Error 566')\n        foundCycle.push(current)\n        return 1\n      }\n      vertState.set(current, 1)\n\n      let successors2Exist = false\n      const outEdges = current.getOutputEdges()\n      for (let i = 0; i < outEdges.length; ++i) {\n        const e = outEdges[i]\n        const res = topSortRecursive(current.getNeighbor(e) as Vertice)\n        if (res === 0) return 0\n        if (res === 1) {\n          if (foundCycle[0] === current) return 0\n          else {\n            foundCycle.push(current)\n            return 1\n          }\n        }\n        if (res === 2) successors2Exist = true // Ok successors\n      }\n      if (successors2Exist) {\n        console.assert(current !== to, 'Internal Error 589')\n        vertsFinished.push(current)\n        vertState.set(current, 2)\n        return 2\n      } else {\n        if (current !== to) {\n          foundDeadEndVerts.push(current)\n          vertState.set(current, 3)\n          return 3\n        }\n        vertsFinished.push(current)\n        vertState.set(current, 2)\n        return 2\n      }\n    }\n\n    const res = topSortRecursive(from)\n    if (res === 0) return { status: 0, vertices: foundCycle }\n    if (foundDeadEndVerts.length) return { status: 3, vertices: foundDeadEndVerts }\n    ASSERT(() => {\n      if (vertsFinished[0] !== to) return false\n      if (vertsFinished[vertsFinished.length - 1] !== from) return false\n      return true\n    }, 'Internal Error 614')\n    if (res === 2) return { status: 2, vertices: vertsFinished.reverse() }\n    console.assert(true, 'Internal Error 612')\n    return { status: 1, vertices: [] }\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber/lib.esm/index.js';\n\nimport { Graph, MultiRoute, RouteStatus } from './Graph'\nimport { RPool } from './PrimaryPools'\nimport type { RToken } from './PrimaryPools';\n\n// Assumes route is a single path\nfunction calcPriceImactWithoutFee(route: MultiRoute) {\n  if (route.primaryPrice === undefined || route.swapPrice === undefined) {\n    return undefined\n  } else {\n    let oneMinusCombinedFee = 1\n    route.legs.forEach((l) => (oneMinusCombinedFee *= 1 - l.poolFee))\n    //const combinedFee = 1-oneMinusCombinedFee\n    return Math.max(0, 1 - route.swapPrice / route.primaryPrice / oneMinusCombinedFee)\n  }\n}\n\nconst defaultFlowNumber = 12\nconst maxFlowNumber = 100\nfunction calcBestFlowNumber(bestSingleRoute: MultiRoute, amountIn: BigNumber | number, gasPriceIn?: number): number {\n  if (amountIn instanceof BigNumber) {\n    amountIn = parseInt(amountIn.toString())\n  }\n\n  const priceImpact = calcPriceImactWithoutFee(bestSingleRoute)\n  if (!priceImpact) return defaultFlowNumber\n\n  const bestFlowAmount = Math.sqrt((bestSingleRoute.gasSpent * (gasPriceIn || 0) * amountIn) / priceImpact)\n  const bestFlowNumber = Math.round(amountIn / bestFlowAmount)\n  if (!isFinite(bestFlowNumber)) return maxFlowNumber\n\n  const realFlowNumber = Math.max(1, Math.min(bestFlowNumber, maxFlowNumber))\n  return realFlowNumber\n}\n\nfunction getBetterRouteExactIn(route1: MultiRoute, route2: MultiRoute): MultiRoute {\n  if (route1.status == RouteStatus.NoWay) return route2\n  if (route2.status == RouteStatus.NoWay) return route1\n  if (route1.status == RouteStatus.Partial && route2.status == RouteStatus.Success) return route2\n  if (route2.status == RouteStatus.Partial && route1.status == RouteStatus.Success) return route1\n  return route1.totalAmountOut > route2.totalAmountOut ? route1 : route2\n}\n\nexport function findMultiRouteExactIn(\n  from: RToken,\n  to: RToken,\n  amountIn: BigNumber | number,\n  pools: RPool[],\n  baseToken: RToken,\n  gasPrice: number,\n  flows?: number | number[]\n): MultiRoute {\n  const g = new Graph(pools, baseToken, gasPrice)\n  const fromV = g.tokens.get(from.address)\n  if (fromV?.price === 0) {\n    g.setPricesStable(fromV, 1, 0)\n  }\n\n  if (flows !== undefined) return g.findBestRouteExactIn(from, to, amountIn, flows)\n\n  const outSingle = g.findBestRouteExactIn(from, to, amountIn, 1)\n  // Possible optimization of timing\n  // if (g.findBestPathExactIn(from, to, amountIn/100 + 10_000, 0)?.gasSpent === 0) return outSingle\n  g.cleanTmpData()\n\n  const bestFlowNumber = calcBestFlowNumber(outSingle, amountIn, fromV?.gasPrice)\n  if (bestFlowNumber === 1) return outSingle\n\n  const outMulti = g.findBestRouteExactIn(from, to, amountIn, bestFlowNumber)\n  return getBetterRouteExactIn(outSingle, outMulti)\n}\n\nfunction getBetterRouteExactOut(route1: MultiRoute, route2: MultiRoute, gasPrice: number): MultiRoute {\n  if (route1.status == RouteStatus.NoWay) return route2\n  if (route2.status == RouteStatus.NoWay) return route1\n  if (route1.status == RouteStatus.Partial && route2.status == RouteStatus.Success) return route2\n  if (route2.status == RouteStatus.Partial && route1.status == RouteStatus.Success) return route1\n  const totalAmountIn1 = route1.amountIn + route1.gasSpent * gasPrice\n  const totalAmountIn2 = route2.amountIn + route2.gasSpent * gasPrice\n  return totalAmountIn1 < totalAmountIn2 ? route1 : route2\n}\n\nexport function findMultiRouteExactOut(\n  from: RToken,\n  to: RToken,\n  amountOut: BigNumber | number,\n  pools: RPool[],\n  baseToken: RToken,\n  gasPrice: number,\n  flows?: number | number[]\n): MultiRoute {\n  if (amountOut instanceof BigNumber) {\n    amountOut = parseInt(amountOut.toString())\n  }\n\n  const g = new Graph(pools, baseToken, gasPrice)\n  const fromV = g.tokens.get(from.address)\n  if (fromV?.price === 0) {\n    g.setPricesStable(fromV, 1, 0)\n  }\n\n  if (flows !== undefined) return g.findBestRouteExactOut(from, to, amountOut, flows)\n\n  const inSingle = g.findBestRouteExactOut(from, to, amountOut, 1)\n  // Possible optimization of timing\n  // if (g.findBestPathExactOut(from, to, amountOut/100 + 10_000, 0)?.gasSpent === 0) return inSingle\n  g.cleanTmpData()\n\n  const bestFlowNumber = calcBestFlowNumber(inSingle, inSingle.amountIn, fromV?.gasPrice)\n  if (bestFlowNumber === 1) return inSingle\n\n  const inMulti = g.findBestRouteExactOut(from, to, amountOut, bestFlowNumber)\n  return getBetterRouteExactOut(inSingle, inMulti, gasPrice)\n}\n\nexport function findSingleRouteExactIn(\n  from: RToken,\n  to: RToken,\n  amountIn: BigNumber | number,\n  pools: RPool[],\n  baseToken: RToken,\n  gasPrice: number\n): MultiRoute {\n  const g = new Graph(pools, baseToken, gasPrice)\n  const fromV = g.tokens.get(from.address)\n  if (fromV?.price === 0) {\n    g.setPricesStable(fromV, 1, 0)\n  }\n\n  const out = g.findBestRouteExactIn(from, to, amountIn, 1)\n  return out\n}\n\nexport function findSingleRouteExactOut(\n  from: RToken,\n  to: RToken,\n  amountOut: BigNumber | number,\n  pools: RPool[],\n  baseToken: RToken,\n  gasPrice: number\n): MultiRoute {\n  const g = new Graph(pools, baseToken, gasPrice)\n  const fromV = g.tokens.get(from.address)\n  if (fromV?.price === 0) {\n    g.setPricesStable(fromV, 1, 0)\n  }\n\n  if (amountOut instanceof BigNumber) {\n    amountOut = parseInt(amountOut.toString())\n  }\n\n  const out = g.findBestRouteExactOut(from, to, amountOut, 1)\n  return out\n}\n\nexport function calcTokenPrices(pools: RPool[], baseToken: RToken): Map<RToken, number> {\n  const g = new Graph(pools, baseToken, 0)\n  const res = new Map<RToken, number>()\n  g.vertices.forEach((v) => res.set(v.token, v.price))\n  return res\n}\n","import { ASSERT, calcSquareEquation, ConstantProductRPool, getBigNumber, RPool } from './';\nimport type { RToken } from './PrimaryPools';\n\ninterface JumpInfo {\n  poolIndex: number\n  input: number\n  output: number\n  price: number\n  combinedLiquidityY: number\n  gasCost: number\n}\n\nexport class ParallelCPRPool extends RPool {\n  declare readonly token0: RToken\n  readonly allPools: ConstantProductRPool[]\n  readonly gasPrice: number\n  jumps0?: JumpInfo[]\n  jumps1?: JumpInfo[]\n\n  constructor(inputToken: RToken, pools: ConstantProductRPool[], gasPrice: number) {\n    super(\n      'ParallelCPRPool',\n      pools[0].token0,\n      pools[0].token1,\n      0,\n      getBigNumber(pools.reduce((a, b) => a + b.reserve0Number, 0)),\n      getBigNumber(pools.reduce((a, b) => a + b.reserve1Number / (1 - b.fee), 0))\n    )\n    // this.pools = pools.map((p):[ConstantProductRPool, number] => [p, p.getLiquidity()/(1-p.fee)])\n    //   .sort(([_1, l1], [_2, l2]) => l1-l2)\n    // console.log(\"pools\", this.pools.map(p => p[0].getLiquidity()));\n    this.token0 = inputToken\n    this.allPools = pools\n    this.gasPrice = gasPrice\n  }\n\n  //TODO:\n  // 1) weak pool test\n  // 3) poolPrice < priceCurrent\n  calcNextJumpforPool(\n    pool: ConstantProductRPool,\n    poolIndex: number,\n    direction: boolean,\n    prevJump?: JumpInfo\n  ): JumpInfo | undefined {\n    const dir = (this.token0.address === pool.token0.address) === direction\n    const poolPrice = pool.calcPrice(0, dir, true)\n    const y = dir ? pool.reserve1Number : pool.reserve0Number\n    if (prevJump === undefined)\n      return {\n        poolIndex,\n        input: 0,\n        output: 0,\n        price: poolPrice,\n        combinedLiquidityY: y,\n        gasCost: pool.swapGasCost,\n      }\n\n    const swapCost = this.gasPrice * pool.swapGasCost\n    if (y < swapCost) return // pool is too weak to pay off swap gas cost\n    const combinedYNew = Math.sqrt(poolPrice / prevJump.price) * prevJump.combinedLiquidityY\n    console.assert(combinedYNew > 0, 'Internal error 45')\n    const outputFirst = prevJump.combinedLiquidityY - combinedYNew // TODO: check if negative !!!!\n    const inputFirst = (prevJump.combinedLiquidityY * outputFirst) / prevJump.price / combinedYNew\n\n    const [inputSecond, in1] = calcSquareEquation(\n      swapCost - y,\n      (swapCost * (2 * combinedYNew + y)) / poolPrice,\n      (swapCost * combinedYNew * (combinedYNew + y)) / poolPrice / poolPrice\n    )\n    console.assert(in1 < 0, 'Internal Error 53')\n    console.assert(inputSecond > 0, 'Internal Error 54')\n    const outputSecond = (combinedYNew * inputSecond) / (combinedYNew / poolPrice + inputSecond) + swapCost\n    ASSERT(() => {\n      const outputSecond2 = ((combinedYNew + y) * inputSecond) / ((combinedYNew + y) / poolPrice + inputSecond)\n      return Math.abs(outputSecond / outputSecond2 - 1) < 1e-12\n    }, 'Internal Error 62')\n    const combinedYFinal = combinedYNew + y - outputSecond\n    const priceFinal = poolPrice * Math.pow(combinedYFinal / (combinedYNew + y), 2)\n    return {\n      poolIndex,\n      input: prevJump.input + inputFirst + inputSecond,\n      output: prevJump.output + outputFirst + outputSecond,\n      price: priceFinal,\n      combinedLiquidityY: combinedYFinal,\n      gasCost: prevJump.gasCost + pool.swapGasCost,\n    }\n  }\n\n  calcBestJump(pools: ConstantProductRPool[], direction: boolean, prevJump?: JumpInfo): JumpInfo | undefined {\n    let bestJump: JumpInfo | undefined\n    pools.forEach((p, i) => {\n      const jump = this.calcNextJumpforPool(p, i, direction, prevJump)\n      if (bestJump === undefined) bestJump = jump\n      else if (jump !== undefined) {\n        if (0 < jump.input && jump.input < bestJump.input) bestJump = jump\n        if (bestJump.input === 0 && jump.price > bestJump.price) bestJump = jump\n      }\n    })\n    return bestJump\n  }\n\n  calcJumps(direction: boolean): JumpInfo[] {\n    let jumps = direction ? this.jumps0 : this.jumps1\n    if (jumps !== undefined) return jumps\n\n    jumps = []\n    const unusedPools = [...this.allPools]\n    let bestJump = this.calcBestJump(unusedPools, direction)\n    while (bestJump !== undefined) {\n      jumps.push(bestJump)\n      unusedPools.splice(bestJump.poolIndex, 1)\n      bestJump = this.calcBestJump(unusedPools, direction, bestJump)\n    }\n\n    if (direction) this.jumps0 = jumps\n    else this.jumps1 = jumps\n\n    return jumps\n  }\n\n  getJump(direction: boolean, less: (j: JumpInfo) => boolean) {\n    const jumps = this.calcJumps(direction)\n    let a = 0,\n      b = jumps.length - 1\n    while (b - a > 1) {\n      const c = Math.floor((a + b) / 2)\n      if (less(jumps[c])) a = c\n      else b = c\n    }\n    return less(jumps[b]) ? jumps[b] : jumps[a]\n  }\n\n  calcOutByIn(amountIn: number, direction: boolean): { out: number; gasSpent: number } {\n    const jump = this.getJump(direction, (j) => j.input <= amountIn)\n    console.assert(amountIn >= jump.input)\n\n    const addInput = amountIn - jump.input\n    const addOutput = (jump.combinedLiquidityY * addInput) / (jump.combinedLiquidityY / jump.price + addInput)\n    return { out: jump.output + addOutput, gasSpent: jump.gasCost }\n  }\n\n  calcInByOut(amountOut: number, direction: boolean): { inp: number; gasSpent: number } {\n    const jump = this.getJump(direction, (j) => j.output <= amountOut)\n    console.assert(amountOut >= jump.input)\n\n    const addOutput = amountOut - jump.output\n    let addInput = ((jump.combinedLiquidityY / jump.price) * addOutput) / (jump.combinedLiquidityY - addOutput)\n    if (addInput < 0) addInput = 0\n    return { inp: jump.input + addInput, gasSpent: jump.gasCost }\n  }\n\n  calcCurrentPriceWithoutFee(direction: boolean): number {\n    let bestLiquidity: number | undefined\n    let price: number | undefined\n    this.allPools.forEach((p) => {\n      const l = p.getLiquidity()\n      if (bestLiquidity === undefined) {\n        bestLiquidity = l\n        price = p.calcCurrentPriceWithoutFee(direction)\n      }\n    })\n    return price as number\n  }\n}\n","/// TODO:\n// 1) Taking into account several parallel pools was not finished\n// 2) Is it possible to redistribute intersected paths, or should they be reduced till not-intersected paths only?\n// 3) Can we find optimal distribution between all output pools of a token, or only between those paths which end in the same token?\n//    If only second - then in what sequence this optimization should be? From closer tokens to more far?\nimport { Edge, Vertice } from './Graph'\nimport { revertPositive } from './Utils'\n\n// Simplified abstraction of pool - all that Redistributor needed and nothing more\nclass Pool {\n  from: number\n  to: number\n  edge: Edge\n  direction: boolean\n\n  constructor(fromIndex: number, toIndex: number, edge: Edge, from: Vertice) {\n    this.from = fromIndex\n    this.to = toIndex\n    this.edge = edge\n    this.direction = edge.pool.token0.address === from.token.address\n  }\n\n  calcOutByIn(amountIn: number): number {\n    return this.edge.pool.calcOutByIn(amountIn, this.direction).out\n  }\n\n  input(): number {\n    return this.direction ? this.edge.amountInPrevious : this.edge.amountOutPrevious\n  }\n}\n\nexport class Redistributor {\n  tokenNumber: number // Number of tokens\n  tokensTopologySorted: Vertice[] // List of all tokens, from input token to output\n  tokenIndex: Map<Vertice, number> // Index of a token in tokensTopologySorted\n  outputTokens: number[][] // tokenIndex => tokenIndex[] - all output tokens for a given token\n  pools: Pool[][] // [tokenIndexFrom, tokenIndexTo] => Pool[] - list of all pools between a given\n  // pair of tokens. Please use getPools/setPools functions only to access this field\n  paths: Pool[][] // [tokenIndexFrom, tokenIndexTo] => Pool[] - list of all pools that could be\n  // start of the path from tokenIndexFrom to tokenIndexTo (any tokens, maybe not connected\n  // by a pool). Please use getPaths/setPaths functions only to access this field\n\n  getPaths(from: number, to: number): Pool[] | undefined {\n    return this.paths[from * this.tokenNumber + to]\n  }\n\n  setPaths(from: number, to: number, paths: Pool[]) {\n    this.paths[from * this.tokenNumber + to] = paths\n  }\n\n  getPools(from: number, to: number): Pool[] | undefined {\n    return this.pools[from * this.tokenNumber + to]\n  }\n\n  setPools(from: number, to: number, pools: Pool[]) {\n    this.pools[from * this.tokenNumber + to] = pools\n  }\n\n  constructor(_nodesTopologySorted: Vertice[]) {\n    this.tokenNumber = _nodesTopologySorted.length\n    this.tokensTopologySorted = _nodesTopologySorted\n\n    this.tokenIndex = new Map<Vertice, number>()\n    _nodesTopologySorted.forEach((n, i) => this.tokenIndex.set(n, i))\n\n    this.outputTokens = new Array(this.tokenNumber) // TODO: test with []\n    this.pools = new Array(this.tokenNumber * this.tokenNumber) // TODO: test with []\n    _nodesTopologySorted.forEach((n, i) => {\n      const edges = n.getOutputEdges()\n      const nodes = edges.map((e) => this.tokenIndex.get(n.getNeighbor(e) as Vertice) as number)\n      this.outputTokens[i] = [...new Set(nodes)]\n      for (let j = 0; j < nodes.length; ++j) {\n        const pools = this.getPools(i, j) || []\n        pools.push(new Pool(i, j, edges[j], n))\n        this.setPools(i, j, pools)\n      }\n    })\n\n    this.paths = new Array(this.tokenNumber) // TODO: test with []\n    // eslint-disable-next-line for-direction\n    for (let i = this.tokenNumber - 2; i >= 0; ++i) {\n      const nextNodes = this.outputTokens[i]\n      for (let j = i + 1; j < this.tokenNumber; ++j) {\n        const paths = []\n        // if (j in) ...  TODO: to finish\n        for (let k = 0; k < nextNodes.length; ++k) {\n          if (this.getPaths(k, j) !== undefined) {\n            const pools = this.getPools(i, k)\n            if (pools !== undefined) {\n              paths.push(...pools)\n            } else {\n              console.assert(0, 'Internal Error 81')\n            }\n          }\n        }\n        this.setPaths(i, j, paths)\n      }\n    }\n  }\n\n  // TODO: maybe it would be better to go from end to beginning for the outer cycle\n  redistribute() {\n    for (let i = 0; i < this.tokenNumber - 1; ++i) {\n      for (let j = i + 1; j < this.tokenNumber; ++j) {\n        const paths = this.getPaths(i, j)\n        if (paths !== undefined && paths.length > 1) {\n          this.redistrPaths(i, j, paths)\n        }\n      }\n    }\n  }\n\n  redistrPaths(from: number, to: number, paths: Pool[]) {\n    // TODO: this code was taken from investigation part, should be rearranged for current environment\n    /*if (amountIn == 0) {\n      return [0, 0, [1]];\n    }\n\n    if (subRouters.length == 1) {\n      const [out, gas] = subRouters[0].calcOutByIn(amountIn);\n      return [out, gas, [1]];\n    }\n\n    let distr = subRouters.map(p => Math.max(p.calcOutByIn(amountIn/subRouters.length)[0], 0));\n    \n    for(let i = 0; i < 5; ++i) {\n      const sum = distr.reduce((a, b) => a+b, 0);\n      console.assert(sum > 0, \"Error 508 \" + sum + \" \" + i + \" \" + amountIn);\n      \n      const prices = distr.map((d, j) => 1/subRouters[j].calcPrice(amountIn*d/sum))\n      const pr = prices.reduce((a, b) => Math.max(a, b), 0);\n      \n      distr = subRouters.map((p, i) => p.calcInputByPrice(pr, distr[i]));        \n    }\n\n    const sum = distr.reduce((a, b) => a + b, 0);\n    distr = distr.map(d => d/sum);\n\n    let out = 0, gas = 0;\n    for (let i = 0; i < subRouters.length; ++i) {\n      const [out0, gas0] = subRouters[i].calcOutByIn(distr[i]*amountIn);\n      out += out0;\n      gas += gas0;\n    }\n\n    return [out, gas, distr];*/\n  }\n\n  calcOutput(from: number, to: number, paths: Pool[], amountIn: number): number {\n    if (from == to) return amountIn\n    if (paths.length == 1) {\n      const amountOut = paths[0].calcOutByIn(amountIn)\n      const p = this.getPaths(paths[0].to, to)\n      if (p !== undefined) {\n        const out = this.calcOutput(paths[0].to, to, p, amountOut)\n        return out\n      } else {\n        console.assert(0, 'Internal Error 78')\n        return -1\n      }\n    } else {\n      const distr = paths.map((p) => p.input())\n      const sum = distr.reduce((a, b) => a + b, 0)\n      let out = 0\n      for (let i = 0; i < paths.length; ++i) {\n        out += this.calcOutput(from, to, [paths[i]], (amountIn * distr[i]) / sum)\n      }\n      return out\n    }\n  }\n\n  calcPrice(from: number, to: number, paths: Pool[], amountIn: number): number {\n    const out1 = this.calcOutput(from, to, paths, amountIn)\n    const out2 = this.calcOutput(from, to, paths, amountIn * 1.001)\n    return ((out2 - out1) * 1000) / amountIn\n  }\n\n  calcInputForPrice(from: number, to: number, paths: Pool[], amountIn: number, price: number): number {\n    return revertPositive((x) => this.calcPrice(from, to, paths, x), price, amountIn)\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber/lib.esm/index.js';\n\nimport { RPool } from './PrimaryPools'\nimport { getBigNumber } from './Utils'\nimport type { RToken } from './PrimaryPools';\n\nexport interface Rebase {\n  elastic: BigNumber\n  base: BigNumber\n}\n\nfunction toAmountBN(share: BigNumber, total: Rebase) {\n  if (total.base.isZero() || total.elastic.isZero()) return share\n  return share.mul(total.elastic).div(total.base)\n}\n\nfunction toShareBN(elastic: BigNumber, total: Rebase) {\n  if (total.base.isZero() || total.elastic.isZero()) return elastic\n  return elastic.mul(total.base).div(total.elastic)\n}\n\nclass RebaseInternal {\n  elastic2Base: number\n  rebaseBN: Rebase\n\n  constructor(rebase: Rebase) {\n    this.rebaseBN = rebase\n    if (rebase.base.isZero() || rebase.elastic.isZero()) this.elastic2Base = 1\n    else this.elastic2Base = parseInt(rebase.elastic.toString()) / parseInt(rebase.base.toString())\n  }\n\n  toAmount(share: number) {\n    return share * this.elastic2Base\n  }\n\n  toShare(amount: number) {\n    return amount / this.elastic2Base\n  }\n\n  toAmountBN(share: BigNumber) {\n    return toAmountBN(share, this.rebaseBN)\n  }\n}\n\nexport function realReservesToAdjusted(reserve: BigNumber, total: Rebase, decimals: number) {\n  const amount = toAmountBN(reserve, total)\n  return amount.mul(1e12).div(getBigNumber(Math.pow(10, decimals)))\n}\n\nexport function adjustedReservesToReal(reserve: BigNumber, total: Rebase, decimals: number) {\n  const amount = reserve.mul(getBigNumber(Math.pow(10, decimals))).div(1e12)\n  return toShareBN(amount, total)\n}\n\n// xy(xx+yy) = k\nexport class StableSwapRPool extends RPool {\n  k: BigNumber // set it to 0 if reserves are changed !!\n  decimals0: number\n  decimals1: number\n  decimalsCompensation0: number\n  decimalsCompensation1: number\n  total0: RebaseInternal\n  total1: RebaseInternal\n\n  constructor(\n    address: string,\n    token0: RToken,\n    token1: RToken,\n    fee: number,\n    reserve0: BigNumber,\n    reserve1: BigNumber,\n    decimals0: number,\n    decimals1: number,\n    total0: Rebase,\n    total1: Rebase\n  ) {\n    super(\n      address,\n      token0,\n      token1,\n      fee,\n      realReservesToAdjusted(reserve0, total0, decimals0),\n      realReservesToAdjusted(reserve1, total1, decimals1)\n    )\n    this.k = BigNumber.from(0)\n    this.decimals0 = decimals0\n    this.decimals1 = decimals1\n    this.decimalsCompensation0 = Math.pow(10, 12 - decimals0)\n    this.decimalsCompensation1 = Math.pow(10, 12 - decimals1)\n    this.total0 = new RebaseInternal(total0)\n    this.total1 = new RebaseInternal(total1)\n  }\n\n  getReserve0() {\n    return adjustedReservesToReal(this.reserve0, this.total0.rebaseBN, this.decimals0)\n  }\n  getReserve1() {\n    return adjustedReservesToReal(this.reserve1, this.total1.rebaseBN, this.decimals1)\n  }\n  granularity0(): number {\n    return Math.max(1 / this.decimalsCompensation0, 1)\n  }\n  granularity1(): number {\n    return Math.max(1 / this.decimalsCompensation1, 1)\n  }\n\n  updateReserves(res0: BigNumber, res1: BigNumber) {\n    this.k = BigNumber.from(0)\n    this.reserve0 = realReservesToAdjusted(res0, this.total0.rebaseBN, this.decimals0)\n    this.reserve1 = realReservesToAdjusted(res1, this.total1.rebaseBN, this.decimals1)\n  }\n\n  computeK(): BigNumber {\n    if (this.k.isZero()) {\n      const x = this.reserve0\n      const y = this.reserve1\n      this.k = x.mul(y).mul(x.mul(x).add(y.mul(y)))\n    }\n    return this.k\n  }\n\n  computeY(x: BigNumber, yHint: BigNumber): BigNumber {\n    const k = this.computeK()\n    const x2 = x.shl(1)\n    const x3 = x.mul(3)\n    const xCube = x.mul(x).mul(x)\n    let yPrev = yHint,\n      y = yHint\n    for (let i = 0; i < 255; ++i) {\n      const ySquare = y.mul(y)\n      const yCube = ySquare.mul(y)\n      y = yCube.mul(x2).add(k).div(ySquare.mul(x3).add(xCube))\n      if (y.sub(yPrev).abs().lte(1)) break\n      yPrev = y\n    }\n    return y\n  }\n\n  calcOutByIn(amountIn: number, direction: boolean): { out: number; gasSpent: number } {\n    amountIn = direction ? this.total0.toAmount(amountIn) : this.total1.toAmount(amountIn)\n    amountIn *= direction ? this.decimalsCompensation0 : this.decimalsCompensation1\n    const x = direction ? this.reserve0 : this.reserve1\n    const y = direction ? this.reserve1 : this.reserve0\n    const xNew = x.add(getBigNumber(Math.floor(amountIn * (1 - this.fee))))\n    const yNew = this.computeY(xNew, y)\n    const outA = parseInt(y.sub(yNew).toString()) - 1 // with precision loss compensation\n    const outB = Math.max(outA, 0)\n    const outC = direction ? this.total1.toShare(outB) : this.total0.toShare(outB)\n    const out = outC / (direction ? this.decimalsCompensation1 : this.decimalsCompensation0)\n    return { out, gasSpent: this.swapGasCost }\n  }\n\n  calcInByOut(amountOut: number, direction: boolean): { inp: number; gasSpent: number } {\n    amountOut = direction ? this.total0.toAmount(amountOut) : this.total1.toAmount(amountOut)\n    amountOut *= direction ? this.decimalsCompensation1 : this.decimalsCompensation0\n    const x = direction ? this.reserve0 : this.reserve1\n    const y = direction ? this.reserve1 : this.reserve0\n    const yNew = y.sub(getBigNumber(Math.ceil(amountOut)))\n    if (yNew.lt(this.minLiquidity)) {\n      // not possible swap\n      return { inp: Number.POSITIVE_INFINITY, gasSpent: this.swapGasCost }\n    }\n\n    const xNew = this.computeY(yNew, x)\n    const inp0 = parseInt(xNew.sub(x).toString()) / (1 - this.fee)\n    const inp1 = direction ? this.total1.toShare(inp0) : this.total0.toShare(inp0)\n    const inp2 = inp1 / (direction ? this.decimalsCompensation0 : this.decimalsCompensation1)\n    const inp = Math.round(inp2) + 1 // with precision loss compensation\n    // const inp0 = parseInt(xNew.sub(x).toString()) / (1 - this.fee)\n    // const inp1 = Math.round(inp0) + 1 // with precision loss compensation\n    // const inp2 = direction ? this.total1.toShare(inp1) : this.total0.toShare(inp1)\n    // const inp = inp2 / (direction ? this.decimalsCompensation0 : this.decimalsCompensation1)\n    return { inp, gasSpent: this.swapGasCost }\n  }\n\n  calcCurrentPriceWithoutFee(direction: boolean): number {\n    const calcDirection = this.reserve0.gt(this.reserve1)\n    const xBN = calcDirection ? this.reserve0 : this.reserve1\n    const x = parseInt(xBN.toString())\n    const k = parseInt(this.computeK().toString())\n    const q = k / x / 2\n    const qD = -q / x // devivative of q\n    const Q = Math.pow(x, 6) / 27 + q * q\n    const QD = (6 * Math.pow(x, 5)) / 27 + 2 * q * qD // derivative of Q\n    const sqrtQ = Math.sqrt(Q)\n    const sqrtQD = (1 / 2 / sqrtQ) * QD // derivative of sqrtQ\n    const a = sqrtQ + q\n    const aD = sqrtQD + qD\n    const b = sqrtQ - q\n    const bD = sqrtQD - qD\n    const a3 = Math.pow(a, 1 / 3)\n    const a3D = (((1 / 3) * a3) / a) * aD\n    const b3 = Math.pow(b, 1 / 3)\n    const b3D = (((1 / 3) * b3) / b) * bD\n    const yD = a3D - b3D\n    const yDShares = calcDirection\n      ? this.total1.toShare(this.total0.toAmount(yD))\n      : this.total0.toShare(this.total1.toAmount(yD))\n    const price = calcDirection == direction ? -yDShares : -1 / yDShares\n    const scale = this.decimalsCompensation0 / this.decimalsCompensation1\n    return direction ? price * scale : price / scale\n  }\n}\n"],"names":["BigNumber"],"mappings":"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"}